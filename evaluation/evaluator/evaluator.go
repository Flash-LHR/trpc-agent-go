//
// Tencent is pleased to support the open source community by making trpc-agent-go available.
//
// Copyright (C) 2025 Tencent.  All rights reserved.
//
// trpc-agent-go is licensed under the Apache License Version 2.0.
//
//

// Package evaluator provides evaluator for evaluation.
package evaluator

import (
	"context"

	"trpc.group/trpc-go/trpc-agent-go/evaluation"
	"trpc.group/trpc-go/trpc-agent-go/evaluation/evalresult"
	"trpc.group/trpc-go/trpc-agent-go/evaluation/evalset"
)

// Evaluator is the interface that all evaluators must implement
type Evaluator interface {
	// Evaluate compares actual and expected invocations and returns a result
	Evaluate(ctx context.Context, actual, expected []evalset.Invocation) (*EvaluationResult, error)
	// Name returns the name of this evaluator
	Name() string
	// Description returns a description of what this evaluator does
	Description() string
}

// EvaluationResult represents the result of evaluating invocations
type EvaluationResult struct {
	// OverallScore is the overall score for this evaluation
	OverallScore float64 `json:"overall_score"`
	// OverallStatus is the overall status
	OverallStatus evaluation.EvalStatus `json:"overall_status"`
	// PerInvocationResults contains results for each invocation
	PerInvocationResults []PerInvocationResult `json:"per_invocation_results"`
	// Details contains additional evaluation details
	Details map[string]interface{} `json:"details,omitempty"`
	// ExecutionTimeMs time taken for evaluation
	ExecutionTimeMs int64 `json:"execution_time_ms"`
}

// PerInvocationResult represents the evaluation result for a single invocation
type PerInvocationResult struct {
	// ActualInvocation is the invocation generated by the agent
	ActualInvocation *evalset.Invocation `json:"actual_invocation"`
	// ExpectedInvocation is the reference/golden invocation
	ExpectedInvocation *evalset.Invocation `json:"expected_invocation"`
	// Score for this invocation
	Score float64 `json:"score"`
	// Status of this evaluation
	Status evaluation.EvalStatus `json:"status"`
	// Reason for the score/status
	Reason string `json:"reason,omitempty"`
	// MetricResults contains results for each metric
	MetricResults []evalresult.EvalMetricResult `json:"metric_results"`
}
