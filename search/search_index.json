{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tRPC-Agent-Go Framework Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The tRPC-Go team previously launched the MCP development framework and A2A development framework, which have been widely applied both internally and externally. Now we are launching the tRPC-Agent-Go framework to further complete the tRPC AI development framework ecosystem.</p>"},{"location":"#background-and-technical-choices","title":"Background and Technical Choices","text":""},{"location":"#development-background","title":"Development Background","text":"<p>With the rapid improvement of LLM capabilities, <code>Agent</code> development frameworks have become important infrastructure for connecting AI capabilities with business applications. Current frameworks have diverged in their technical approaches, and there is significant room for development in the Go language ecosystem.</p>"},{"location":"#industry-framework-technical-route-analysis","title":"Industry Framework Technical Route Analysis","text":"<p>Current AI <code>Agent</code> application development frameworks are mainly divided into two technical routes: Autonomous Multi-Agent Frameworks and Orchestration Frameworks.</p> <p>Autonomous Multi-Agent Frameworks</p> <p>Autonomous multi-agent frameworks embody the true concept of <code>Agent</code> (Autonomous Agent), where each <code>Agent</code> has environmental perception, autonomous decision-making, and action execution capabilities. Multiple agents collaborate through message passing and negotiation mechanisms, achieving distributed collaboration and dynamically adjusting strategies based on environmental changes, demonstrating emergent intelligent characteristics.</p> <ul> <li>AutoGen (Microsoft): Multi-agent collaboration system supporting agent role specialization and dynamic negotiation</li> <li>ADK (Google Agent Development Kit): Provides complete agent lifecycle management and multi-agent orchestration capabilities</li> <li>CrewAI: Task-oriented multi-agent collaboration platform emphasizing role definition and responsibility chain patterns</li> <li>Agno: Lightweight high-performance agent framework focusing on multimodal capabilities and team collaboration</li> </ul> <p>Orchestration Frameworks</p> <p>Orchestration frameworks adopt workflow thinking, organizing LLM calls and component interactions through predefined flowcharts or state machines. While the entire system exhibits \"intelligent\" characteristics, its execution path is deterministic, more like \"intelligent workflows\" rather than truly autonomous agents.</p> <ul> <li>LangChain: Component orchestration framework based on Chain abstraction, building LLM applications through predefined execution paths</li> <li>LangGraph: Directed acyclic graph (DAG) state machine framework providing deterministic state transitions and conditional branching</li> <li>Eino (ByteDance): LLM application orchestration framework managing processes based on Pipeline and Graph patterns</li> </ul>"},{"location":"#technical-comparison-of-two-framework-types","title":"Technical Comparison of Two Framework Types","text":"Comparison Dimension Autonomous Multi-Agent Frameworks Orchestration Frameworks Control Mode Distributed autonomous decision-making, inter-agent negotiation Centralized process orchestration, deterministic execution Applicable Scenarios Open-domain problem solving, creative tasks, multi-specialty collaboration Structured business processes, data processing pipelines, standardized operations Extension Method Horizontal extension of agent roles, vertical enhancement of agent capabilities Node extension and flowchart complexity Execution Predictability Emergent behavior, high result diversity Deterministic execution, reproducible results System Complexity Complex agent interactions, difficult debugging Clear processes, easy debugging and monitoring Technical Implementation Based on message passing and conversation protocols Based on state machines and directed graph execution"},{"location":"#technical-characteristics-of-autonomous-multi-agent-frameworks","title":"Technical Characteristics of Autonomous Multi-Agent Frameworks","text":"<p>Modern LLMs have significantly improved capabilities in complex reasoning and dynamic decision-making. Autonomous multi-agent frameworks compared to orchestration frameworks have the following characteristics:</p> <ul> <li>Adaptability: Agents dynamically adjust decision strategies and execution paths based on context</li> <li>Collaborative Emergence: Multiple agents achieve decentralized negotiation and task decomposition through message passing</li> <li>Cognitive Integration: Deep integration of LLM's reasoning, planning, and reflection capabilities to form intelligent decision-making chains</li> </ul>"},{"location":"#trpc-agent-go-technical-positioning","title":"tRPC-Agent-Go Technical Positioning","text":"<p>Industry and Ecosystem Status: With the continuous breakthrough of LLM capabilities, <code>Agent</code> development frameworks are becoming an important trend in AI application development. Current mainstream autonomous multi-agent frameworks (such as AutoGen, CrewAI, ADK, Agno, etc.) are mainly built on the Python ecosystem, providing rich choices for Python developers. However, Go language, with its excellent concurrent performance, memory safety, and deployment convenience, occupies an important position in microservice architectures. Currently, the more mature Go language AI development framework Eino (CloudWeGo) focuses on orchestration architecture, mainly applicable to structured business processes, while autonomous multi-agent frameworks are relatively scarce in the Go ecosystem, presenting development opportunities.</p> <p>Based on this current situation, tRPC-Agent-Go is positioned to provide autonomous multi-agent framework development capabilities for the Go ecosystem:</p> <ul> <li>Architecture Features: Adopts autonomous multi-agent architecture patterns, fully leveraging Go language's concurrency and high-performance advantages</li> <li>Ecosystem Integration: Deep integration with tRPC microservice ecosystem, reusing service governance, observability, and other infrastructure</li> <li>Application Adaptation: Meeting intelligent transformation and deployment requirements for complex business scenarios</li> </ul>"},{"location":"#trpc-agent-go-framework-overview","title":"tRPC-Agent-Go Framework Overview","text":"<p>The tRPC-Agent-Go framework integrates LLM, intelligent planners, session management, observability, and a rich tool ecosystem. It supports creating autonomous agents and semi-autonomous agents with reasoning capabilities, tool calling, sub-agent collaboration, and long-term state persistence, providing developers with a complete technology stack for building intelligent applications.</p>"},{"location":"#core-technical-features","title":"Core Technical Features","text":"<ul> <li>Diverse Agent System: Provides multiple agent execution modes including LLM, Chain, Parallel, Cycle, and more</li> <li>Rich Tool Ecosystem: Built-in common tool sets, supporting custom extensions and MCP protocol standardized integration</li> <li>Monitoring Capabilities: Integrated OpenTelemetry standards, supporting full-link tracing and performance monitoring</li> <li>Intelligent Session Management: Supports session state persistence, memory management, and knowledge base integration</li> <li>Modular Architecture: Clear layered design, facilitating extension and custom development</li> </ul>"},{"location":"#core-module-details","title":"Core Module Details","text":""},{"location":"#model-module-large-language-model-abstraction-layer","title":"Model Module - Large Language Model Abstraction Layer","text":"<p>The Model module provides unified LLM interface abstraction, supporting OpenAI-compatible API calls. Through standardized interface design, developers can flexibly switch between different model providers, achieving seamless model integration and calling. This module mainly supports OpenAI-like interface compatibility and has been verified with most interfaces both internally and externally.</p>"},{"location":"#core-interface-design","title":"Core Interface Design","text":"<pre><code>// Model is the interface that all language models must implement.\ntype Model interface {\n    // Generate content, supporting streaming responses.\n    GenerateContent(ctx context.Context, request *Request) (&lt;-chan *Response, error)\n\n    // Return basic model information.\n    Info() Info\n}\n\n// Model information structure.\ntype Info struct {\n    Name string // Model name.\n}\n</code></pre>"},{"location":"#openai-compatible-implementation","title":"OpenAI-Compatible Implementation","text":"<p>The framework provides complete OpenAI-compatible implementation, supporting connections to various OpenAI-like interfaces:</p> <pre><code>// Create OpenAI model.\nmodel := openai.New(\"gpt-4o-mini\",\n    openai.WithAPIKey(\"your-api-key\"),\n    openai.WithBaseURL(\"https://api.openai.com/v1\"), // Customizable BaseURL.\n)\n\n// Support custom configuration.\nmodel := openai.New(\"custom-model\",\n    openai.WithAPIKey(\"your-api-key\"),\n    openai.WithBaseURL(\"https://your-custom-endpoint.com/v1\"),\n    openai.WithChannelBufferSize(512),\n    openai.WithExtraFields(map[string]interface{}{\n        \"custom_param\": \"value\",\n    }),\n)\n</code></pre>"},{"location":"#supported-model-platforms","title":"Supported Model Platforms","text":"<p>The current framework supports all model platforms that provide OpenAI-compatible APIs, including but not limited to:</p> <ul> <li>OpenAI - GPT-4o, GPT-4, GPT-3.5 series models</li> <li>Tencent Cloud - Deeseek, hunyuan series</li> <li>Other Cloud Providers - Various models providing OpenAI-compatible interfaces, such as deepseek, qwen, etc.</li> </ul> <p>For detailed information about the Model module, please refer to Model</p>"},{"location":"#agent-module-agent-execution-engine","title":"Agent Module - Agent Execution Engine","text":"<p>The Agent module is the core component of tRPC-Agent-Go, providing intelligent reasoning engines and task orchestration capabilities. This module has the following core functions:</p> <ul> <li>Diverse Agent Types: Supports different execution modes including LLM, Chain, Parallel, Cycle, Graph, and more</li> <li>Tool Calling and Integration: Provides rich external capability extension mechanisms</li> <li>Event-Driven Architecture: Implements streaming processing and real-time monitoring</li> <li>Hierarchical Composition: Supports sub-agent collaboration and complex process orchestration</li> <li>State Management: Ensures long conversations and session persistence</li> </ul> <p>The Agent module achieves high modularity through unified interface standards, providing developers with complete technical support from intelligent conversation assistants to complex task automation.</p>"},{"location":"#core-interface-design_1","title":"Core Interface Design","text":"<pre><code>type Agent interface {\n    // Execute agent call, return event stream.\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n\n    // Return list of tools available to the agent.\n    Tools() []tool.Tool\n\n    // Return basic agent information.\n    Info() Info\n\n    // Return sub-agent list, supporting hierarchical composition.\n    SubAgents() []Agent\n\n    // Find sub-agent by name.\n    FindSubAgent(name string) Agent\n}\n</code></pre>"},{"location":"#multiple-agent-types","title":"Multiple Agent Types","text":"<p>LLMAgent - Basic Intelligent Agent</p> <p>Core Features: LLM-based intelligent agent supporting tool calling, streaming output, and session management.</p> <ul> <li>Execution Method: Direct interaction with LLM, supporting single-round conversations and multi-round sessions</li> <li>Applicable Scenarios: Intelligent customer service, content creation, code assistance, data analysis, Q&amp;A systems</li> <li>Advantages: Simple and direct, fast response, flexible configuration, easy to extend</li> </ul> <pre><code>agent := llmagent.New(\n    \"assistant\",\n    llmagent.WithModel(openai.New(\"gpt-4o-mini\")),\n    llmagent.WithInstruction(\"You are a professional AI assistant\"),\n    llmagent.WithTools([]tool.Tool{calculatorTool, searchTool}),\n)\n</code></pre> <p>ChainAgent - Chain Processing Agent</p> <p>Core Features: Pipeline mode, multiple agents execute sequentially, with the output of the previous one becoming the input of the next.</p> <ul> <li>Execution Method: Agent1 \u2192 Agent2 \u2192 Agent3 sequential execution</li> <li>Applicable Scenarios: Document processing pipelines, data ETL, content review chains</li> <li>Technical Advantages: Professional division of labor, clear processes, easy debugging</li> </ul> <pre><code>chain := chainagent.New(\n    \"content-pipeline\",\n    chainagent.WithSubAgents([]agent.Agent{\n        planningAgent,   // Step 1: Make plans.\n        researchAgent,   // Step 2: Collect information.\n        writingAgent,    // Step 3: Create content.\n    }),\n)\n</code></pre> <p>ParallelAgent - Parallel Processing Agent</p> <p>Core Features: Concurrent mode, multiple agents execute the same task simultaneously, then merge results.</p> <ul> <li>Execution Method: Agent1 + Agent2 + Agent3 simultaneous execution</li> <li>Applicable Scenarios: Multi-expert evaluation, multi-dimensional analysis, decision support</li> <li>Technical Advantages: Concurrent execution, multi-angle analysis, strong fault tolerance</li> </ul> <pre><code>parallel := parallelagent.New(\n    \"multi-expert-evaluation\",\n    parallelagent.WithSubAgents([]agent.Agent{\n        marketAgent,      // Market analysis expert.\n        technicalAgent,   // Technical evaluation expert.\n        financeAgent,     // Financial analysis expert.\n    }),\n)\n</code></pre> <p>CycleAgent - Iterative Agent</p> <p>Core Features: Iterative mode, through multiple rounds of \"execute \u2192 evaluate \u2192 improve\" cycles, continuously optimizing results.</p> <ul> <li>Execution Method: Loop execution until conditions are met or maximum rounds are reached</li> <li>Applicable Scenarios: Complex problem solving, content optimization, automatic debugging</li> <li>Technical Advantages: Self-improvement, quality enhancement, intelligent stopping</li> </ul> <pre><code>cycle := cycleagent.New(\n    \"problem-solver\",\n    cycleagent.WithSubAgents([]agent.Agent{\n        generatorAgent,  // Generate solutions.\n        reviewerAgent,   // Evaluate quality.\n    }),\n    // Set maximum iterations to 5 to prevent infinite loops.\n    cycleagent.WithMaxIterations(5),\n)\n</code></pre> <p>GraphAgent - Graph Workflow Agent</p> <p>Core Features: Graph-based workflow mode, supporting conditional routing and multi-node collaboration for complex task processing.</p> <p>Design Purpose: To meet and be compatible with most AI Agent applications developed based on graph orchestration frameworks within Tencent, facilitating migration of existing users and preserving existing development habits.</p> <ul> <li>Execution Method: Execute according to graph structure, supporting LLM nodes, tool nodes, conditional branches, and state management</li> <li>Applicable Scenarios: Complex decision processes, multi-step task collaboration, dynamic routing processing, existing graph orchestration application migration</li> <li>Technical Advantages: Flexible routing, state sharing, visual processes, compatible with existing development patterns</li> </ul> <pre><code>// Create document processing workflow.\nstateGraph := graph.NewStateGraph(graph.MessagesStateSchema())\n\n// Create analysis tool.\ncomplexityTool := function.NewFunctionTool(\n    analyzeComplexity,\n    function.WithName(\"analyze_complexity\"),\n    function.WithDescription(\"Analyze document complexity\"),\n)\ntools := map[string]tool.Tool{\"analyze_complexity\": complexityTool}\n\n// Build workflow graph.\ng, err := stateGraph.\n    AddNode(\"preprocess\", preprocessDocument). // Preprocessing node.\n    AddLLMNode(\"analyze\", model,\n        \"Analyze document complexity using analyze_complexity tool\",\n                                        tools). // LLM analysis node.\n    AddToolsNode(\"tools\", tools).                                         // Tool node.\n    AddNode(\"route_complexity\", routeComplexity).                         // Routing decision node.\n    AddLLMNode(\"summarize\", model, \"Summarize complex documents\", nil).   // LLM summary node.\n    AddLLMNode(\"enhance\", model, \"Enhance simple document quality\", nil). // LLM enhancement node.\n    AddNode(\"format_output\", formatOutput).                               // Formatting node.\n    SetEntryPoint(\"preprocess\").                                          // Set entry point.\n    SetFinishPoint(\"format_output\").                                      // Set exit point.\n    AddEdge(\"preprocess\", \"analyze\").                                     // Connect nodes.\n    AddToolsConditionalEdges(\"analyze\", \"tools\", \"route_complexity\").\n    AddConditionalEdges(\"route_complexity\", complexityCondition, map[string]string{\n        \"simple\":  \"enhance\",\n        \"complex\": \"summarize\",\n    }).\n    AddEdge(\"enhance\", \"format_output\").\n    AddEdge(\"summarize\", \"format_output\").\n    Compile()\n\n// Create GraphAgent and run.\ngraphAgent, err := graphagent.New(\"document-processor\", g,\n    graphagent.WithDescription(\"Document processing workflow\"),\n    graphagent.WithInitialState(graph.State{}),\n)\n\nrunner := runner.NewRunner(\"doc-workflow\", graphAgent)\nevents, _ := runner.Run(ctx, userID, sessionID,\n    model.NewUserMessage(\"Process this document content\"))\n</code></pre> <p>For detailed information about the Agent module, please refer to Agent, Multi-Agent, and Graph</p>"},{"location":"#event-module-event-driven-system","title":"Event Module - Event-Driven System","text":"<p>The Event module is the core of tRPC-Agent-Go's event system, responsible for state transmission and real-time communication during agent execution. Through a unified event model, it achieves decoupled communication between agents and transparent execution monitoring.</p>"},{"location":"#core-features","title":"Core Features","text":"<ul> <li>Asynchronous Communication: Agents communicate through event streams in a non-blocking manner, supporting high-concurrency execution</li> <li>Real-time Monitoring: All execution states are transmitted in real-time through events, supporting streaming processing</li> <li>Unified Abstraction: Different types of agents interact through the same event interface</li> <li>Multi-Agent Collaboration: Supports branch event filtering and state tracking</li> </ul>"},{"location":"#core-interface","title":"Core Interface","text":"<pre><code>// Event represents an event during agent execution.\ntype Event struct {\n    *model.Response           // Embed all fields of LLM response.\n    InvocationID    string    // Unique identifier for this call.\n    Author          string    // Event initiator (Agent name).\n    ID              string    // Event unique identifier.\n    Timestamp       time.Time // Event timestamp.\n    Branch          string    // Branch identifier (multi-agent collaboration).\n}\n</code></pre>"},{"location":"#main-event-types","title":"Main Event Types","text":"<ul> <li><code>chat.completion</code> - LLM conversation completion event</li> <li><code>chat.completion.chunk</code> - Streaming conversation event</li> <li><code>tool.response</code> - Tool response event</li> <li><code>agent.transfer</code> - Agent transfer event</li> <li><code>error</code> - Error event</li> </ul>"},{"location":"#agentrun-and-event-handling","title":"Agent.Run() and Event Handling","text":"<p>All agents return event streams through the <code>Run()</code> method, implementing a unified execution interface:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n)\n\n// Agent interface definition.\ntype Agent interface {\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n}\n\n// Create agent and execute using Runner.\nagent := llmagent.New(\"assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools(tools))\n\n// Execute agent using Runner (recommended approach).\nrunner := runner.NewRunner(\"calculator-app\", agent)\nevents, err := runner.Run(ctx, \"user-001\", \"session-001\", \n    model.NewUserMessage(\"What is 2+3?\"))\n\n// Process event stream in real-time.\nfor event := range events {\n    switch event.Object {\n    case \"chat.completion.chunk\":\n        fmt.Print(event.Choices[0].Delta.Content)\n    case \"tool.response\":\n        fmt.Printf(\"\\n[%s] Tool execution completed\\n\", event.Author)\n    case \"chat.completion\":\n        if event.Done {\n            fmt.Printf(\"\\n[%s] Final answer: %s\\n\", \n                event.Author, event.Choices[0].Message.Content)\n        }\n    case \"error\":\n        fmt.Printf(\"Error: %s\\n\", event.Error.Message)\n        return event.Error\n    }\n    if event.Done { break }\n}\n</code></pre>"},{"location":"#event-flow-in-multi-agent-collaboration","title":"Event Flow in Multi-Agent Collaboration","text":"<pre><code>chainAgent := chainagent.New(\"chain\", \n    chainagent.WithSubAgents([]agent.Agent{\n        analysisAgent, solutionAgent,\n    }))\n\nevents, err := chainAgent.Run(ctx, invocation)\nif err != nil {\n    return err\n}\n\nfor event := range events {\n    switch event.Object {\n    case \"chat.completion.chunk\":\n        fmt.Print(event.Choices[0].Delta.Content)\n    case \"chat.completion\":\n        if event.Done {\n            fmt.Printf(\"[%s] Completed: %s\\n\", event.Author, \n                event.Choices[0].Message.Content)\n        }\n    case \"tool.response\":\n        fmt.Printf(\"[%s] Tool execution completed\\n\", event.Author)\n    case \"error\":\n        fmt.Printf(\"[%s] Error: %s\\n\", event.Author, event.Error.Message)\n    }\n}\n</code></pre>"},{"location":"#multi-agent-system-multi-agent-collaboration-system","title":"Multi-Agent System - Multi-Agent Collaboration System","text":"<p>tRPC-Agent-Go uses the SubAgent mechanism to build multi-agent systems, supporting multiple agents collaborating to handle complex tasks.</p> <pre><code>// Create professional domain agents.\nmarketAnalyst := llmagent.New(\"market-analyst\",\n    llmagent.WithModel(model),\n    llmagent.WithInstruction(\"You are a market analysis expert\"),\n    llmagent.WithTools([]tool.Tool{marketDataTool}))\n\ntechArchitect := llmagent.New(\"tech-architect\", \n    llmagent.WithModel(model),\n    llmagent.WithInstruction(\"You are a technical architecture expert\"),\n    llmagent.WithTools([]tool.Tool{techAnalysisTool}))\n\n// Serial collaboration: Market analysis \u2192 Technical evaluation.\nplanningChain := chainagent.New(\"product-planning\",\n    chainagent.WithSubAgents([]agent.Agent{\n        marketAnalyst, techArchitect,\n    }))\n\n// Parallel collaboration: Multiple experts evaluate simultaneously.\nexpertPanel := parallelagent.New(\"expert-panel\",\n    parallelagent.WithSubAgents([]agent.Agent{\n        marketAnalyst, techArchitect,\n    }))\n\n// Execute multi-agent collaboration.\nrunner := runner.NewRunner(\"expert-panel-app\", masterAgent)\nevents, err := runner.Run(ctx, \"user-001\", \"session-001\", \n    model.NewUserMessage(\"Analyze the market and design product solutions\"))\n</code></pre> <p>For detailed information about the Event module, please refer to Event</p>"},{"location":"#planner-module-intelligent-planning-engine","title":"Planner Module - Intelligent Planning Engine","text":"<p>The Planner module provides agents with intelligent planning capabilities, enhancing their reasoning and decision-making abilities through different planning strategies. It supports three modes: built-in thinking models, React structured planning, and custom explicit planning guidance, enabling agents to better decompose complex tasks and formulate execution plans. The React mode, through \"thinking-action\" cycles and structured labels, provides explicit reasoning guidance for ordinary models, ensuring agents can systematically handle complex tasks.</p>"},{"location":"#core-interface-design_2","title":"Core Interface Design","text":"<pre><code>// Planner interface defines methods that all planners must implement.\ntype Planner interface {\n    // Build planning instructions, adding planning-related system instructions to LLM requests.\n    BuildPlanningInstruction(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        llmRequest *model.Request,\n    ) string\n\n    // Process planning responses, performing post-processing and structuring of LLM responses.\n    ProcessPlanningResponse(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        response *model.Response,\n    ) *model.Response\n}\n</code></pre>"},{"location":"#built-in-planning-strategies","title":"Built-in Planning Strategies","text":"<p>Builtin Planner - Built-in Thinking Planner</p> <p>Applicable to models with native thinking capabilities, enabling internal reasoning mechanisms through model parameter configuration:</p> <pre><code>// Configure reasoning intensity for OpenAI o-series models.\nbuiltinPlanner := builtin.New(builtin.Options{\n    ReasoningEffort: stringPtr(\"medium\"), // \"low\", \"medium\", \"high\".\n}\n\n// Enable thinking mode for Claude/Gemini models.\nbuiltinPlanner := builtin.New(builtin.Options{\n    ThinkingEnabled: boolPtr(true),\n    ThinkingTokens:  intPtr(1000),\n})\n</code></pre> <p>React Planner - Structured Planner</p> <p>The <code>React (Reasoning and Acting) Planner</code> is an AI reasoning mode that guides models through \"thinking-action\" cycles through structured labels. It decomposes complex problems into four standardized stages: planning, reasoning analysis, action execution, and providing answers. This explicit reasoning process enables agents to systematically handle complex tasks while improving the explainability of decisions and error detection capabilities.</p>"},{"location":"#integration-with-agent","title":"Integration with Agent","text":"<p>The <code>React Planner</code> can be seamlessly integrated into any LLMAgent, providing agents with structured thinking capabilities. After integration, agents will automatically process user requests according to the four stages of React mode, ensuring that each complex task receives systematic processing.</p> <pre><code>// Create agent with planning capabilities.\nagent := llmagent.New(\n    \"planning-assistant\",\n    llmagent.WithModel(openai.New(\"gpt-4o\")),\n    llmagent.WithPlanner(reactPlanner), // Integrate planner.\n    llmagent.WithInstruction(\"You are an intelligent assistant good at planning\"),\n)\n\n// Agent will automatically use the planner to:\n// 1. Formulate step-by-step plans for complex tasks (PLANNING stage).\n// 2. Conduct reasoning analysis during execution (REASONING stage).\n// 3. Call corresponding tools to perform specific operations (ACTION stage).\n// 4. Integrate all information to provide complete answers (FINAL_ANSWER stage).\n</code></pre> <p>Actual Application Effects: Agents using the <code>React Planner</code> exhibit obvious structured thinking characteristics when handling complex queries. For example, when users ask \"Help me plan a trip,\" the agent will first analyze requirements (<code>PLANNING</code>), then reason about the best route (<code>REASONING</code>), then query specific information (<code>ACTION</code>), and finally provide complete travel advice (<code>FINAL_ANSWER</code>). This approach not only improves answer quality but also allows users to clearly see the agent's thinking process.</p>"},{"location":"#custom-planner","title":"Custom Planner","text":"<p>Developers can implement custom planners to meet specific requirements:</p> <pre><code>// Custom Reflection planner example.\ntype ReflectionPlanner struct {\n    maxIterations int\n}\n\nfunc (p *ReflectionPlanner) BuildPlanningInstruction(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    llmRequest *model.Request,\n) string {\n    return `Please follow these steps for reflective planning:\n1. Analyze the problem and formulate initial plans\n2. Execute plans and collect results\n3. Reflect on the execution process, identify problems and improvement points\n4. Optimize plans based on reflection and re-execute\n5. Repeat reflection-optimization process until satisfactory results are achieved`\n}\n\nfunc (p *ReflectionPlanner) ProcessPlanningResponse(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    response *model.Response,\n) *model.Response {\n    // Process reflection content, extract improvement suggestions.\n// Implement reflection logic...\nreturn response\n}\n\n// Use custom planner.\nreflectionPlanner := &amp;ReflectionPlanner{maxIterations: 3}\nagent := llmagent.New(\n    \"reflection-agent\",\n    llmagent.WithModel(model),\n    llmagent.WithPlanner(reflectionPlanner), // Use custom planner.\n)\n</code></pre> <p>For detailed information about the Planner module, please refer to Planner</p>"},{"location":"#tool-module-tool-calling-framework","title":"Tool Module - Tool Calling Framework","text":"<p>The Tool module provides standardized tool definition, registration, and execution mechanisms, enabling agents to interact with the external world. It supports two modes: synchronous calling (<code>CallableTool</code>) and streaming calling (<code>StreamableTool</code>), meeting different technical requirements for various scenarios.</p>"},{"location":"#core-interface-design_3","title":"Core Interface Design","text":"<pre><code>// Basic tool interface.\ntype Tool interface {\n    Declaration() *Declaration  // Return tool metadata.\n}\n\n// Synchronous calling tool interface.\ntype CallableTool interface {\n    Call(ctx context.Context, jsonArgs []byte) (any, error)\n    Tool\n}\n\n// Streaming tool interface.\ntype StreamableTool interface {\n    StreamableCall(ctx context.Context, jsonArgs []byte) (*StreamReader, error)\n    Tool\n}\n</code></pre>"},{"location":"#tool-creation-examples","title":"Tool Creation Examples","text":"<pre><code>// Calculator tool.\ncalculatorTool := function.NewFunctionTool(\n    func(ctx context.Context, input struct {\n        Operation string  `json:\"operation\"`\n        A         float64 `json:\"a\"`\n        B         float64 `json:\"b\"`\n    }) (struct {\n        Result float64 `json:\"result\"`\n    }, error) {\n        var result float64\n        switch input.Operation {\n        case \"add\":\n            result = input.A + input.B\n        case \"multiply\":\n            result = input.A * input.B\n        case \"subtract\":\n            result = input.A - input.B\n        case \"divide\":\n            if input.B != 0 {\n                result = input.A / input.B\n            } else {\n                return struct{Result float64}{}, fmt.Errorf(\"division by zero\")\n            }\n        default:\n            return struct{Result float64}{}, fmt.Errorf(\"unsupported operation: %s\", input.Operation)\n        }\n        return struct{Result float64}{result}, nil\n    },\n    function.WithName(\"calculator\"),\n    function.WithDescription(\"Perform mathematical calculations\"),\n)\n\n// Streaming log query tool type definition.\ntype logInput struct {\n    Query string `json:\"query\"`\n}\n\ntype logOutput struct {\n    Log string `json:\"log\"`\n}\n\n// Streaming log query tool.\nlogStreamTool := function.NewStreamableFunctionTool[logInput, logOutput](\n    func(input logInput) *tool.StreamReader {\n        stream := tool.NewStream(10)\n        go func() {\n            defer stream.Writer.Close()\n            for i := 0; i &lt; 5; i++ {\n                chunk := tool.StreamChunk{\n                    Content: logOutput{\n                        Log: fmt.Sprintf(\"Log %d: %s\", i+1, input.Query),\n                    },\n                }\n                if stream.Writer.Send(chunk, nil) {\n                    return // stream closed.\n                }\n                time.Sleep(50 * time.Millisecond)\n            }\n        }()\n        return stream.Reader\n    },\n    function.WithName(\"log_stream\"),\n    function.WithDescription(\"Streaming log query\"),\n)\n\n// Create multi-tool agent.\nagent := llmagent.New(\n    \"multi-tool-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools([]tool.Tool{\n        calculatorTool,\n        logStreamTool,\n        duckduckgo.NewTool(),\n    }),\n)\n</code></pre>"},{"location":"#mcp-tool-integration","title":"MCP Tool Integration","text":"<p>The framework supports various MCP tool calls, providing multiple connection methods. All MCP tools are created through the unified <code>NewMCPToolSet</code> function:</p> <pre><code>// SSE-connected MCP tool set.\nsseToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"sse\",\n        ServerURL: \"https://api.example.com/mcp/sse\",\n        Headers: map[string]string{\n            \"Authorization\": \"Bearer your-token\",\n        },\n        Timeout: 10 * time.Second,\n    },\n)\n\n// Streamable HTTP-connected MCP tool set.\nstreamableToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"streamable_http\",\n        ServerURL: \"https://api.example.com/mcp\",\n        Timeout: 10 * time.Second,\n    },\n)\n\n// StdIO-connected MCP tool set.\nstdoutToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"stdio\",\n        Command: \"python\",\n        Args:    []string{\"-m\", \"my_mcp_server\"},\n        Timeout: 10 * time.Second,\n    },\n)\n\nagent := llmagent.New(\n    \"mcp-agent\",\n    llmagent.WithModel(model),\n    llmagent.WithToolSets([]tool.ToolSet{sseToolSet, streamableToolSet, stdioToolSet}),\n)\n</code></pre> <p>For detailed information about the Tool module, please refer to Tools</p>"},{"location":"#codeexecutor-module-code-execution-engine","title":"CodeExecutor Module - Code Execution Engine","text":"<p>The CodeExecutor module provides agents with code execution capabilities, supporting execution of Python and Bash code in local environments or Docker containers, enabling agents to have practical working abilities such as data analysis, scientific computing, and script automation.</p>"},{"location":"#core-interface-design_4","title":"Core Interface Design","text":"<pre><code>// CodeExecutor is the core interface for code execution.\ntype CodeExecutor interface {\n    ExecuteCode(context.Context, CodeExecutionInput) (CodeExecutionResult, error)\n    CodeBlockDelimiter() CodeBlockDelimiter\n}\n\n// Code execution input and results.\ntype CodeExecutionInput struct {\n    CodeBlocks  []CodeBlock\n    ExecutionID string\n}\n\ntype CodeExecutionResult struct {\n    Output      string // Execution output.\n    OutputFiles []File // Generated files.\n}\n</code></pre>"},{"location":"#two-executor-implementations","title":"Two Executor Implementations","text":"<p>LocalCodeExecutor - Local Executor</p> <p>Executes code directly in the local environment, suitable for development testing and trusted environments:</p> <pre><code>// Create local executor.\nlocalExecutor := local.New(\n    local.WithWorkDir(\"/tmp/code-execution\"),\n    local.WithTimeout(30*time.Second),\n    local.WithCleanTempFiles(true),\n)\n\n// Integrate with agent.\nagent := llmagent.New(\n    \"data-analyst\",\n    llmagent.WithModel(model),\n    llmagent.WithCodeExecutor(localExecutor), // Integrate code executor.\n    llmagent.WithInstruction(\"You are a data analyst who can execute Python code\"),\n)\n</code></pre> <p>ContainerCodeExecutor - Container Executor</p> <p>Executes code in isolated Docker containers, providing higher security, suitable for production environments:</p> <pre><code>// Create container executor.\ncontainerExecutor, err := container.New(\n    container.WithContainerConfig(container.Config{\n        Image: \"python:3.11-slim\",\n    }),\n    container.WithHostConfig(container.HostConfig{\n        AutoRemove:  true,\n        NetworkMode: \"none\",  // Network isolation.\n        Resources: container.Resources{\n            Memory: 128 * 1024 * 1024,  // Memory limit.\n        },\n    }),\n)\n\nagent := llmagent.New(\n    \"secure-analyst\",\n    llmagent.WithModel(model),\n    llmagent.WithCodeExecutor(containerExecutor), // Use container executor.\n)\n</code></pre>"},{"location":"#automatic-code-block-recognition","title":"Automatic Code Block Recognition","text":"<p>The framework automatically extracts markdown code blocks from agent responses and executes them:</p> <pre><code>// When agent responses contain code blocks, they are automatically executed:\n// ```python\n// import statistics\n// data = [1, 2, 3, 4, 5]\n// print(f\"Average: {statistics.mean(data)}\")\n// ```\n//\n// Supports Python and Bash code:\n// ```bash\n// echo \"Current time: $(date)\"\n// ```\n</code></pre>"},{"location":"#usage-examples","title":"Usage Examples","text":"<pre><code>// Data analysis agent.\ndataAgent := llmagent.New(\n    \"data-scientist\",\n    llmagent.WithModel(model),\n    llmagent.WithCodeExecutor(local.New()),\n    llmagent.WithInstruction(\"You are a data scientist using Python standard library for data analysis\"),\n)\n\n// User asks question, agent automatically generates and executes code.\nrunner := runner.NewRunner(\"analysis\", dataAgent)\nevents, _ := runner.Run(ctx, userID, sessionID, \n    model.NewUserMessage(\"Analyze data: 23, 45, 12, 67, 34, 89\"))\n\n// Agent automatically:\n// 1. Generates Python analysis code.\n// 2. Executes code to get results.\n// 3. Interprets analysis results.\n</code></pre> <p>The CodeExecutor module upgrades agents from pure conversation to intelligent assistants with practical computing capabilities, supporting application scenarios such as data analysis, script automation, and scientific computing.</p>"},{"location":"#runner-module-agent-executor","title":"Runner Module - Agent Executor","text":"<p>The Runner module is the executor and runtime environment for agents, responsible for agent lifecycle management, session state maintenance, and event stream processing.</p>"},{"location":"#core-interface_1","title":"Core Interface","text":"<pre><code>type Runner interface {\n    Run(\n        ctx context.Context,\n        userID string,               // User identifier.\n        sessionID string,            // Session identifier.\n        message model.Message,       // Input message.\n        runOpts ...agent.RunOptions, // Run options.\n    ) (&lt;-chan *event.Event, error)   // Return event stream.\n}\n</code></pre>"},{"location":"#usage-examples_1","title":"Usage Examples","text":"<pre><code>// Step 1: Create agent.\nagent := llmagent.New(\n    \"customer-service-agent\",\n    llmagent.WithModel(openai.New(\"gpt-4o-mini\")),\n    llmagent.WithInstruction(\"You are a professional customer service assistant\"),\n)\n\n// Step 2: Create Runner and bind agent.\nrunner := runner.NewRunner(\n    \"customer-service-app\", // Application name.\n    agent,                  // Bind agent.\n)\n\n// Step 3: Execute conversation.\nevents, err := runner.Run(\n    context.Background(),\n    \"user-001\",    // User ID.\n    \"session-001\", // Session ID.\n    model.NewUserMessage(\"Hello, I want to inquire about product information\"),\n)\n\n// Step 4: Process event stream.\nfor event := range events {\n    if event.Object == \"agent.message\" &amp;&amp; len(event.Choices) &gt; 0 {\n        fmt.Printf(\"Agent: %s\\n\", event.Choices[0].Message.Content)\n    }\n}\n</code></pre> <p>For detailed information about the Runner module, please refer to Runner</p>"},{"location":"#invocation-agent-execution-context","title":"Invocation - Agent Execution Context","text":"<p>Invocation is the core context object for agent execution, encapsulating all information and state required for a single call. It serves as a parameter for the <code>Agent</code>.Run() method, supporting event tracking, state management, and inter-agent collaboration.</p>"},{"location":"#core-structure","title":"Core Structure","text":"<pre><code>type Invocation struct {\n    Agent             Agent                    // Agent instance to call.\n    AgentName         string                   // Agent name.\n    InvocationID      string                   // Call unique identifier.\n    Branch            string                   // Branch identifier (multi-agent collaboration).\n    EndInvocation     bool                     // Whether to end the call.\n    Session           *session.Session         // Session state.\n    Model             model.Model              // Language model.\n    Message           model.Message            // User message.\n    EventCompletionCh &lt;-chan string            // Event completion signal.\n    RunOptions        RunOptions               // Run options.\n    TransferInfo      *TransferInfo            // Agent transfer information.\n    AgentCallbacks    *Callbacks               // Agent callbacks.\n    ModelCallbacks    *model.Callbacks         // Model callbacks.\n    ToolCallbacks     *tool.Callbacks          // Tool callbacks.\n}\n\ntype TransferInfo struct {\n    TargetAgentName string // Target agent name.\n    Message         string // Transfer message.\n    EndInvocation   bool   // Whether to end after transfer.\n}\n</code></pre>"},{"location":"#main-functions","title":"Main Functions","text":"<ul> <li>Execution Context: Agent identification, call tracking, branch control</li> <li>State Management: Session history, model configuration, message passing</li> <li>Event Control: Asynchronous communication, execution options</li> <li>Agent Collaboration: Control transfer, callback mechanisms</li> </ul>"},{"location":"#usage-examples_2","title":"Usage Examples","text":"<pre><code>// Basic call.\ninvocation := &amp;agent.Invocation{\n    AgentName:    \"assistant\",\n    InvocationID: \"inv-001\",\n    Model:        openai.New(\"gpt-4o-mini\"),\n    Message:      model.NewUserMessage(\"Hello\"),\n    Session:      &amp;session.Session{ID: \"session-001\"},\n}\nevents, err := agent.Run(ctx, invocation)\n\n// Runner automatically creates (recommended).\nrunner := runner.NewRunner(\"my-app\", agent)\nevents, err := runner.Run(ctx, userID, sessionID, userMessage)\n\n// Context retrieval.\ninvocation, ok := agent.InvocationFromContext(ctx)\n</code></pre>"},{"location":"#best-practices","title":"Best Practices","text":"<ul> <li>Prioritize using Runner to automatically create Invocation</li> <li>The framework automatically fills in Model, Callbacks, and other fields</li> <li>Use transfer tools to implement agent transfer, avoid directly setting TransferInfo</li> </ul>"},{"location":"#memory-module-intelligent-memory-system","title":"Memory Module - Intelligent Memory System","text":"<p>The Memory module provides agents with persistent memory capabilities, enabling agents to remember and retrieve user information across sessions, providing personalized interaction experiences.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>Agents automatically identify and store important information through built-in memory tools, supporting topic label classification management, and intelligently retrieve relevant memories when needed. Multi-tenant isolation is achieved through AppName+UserID, ensuring user data security.</p>"},{"location":"#application-scenarios","title":"Application Scenarios","text":"<p>Applicable to personal assistants, customer service robots, educational tutoring, project collaboration, and other scenarios requiring cross-session memory of user information, such as remembering user preferences, tracking problem-solving progress, and saving learning plans.</p>"},{"location":"#core-interface_2","title":"Core Interface","text":"<pre><code>type Service interface {\n    // Add new memory.\n    AddMemory(ctx context.Context, userKey UserKey, memory string, topics []string) error\n    // Update existing memory.\n    UpdateMemory(ctx context.Context, memoryKey Key, memory string, topics []string) error\n    // Delete specified memory.\n    DeleteMemory(ctx context.Context, memoryKey Key) error\n    // Clear all user memories.\n    ClearMemories(ctx context.Context, userKey UserKey) error\n    // Read recent memories.\n    ReadMemories(ctx context.Context, userKey UserKey, limit int) ([]*Entry, error)\n    // Search memories.\n    SearchMemories(ctx context.Context, userKey UserKey, query string) ([]*Entry, error)\n    // Get memory tools.\n    Tools() []tool.Tool\n}\n\n// Data structure.\ntype Entry struct {\n    ID        string    `json:\"id\"`\n    AppName   string    `json:\"app_name\"`\n    UserID    string    `json:\"user_id\"`\n    Memory    *Memory   `json:\"memory\"`\n    CreatedAt time.Time `json:\"created_at\"`\n    UpdatedAt time.Time `json:\"updated_at\"`\n}\n\ntype Memory struct {\n    Memory      string     `json:\"memory\"`\n    Topics      []string   `json:\"topics,omitempty\"`\n    LastUpdated *time.Time `json:\"last_updated,omitempty\"`\n}\n</code></pre>"},{"location":"#quick-integration","title":"Quick Integration","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n)\n\n// Create memory service.\nmemoryService := inmemory.NewMemoryService()\n\n// Create agent with memory capabilities.\nagent := llmagent.New(\n    \"memory-bot\",\n    llmagent.WithModel(model),\n    llmagent.WithMemory(memoryService), // Automatically register memory tools.\n)\n</code></pre>"},{"location":"#built-in-memory-tools","title":"Built-in Memory Tools","text":"Tool Name Default Status Function Description <code>memory_add</code> \u2705 Enabled Add new memory entries <code>memory_update</code> \u2705 Enabled Update existing memory content <code>memory_search</code> \u2705 Enabled Search memories by keywords <code>memory_load</code> \u2705 Enabled Load recent memory records <code>memory_delete</code> \u274c Disabled Delete specified memory entries <code>memory_clear</code> \u274c Disabled Clear all user memories"},{"location":"#usage-examples_3","title":"Usage Examples","text":"<pre><code>// Agent automatically calls memory tools:\n\n// Record information: \"My name is Zhang San, I live in Beijing\".\n// \u2192 memory_add(\"Zhang San lives in Beijing\", [\"Personal Information\"])\n\n// Query information: \"Where do I live?\".\n// \u2192 memory_search(\"address\") \u2192 Return relevant memories.\n\n// Update information: \"I moved to Shanghai\".\n// \u2192 memory_update(id, \"Zhang San lives in Shanghai\", [\"Personal Information\"])\n</code></pre> <p>For detailed information about the Memory module, please refer to Memory</p>"},{"location":"#session-module-session-management-system","title":"Session Module - Session Management System","text":"<p>The Session module provides session management functionality for maintaining conversation history and context information during interactions between agents and users. The session management module supports multiple storage backends, including in-memory storage and Redis storage. Other storage backends such as MySQL and PostgreSQL will be added based on user requirements, providing flexible state persistence capabilities for agent applications.</p>"},{"location":"#core-features_1","title":"Core Features","text":"<ul> <li>Session Persistence: Save complete conversation history and context</li> <li>Multiple Storage Backends: Support in-memory storage and Redis storage</li> <li>Event Tracking: Complete recording of all interaction events in sessions</li> </ul>"},{"location":"#session-hierarchy-structure","title":"Session Hierarchy Structure","text":"<pre><code>Application (Application)\n\u251c\u2500\u2500 User Sessions (User Sessions)\n\u2502   \u251c\u2500\u2500 Session 1 (Session 1)\n\u2502   \u2502   \u251c\u2500\u2500 Session Data (Session Data)\n\u2502   \u2502   \u2514\u2500\u2500 Events (Event List)\n\u2502   \u2514\u2500\u2500 Session 2 (Session 2)\n\u2502       \u251c\u2500\u2500 Session Data (Session Data)\n\u2502       \u2514\u2500\u2500 Events (Event List)\n\u2514\u2500\u2500 App Data (Application Data)\n</code></pre>"},{"location":"#core-interface_3","title":"Core Interface","text":"<pre><code>// Service defines the core interface of session service.\ntype Service interface {\n    // CreateSession creates a new session.\n    CreateSession(ctx context.Context, key Key, state StateMap, options ...Option) (*Session, error)\n\n    // GetSession gets a session.\n    GetSession(ctx context.Context, key Key, options ...Option) (*Session, error)\n\n    // ListSessions lists all sessions by user scope of session key.\n    ListSessions(ctx context.Context, userKey UserKey, options ...Option) ([]*Session, error)\n\n    // DeleteSession deletes a session.\n    DeleteSession(ctx context.Context, key Key, options ...Option) error\n\n    // AppendEvent appends an event to a session.\n    AppendEvent(ctx context.Context, session *Session, event *event.Event, options ...Option) error\n\n    // Close closes the service.\n    Close() error\n}\n</code></pre>"},{"location":"#storage-backend-support","title":"Storage Backend Support","text":"<pre><code>// In-memory storage (suitable for development and testing).\nsessionService := inmemory.NewSessionService()\n\n// Redis storage (suitable for production environments).\nsessionService, err := redis.NewService(\n    redis.WithURL(\"redis://localhost:6379/0\"),\n)\n</code></pre>"},{"location":"#integration-with-runner","title":"Integration with Runner","text":"<pre><code>// Create Runner and configure session service.\nrunner := runner.NewRunner(\n    \"my-agent\",\n    llmAgent,\n    runner.WithSessionService(sessionService), // Integrate session management.\n)\n\n// Use Runner for multi-round conversations.\neventChan, err := runner.Run(ctx, userID, sessionID, userMessage)\n</code></pre> <p>For detailed information about the Session module, please refer to Session</p>"},{"location":"#knowledge-module-knowledge-management-system","title":"Knowledge Module - Knowledge Management System","text":"<p>The Knowledge module is the core knowledge management component in trpc-agent-go, implementing complete RAG (Retrieval-Augmented Generation) capabilities. This module not only provides basic knowledge storage and retrieval functions but also supports multiple advanced features:</p> <ol> <li>Knowledge Source Management</li> <li>Support for multiple formats of local files (Markdown, PDF, TXT, etc.)</li> <li>Support for directory batch import, automatically processing subdirectories</li> <li>Support for web scraping, directly loading content from URLs</li> <li> <p>Intelligent input type recognition, automatically selecting appropriate processors</p> </li> <li> <p>Vector Storage</p> </li> <li>In-memory storage: Suitable for development and small-scale testing</li> <li>PostgreSQL + pgvector: Suitable for production environments, supporting persistence</li> <li> <p>TcVector: Cloud-native solution, suitable for large-scale deployment</p> </li> <li> <p>Text Embedding</p> </li> <li>Default integration with OpenAI text embedding models</li> <li>Support for custom embedding model integration</li> <li> <p>Asynchronous batch processing for performance optimization</p> </li> <li> <p>Intelligent Retrieval</p> </li> <li>Semantic-based similarity search</li> <li>Support for multi-round conversation historical context</li> <li>Result reordering to improve relevance</li> </ol>"},{"location":"#core-interface-design_5","title":"Core Interface Design","text":"<pre><code>// Knowledge is the main interface for knowledge management.\ntype Knowledge interface {\n    // Search performs semantic search and returns relevant results.\nSearch(ctx context.Context, req *SearchRequest) (*SearchResult, error)\n}\n\n// SearchRequest represents a search request with context.\ntype SearchRequest struct {\n    Query     string                // Search query text.\n    History   []ConversationMessage // Conversation history for context.\n    UserID    string                // User identifier.\n    SessionID string                // Session identifier.\n}\n\n// SearchResult represents the result of knowledge search.\ntype SearchResult struct {\n    Document *document.Document // Matched document.\n    Score    float64            // Relevance score.\n    Text     string             // Document content.\n}\n</code></pre>"},{"location":"#integration-with-agent_1","title":"Integration with Agent","text":"<pre><code>// Create knowledge base.\nkb := knowledge.New(\n    knowledge.WithVectorStore(inmemory.New()),\n    knowledge.WithEmbedder(openai.New()),\n    knowledge.WithSources([]source.Source{\n        file.New([]string{\"./docs/llm.md\"}),\n        url.New([]string{\"https://wikipedia.org/wiki/LLM\"}),\n    }),\n)\n\n// Load knowledge base.\nkb.Load(ctx)\n\n// Create agent with knowledge base.\nagent := llmagent.New(\n    \"knowledge-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithKnowledge(kb), // Automatically add knowledge_search tool.\n    llmagent.WithInstruction(\"Use the knowledge_search tool to search relevant materials to answer questions\"),\n)\n</code></pre> <p>For detailed information about the Knowledge module, please refer to Knowledge</p>"},{"location":"#observability-module-observability-system","title":"Observability Module - Observability System","text":"<p>The Observability module integrates OpenTelemetry standards, automatically recording detailed telemetry data during agent execution, supporting full-link tracing and performance monitoring. The framework reuses OpenTelemetry standard interfaces without custom abstraction layers.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>import (\n    agentmetric \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\"\n    agenttrace \"trpc.group/trpc-go/trpc-agent-go/telemetry/trace\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // Start telemetry collection.\ncleanupTrace, _ := agenttrace.Start(ctx)   // Default localhost:4317.\ncleanupMetric, _ := agentmetric.Start(ctx) // Default localhost:4318.\n    defer cleanupTrace()\n    defer cleanupMetric()\n\n    // Agent execution process will automatically record telemetry data.\nagent := llmagent.New(\"assistant\", \n        llmagent.WithModel(openai.New(\"gpt-4o-mini\")))\n\n    runner := runner.NewRunner(\"app\", agent)\n    events, _ := runner.Run(ctx, \"user-001\", \"session-001\", \n        model.NewUserMessage(\"Hello\"))\n}\n</code></pre>"},{"location":"#automatically-recorded-trace-links","title":"Automatically Recorded Trace Links","text":"<p>The framework automatically creates the following Span hierarchy:</p> <pre><code>invocation                             # Conversation top-level span\n\u251c\u2500\u2500 call_llm                           # LLM API call\n\u251c\u2500\u2500 execute_tool calculator            # Tool call\n\u251c\u2500\u2500 execute_tool search                # Tool call\n\u2514\u2500\u2500 execute_tool (merged)              # Parallel tool call merge\n\n# GraphAgent execution link\ninvocation\n\u2514\u2500\u2500 execute_graph\n    \u251c\u2500\u2500 execute_node preprocess\n    \u251c\u2500\u2500 execute_node analyze\n    \u2502   \u2514\u2500\u2500 run_model\n    \u2514\u2500\u2500 execute_node format\n</code></pre>"},{"location":"#main-span-attributes","title":"Main Span Attributes","text":"<ul> <li>Common Attributes: <code>invocation_id</code>, <code>session_id</code>, <code>event_id</code></li> <li>LLM Calls: <code>gen_ai.request.model</code>, <code>llm_request/response</code> JSON</li> <li>Tool Calls: <code>gen_ai.tool.name</code>, <code>tool_call_args</code>, <code>tool_response</code> JSON</li> <li>Graph Nodes: <code>node_id</code>, <code>node_name</code>, <code>node_description</code></li> </ul>"},{"location":"#configuration-options","title":"Configuration Options","text":"<p>Custom Endpoint Configuration <pre><code>cleanupTrace, _ := agenttrace.Start(ctx,\n    agenttrace.WithEndpoint(\"otel-collector:4317\"))\n</code></pre></p> <p>Custom Metrics <pre><code>counter, _ := metric.Meter.Int64Counter(\"agent.requests.total\")\ncounter.Add(ctx, 1, metric.WithAttributes(\n    attribute.String(\"agent.name\", \"assistant\")))\n</code></pre></p> <p>For detailed information about the Observability module, please refer to Observability</p>"},{"location":"#debug-server-adk-web-debug-server","title":"Debug Server - ADK Web Debug Server","text":"<p>The Debug Server provides HTTP debugging services, compatible with ADK Web UI, supporting visual debugging and real-time monitoring of agent execution.</p>"},{"location":"#quick-start_1","title":"Quick Start","text":"<pre><code>// Step 1: Prepare agent instances.\nagents := map[string]agent.Agent{\n    \"chat-assistant\": llmagent.New(\n        \"chat-assistant\",\n        llmagent.WithModel(openai.New(\"gpt-4o-mini\")),\n        llmagent.WithInstruction(\"You are an intelligent assistant\"),\n    ),\n}\n\n// Step 2: Create Debug Server.\ndebugServer := debug.New(agents)\n\n// Step 3: Start HTTP server.\nhttp.Handle(\"/\", debugServer.Handler())\nlog.Fatal(http.ListenAndServe(\":8080\", nil))\n</code></pre>"},{"location":"#configuration-options_1","title":"Configuration Options","text":"<pre><code>// Optional configuration.\ndebugServer := debug.New(agents,\n    debug.WithSessionService(redisSessionService), // Custom session storage.\n    debug.WithRunnerOptions( // Runner additional configuration.\n        runner.WithObserver(observer),\n    ),\n)\n</code></pre> <p>For detailed information about the Debug Server, please refer to Debug</p>"},{"location":"#callbacks-module-callback-mechanism","title":"Callbacks Module - Callback Mechanism","text":"<p>The Callbacks module provides a complete set of callback mechanisms, allowing interception and processing at key nodes during agent execution, model reasoning, and tool calls. Through the callback mechanism, functions such as logging, performance monitoring, and content review can be implemented.</p>"},{"location":"#callback-types","title":"Callback Types","text":"<ol> <li> <p>ModelCallbacks (Model Callbacks) <pre><code>// Create model callbacks.\nmodelCallbacks := model.NewCallbacks().\n    RegisterBeforeModel(func(ctx context.Context, req *model.Request) (*model.Response, error) {\n        // Pre-model call processing.\n        fmt.Printf(\"\ud83d\udd35 BeforeModel: model=%s, query=%s\\n\",\n            req.Model, req.LastUserMessage())\n        return nil, nil\n    }).\n    RegisterAfterModel(func(ctx context.Context, req *model.Request,\n        resp *model.Response, err error) (*model.Response, error) {\n        // Post-model call processing.\n        fmt.Printf(\"\ud83d\udfe3 AfterModel: model=%s completed\\n\", req.Model)\n        return nil, nil\n    })\n</code></pre></p> </li> <li> <p>BeforeModel: Triggered before model reasoning, can be used for input interception and logging</p> </li> <li> <p>AfterModel: Triggered after each output block, can be used for content review and result processing</p> </li> <li> <p>ToolCallbacks (Tool Callbacks) <pre><code>// Create tool callbacks.\ntoolCallbacks := tool.NewCallbacks().\n    RegisterBeforeTool(func(ctx context.Context, name string,\n        decl *tool.Declaration, args []byte) (any, error) {\n        // Pre-tool call processing.\n        fmt.Printf(\"\ud83d\udfe0 BeforeTool: tool=%s, args=%s\\n\", name, args)\n        return nil, nil\n    }).\n    RegisterAfterTool(func(ctx context.Context, name string,\n        decl *tool.Declaration, args []byte,\n        result any, err error) (any, error) {\n        // Post-tool call processing.\n        fmt.Printf(\"\ud83d\udfe4 AfterTool: tool=%s completed\\n\", name)\n        return nil, nil\n    })\n</code></pre></p> </li> <li> <p>BeforeTool: Triggered before tool calls, can be used for parameter validation and result simulation</p> </li> <li> <p>AfterTool: Triggered after tool calls, can be used for result processing and logging</p> </li> <li> <p>AgentCallbacks (Agent Callbacks) <pre><code>// Create agent callbacks.\nagentCallbacks := agent.NewCallbacks().\n    RegisterBeforeAgent(func(ctx context.Context,\n        inv *agent.Invocation) (*model.Response, error) {\n        // Pre-agent execution processing.\n        fmt.Printf(\"\ud83d\udfe2 BeforeAgent: agent=%s starting\\n\",\n            inv.AgentName)\n        return nil, nil\n    }).\n    RegisterAfterAgent(func(ctx context.Context,\n        inv *agent.Invocation, err error) (*model.Response, error) {\n        // Post-agent execution processing.\n        fmt.Printf(\"\ud83d\udfe1 AfterAgent: agent=%s completed\\n\",\n            inv.AgentName)\n        return nil, nil\n    })\n</code></pre></p> </li> <li> <p>BeforeAgent: Triggered before agent execution, can be used for permission checks and input validation</p> </li> <li>AfterAgent: Triggered after agent execution, can be used for result processing and error handling</li> </ol>"},{"location":"#usage-scenarios","title":"Usage Scenarios","text":"<ol> <li>Monitoring and Logging: Record model calls, tool usage, and agent execution processes</li> <li>Performance Optimization: Monitor response times and resource usage</li> <li>Security and Review: Filter input content and review output content</li> <li>Custom Processing: Format results, retry errors, enhance content</li> </ol>"},{"location":"#integration-examples","title":"Integration Examples","text":"<pre><code>// Create agent with callbacks.\nagent := llmagent.New(\n    \"callback-demo\",\n    llmagent.WithModel(model),\n    llmagent.WithModelCallbacks(modelCallbacks),\n    llmagent.WithToolCallbacks(toolCallbacks),\n    llmagent.WithAgentCallbacks(agentCallbacks),\n)\n\n// Create Runner and execute.\nrunner := runner.NewRunner(\n    \"callback-app\",\n    agent,\n    runner.WithSessionService(sessionService),\n)\n\n// Execute conversation.\nevents, err := runner.Run(ctx, userID, sessionID, \n    model.NewUserMessage(\"Hello\"))\n</code></pre> <p>The Callbacks module provides flexible callback mechanisms, making agent behavior more controllable and transparent, while providing powerful support for monitoring, review, customization, and other requirements.</p> <p>For detailed information about Callbacks, please refer to Callback</p>"},{"location":"#a2a-integration-inter-agent-communication","title":"A2A Integration - Inter-Agent Communication","text":"<p>The <code>A2A (Agent-to-Agent)</code> module provides inter-agent communication capabilities, supporting quick integration of tRPC-Agent-Go agents into the A2A protocol, achieving multi-agent collaboration and external capability exposure.</p>"},{"location":"#quick-start_2","title":"Quick Start","text":"<pre><code>// Step 1: Create agent.\nagent := llmagent.New(\n    \"my-agent\",\n    llmagent.WithModel(openai.New(\"gpt-4o-mini\")),\n    llmagent.WithInstruction(\"You are an intelligent assistant\"),\n)\n\n// Step 2: Create A2A server.\na2aServer, err := a2a.New(\n    a2a.WithAgent(agent),           // Bind agent.\n    a2a.WithHost(\"localhost:8080\"), // Set listening address.\n)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Step 3: Start server.\nctx := context.Background()\nif err := a2aServer.Start(ctx); err != nil {\n    log.Fatal(err)\n}\n\nlog.Println(\"A2A server started: localhost:8080\")\n</code></pre> <p>For detailed information about A2A integration, please refer to A2A</p>"},{"location":"#future-plans","title":"Future Plans","text":"<p>tRPC-Agent-Go will continue to evolve, with plans to expand in the following directions:</p> <ul> <li>Artifacts Support: Integrate structured data display and interaction capabilities, supporting visualization of various data formats such as charts, tables, code, etc.</li> <li>Multimodal Streaming Processing: Extend streaming processing capabilities for audio, image, video, and other multimodal data, achieving richer interaction experiences</li> <li>Multi-Agent Mode Extension: Add more agent collaboration modes, such as competitive, voting, hierarchical decision-making, and other advanced collaboration strategies</li> <li>Ecosystem Integration: Deepen integration with the tRPC ecosystem, providing more component ecosystems such as Knowledge, Memory, Tools, etc.</li> </ul>"},{"location":"agent/","title":"Agent","text":""},{"location":"agent/#agent-user-guide","title":"Agent User Guide","text":"<p><code>Agent</code> is the core execution unit of the tRPC-Agent-Go framework. It handles user input and produces responses. Every <code>Agent</code> implements a unified interface and supports streaming output and callback mechanisms.</p> <p>The framework provides multiple <code>Agent</code> types, including <code>LLMAgent</code>, <code>ChainAgent</code>, <code>ParallelAgent</code>, <code>CycleAgent</code>, and <code>GraphAgent</code>. This document focuses on <code>LLMAgent</code>. For other <code>Agent</code> types and multi-agent systems, see multiagent.</p>"},{"location":"agent/#quick-start","title":"Quick Start","text":"<p>This example uses OpenAI's <code>GPT-4o-mini</code> model. Before you begin, make sure you have an <code>OPENAI_API_KEY</code> and export it via an environment variable:</p> <pre><code>export OPENAI_API_KEY=\"your_api_key\"\n</code></pre> <p>In addition, the framework supports OpenAI-compatible APIs, configurable via environment variables:</p> <pre><code>export OPENAI_BASE_URL=\"your_api_base_url\"\nexport OPENAI_API_KEY=\"your_api_key\"\n</code></pre>"},{"location":"agent/#create-a-model-instance","title":"Create a Model Instance","text":"<p>First, create a model instance using OpenAI's <code>GPT-4o-mini</code>:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n\nmodelName := flag.String(\"model\", \"gpt-4o-mini\", \"Name of the model to use\")\nflag.Parse()\n// Create an OpenAI model instance.\nmodelInstance := openai.New(*modelName, openai.Options{})\n</code></pre>"},{"location":"agent/#configure-generation-parameters","title":"Configure Generation Parameters","text":"<p>Set generation parameters including max tokens, temperature, and whether to use streaming output:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model\"\n\nmaxTokens := 1000\ntemperature := 0.7\ngenConfig := model.GenerationConfig{\n    MaxTokens:   &amp;maxTokens,   // Maximum number of tokens to generate.\n    Temperature: &amp;temperature, // Temperature controls randomness.\n    Stream:      true,         // Enable streaming output.\n}\n</code></pre>"},{"location":"agent/#create-an-llmagent","title":"Create an LLMAgent","text":"<p>Create an <code>LLMAgent</code> with the model instance and configuration. Also set the <code>Agent</code>'s Description and Instruction.</p> <p><code>Description</code> describes the <code>Agent</code>'s basic functionality and characteristics, while <code>Instruction</code> defines the specific guidelines and behavioral rules the <code>Agent</code> should follow during execution.</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n\nllmAgent := llmagent.New(\n    \"demo-agent\",                      // Agent name.\n    llmagent.WithModel(modelInstance), // Set model.\n    llmagent.WithDescription(\"A helpful AI assistant for demonstrations\"),              // Set description.\n    llmagent.WithInstruction(\"Be helpful, concise, and informative in your responses\"), // Set instruction.\n    llmagent.WithGenerationConfig(genConfig),                                           // Set generation params.\n)\n</code></pre>"},{"location":"agent/#create-an-invocation-context","title":"Create an Invocation Context","text":"<p>Create an <code>Invocation</code> object that contains everything required for the execution:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent\"\n\ninvocation := &amp;agent.Invocation{\n    AgentName:     \"demo-agent\",                                                   // Agent name.\n    InvocationID:  \"demo-invocation-001\",                                          // Invocation ID.\n    EndInvocation: false,                                                          // Whether to end invocation.\n    Model:         modelInstance,                                                  // Model used.\n    Message:       model.NewUserMessage(\"Hello! Can you tell me about yourself?\"), // User message.\n    Session:       &amp;session.Session{ID: \"session-001\"},\n}\n</code></pre>"},{"location":"agent/#run-the-agent","title":"Run the Agent","text":"<p>Call the <code>Agent.Run</code> method to start execution:</p> <pre><code>import \"context\"\n\nctx := context.Background()\neventChan, err := llmAgent.Run(ctx, invocation)\nif err != nil {\n    log.Fatalf(\"failed to run Agent: %v\", err)\n}\n</code></pre>"},{"location":"agent/#consume-the-event-stream","title":"Consume the Event Stream","text":"<p>Receive execution results via the event channel:</p> <pre><code>// Handle events.\nfor event := range eventChan {\n    // Check for errors.\n    if event.Error != nil {\n        log.Printf(\"err: %s\", event.Error.Message)\n        continue\n    }\n    // Handle content.\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        if choice.Delta.Content != \"\" {\n            // Streaming output.\n            fmt.Print(choice.Delta.Content)\n        }\n    }\n    // Check completion.\n    if event.Done {\n        break\n    }\n}\n</code></pre> <p>You can find the complete example at examples/llmagent.</p>"},{"location":"agent/#core-concepts","title":"Core Concepts","text":""},{"location":"agent/#invocation","title":"Invocation","text":"<p><code>Invocation</code> is the context object for the <code>Agent</code> execution flow. It includes all information required for a single run:</p> <pre><code>// Invocation is the context object for the Agent execution flow. It contains all information required for a single run.\ntype Invocation struct {\n    // Agent specifies the Agent instance to invoke.\n    Agent Agent\n    // AgentName identifies the Agent instance to invoke.\n    AgentName string\n    // InvocationID provides a unique identifier for each invocation.\n    InvocationID string\n    // Branch is a branch identifier used for hierarchical event filtering.\n    Branch string\n    // EndInvocation indicates whether to end the invocation.\n    EndInvocation bool\n    // Session maintains the conversational context state.\n    Session *session.Session\n    // Model specifies the model instance to use.\n    Model model.Model\n    // Message is the user content sent to the Agent.\n    Message model.Message\n    // EventCompletionCh signals when events are written to the session.\n    EventCompletionCh &lt;-chan string\n    // RunOptions contains options for the Run method.\n    RunOptions RunOptions\n    // TransferInfo supports control transfer between Agents.\n    TransferInfo *TransferInfo\n    // AgentCallbacks allows injecting custom logic at different stages of Agent execution.\n    AgentCallbacks *AgentCallbacks\n    // ModelCallbacks allows injecting custom logic at different stages of model invocation.\n    ModelCallbacks *model.ModelCallbacks\n    // ToolCallbacks allows injecting custom logic at different stages of tool execution.\n    ToolCallbacks *tool.ToolCallbacks\n}\n</code></pre>"},{"location":"agent/#event","title":"Event","text":"<p><code>Event</code> represents real-time feedback generated during <code>Agent</code> execution. It reports progress through an event stream.</p> <p>Main event types include:</p> <ul> <li>Model conversation events</li> <li>Tool call and response events</li> <li>Agent transfer events</li> <li>Error events</li> </ul> <pre><code>// Event represents real-time feedback generated during Agent execution and reports progress through an event stream.\ntype Event struct {\n    // Response contains model response content, tool call results, and statistics.\n    *model.Response\n    // InvocationID associates the event to a specific invocation.\n    InvocationID string `json:\"invocationId\"`\n    // Author identifies the source of the event, such as Agent or tool.\n    Author string `json:\"author\"`\n    // ID is the unique identifier of the event.\n    ID string `json:\"id\"`\n    // Timestamp records when the event occurred.\n    Timestamp time.Time `json:\"timestamp\"`\n    // Branch is a branch identifier used for hierarchical event filtering.\n    Branch string `json:\"branch,omitempty\"`\n    // RequiresCompletion indicates whether this event requires a completion signal.\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n    // CompletionID is used to complete this event.\n    CompletionID string `json:\"completionId,omitempty\"`\n    // LongRunningToolIDs contains IDs of long-running function calls so clients can track them.\n    // Only valid for function-call events.\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p>The streaming nature of <code>Event</code> lets you observe the <code>Agent</code>'s work in real time, making the interaction feel natural\u2014like a conversation. Simply iterate over the event stream, check the content and status of each event, and you can fully process the <code>Agent</code>'s execution results.</p>"},{"location":"agent/#agent-interface","title":"Agent Interface","text":"<p>The <code>Agent</code> interface defines the core behaviors that all <code>Agents</code> must implement. It provides a unified way to use different <code>Agent</code> types and supports tool calls and sub-Agent management.</p> <pre><code>type Agent interface {\n    // Run accepts the execution context and invocation information and returns an event channel.\n    // You can receive the Agent's progress and results in real time via this channel.\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n    // Tools returns the list of tools accessible to the Agent.\n    Tools() []tool.Tool\n    // Info returns the Agent's basic information, including name and description.\n    Info() Info\n    // SubAgents returns the list of available sub-Agents.\n    // SubAgents and FindSubAgent support cooperation between Agents,\n    // enabling an Agent to delegate tasks to others and build complex multi-agent systems.\n    SubAgents() []Agent\n    // FindSubAgent looks up a sub-Agent by name.\n    FindSubAgent(name string) Agent\n}\n</code></pre>"},{"location":"agent/#callbacks","title":"Callbacks","text":"<p>Callbacks provide hooks at key stages of <code>Agent</code> execution so you can inject custom logic.</p>"},{"location":"agent/#callback-types","title":"Callback Types","text":"<p>The framework provides three kinds of callbacks:</p> <p>Agent Callbacks: Triggered before and after Agent execution</p> <pre><code>type AgentCallbacks struct {\n    BeforeAgent []BeforeAgentCallback  // Callback before Agent runs.\n    AfterAgent  []AfterAgentCallback   // Callback after Agent finishes.\n}\n</code></pre> <p>Model Callbacks: Triggered before and after model invocation</p> <pre><code>type ModelCallbacks struct {\n    BeforeModel []BeforeModelCallback  // Callback before model call.\n    AfterModel  []AfterModelCallback   // Callback after model call.\n}\n</code></pre> <p>Tool Callbacks: Triggered before and after tool invocation</p> <pre><code>type ToolCallbacks struct {\n    BeforeTool []BeforeToolCallback  // Callback before tool call.\n    AfterTool  []AfterToolCallback   // Callback after tool call.\n}\n</code></pre>"},{"location":"agent/#usage-example","title":"Usage Example","text":"<pre><code>// Create Agent callbacks.\ncallbacks := &amp;agent.AgentCallbacks{\n    BeforeAgent: []agent.BeforeAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation) (*model.Response, error) {\n            log.Printf(\"Agent %s is about to run\", invocation.AgentName)\n            return nil, nil\n        },\n    },\n    AfterAgent: []agent.AfterAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation, runErr error) (*model.Response, error) {\n            if runErr != nil {\n                log.Printf(\"Agent %s failed: %v\", invocation.AgentName, runErr)\n            } else {\n                log.Printf(\"Agent %s finished successfully\", invocation.AgentName)\n            }\n            return nil, nil\n        },\n    },\n}\n\n// Use callbacks in Invocation.\ninvocation := &amp;agent.Invocation{\n    AgentName:      \"demo-agent\",\n    InvocationID:   \"demo-001\",\n    AgentCallbacks: callbacks,\n    Model:          modelInstance,\n    Message:        model.NewUserMessage(\"User input\"),\n    Session: &amp;session.Session{\n        ID: \"session-001\",\n    },\n}\n</code></pre> <p>Callbacks let you precisely control the <code>Agent</code>'s lifecycle and implement more sophisticated business logic.</p>"},{"location":"agent/#advanced-usage","title":"Advanced Usage","text":"<p>The framework also provides advanced capabilities such as <code>Runner</code>, <code>Session</code>, and <code>Memory</code> for constructing more complex <code>Agent</code> systems.</p> <ul> <li><code>Runner</code> is the <code>Agent</code> executor that orchestrates the <code>Agent</code> execution flow and connects to <code>Session</code> or <code>Memory</code> services.</li> <li><code>Session</code> Service manages conversational state, including history and context.</li> <li><code>Memory</code> Service stores user preference information to enable personalization.</li> </ul> <p>For details, see runner, session, and memory.</p>"},{"location":"event/","title":"Event Usage Documentation","text":"<p><code>Event</code> is the core communication mechanism between <code>Agent</code> and users in tRPC-Agent-Go. It acts like a message envelope, carrying <code>Agent</code> response content, tool call results, error information, and more. Through <code>Event</code>, you can understand <code>Agent</code>'s working status in real-time, handle streaming responses, implement multi-agent collaboration, and track tool execution.</p>"},{"location":"event/#event-overview","title":"Event Overview","text":"<p><code>Event</code> is the carrier for communication between <code>Agent</code> and users.</p> <p>Users obtain event streams through the <code>runner.Run()</code> method, then listen to event channels to process <code>Agent</code> responses.</p>"},{"location":"event/#event-structure","title":"Event Structure","text":"<p><code>Event</code> represents an event between <code>Agent</code> and users, with the following structure definition:</p> <pre><code>type Event struct {\n    // Response is the base response structure of Event, carrying LLM responses.\n    *model.Response\n\n    // InvocationID is the unique identifier for this call.\n    InvocationID string `json:\"invocationId\"`\n\n    // Author is the event initiator.\n    Author string `json:\"author\"`\n\n    // ID is the unique identifier for the event.\n    ID string `json:\"id\"`\n\n    // Timestamp is the event timestamp.\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // Branch is the branch identifier for multi-agent collaboration.\n    Branch string `json:\"branch,omitempty\"`\n\n    // RequiresCompletion indicates whether this event requires a completion signal.\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n\n    // CompletionID is used for the completion signal of this event.\n    CompletionID string `json:\"completionId,omitempty\"`\n\n    // LongRunningToolIDs is a collection of IDs for long-running function calls.\n    // Agent clients will understand which function calls are long-running from this field.\n    // Only valid for function call events.\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p><code>model.Response</code> is the base response structure of <code>Event</code>, carrying LLM responses, tool calls, errors, and other information. It is defined as follows:</p> <pre><code>type Response struct {\n    // Response unique identifier.\n    ID string `json:\"id\"`\n\n    // Object type (such as \"chat.completion\", \"error\", etc.), helping clients identify processing methods.\n    Object string `json:\"object\"`\n\n    // Creation timestamp.\n    Created int64 `json:\"created\"`\n\n    // Model name used.\n    Model string `json:\"model\"`\n\n    // Response choices, LLM may generate multiple candidate responses for user selection, default is only 1.\n    Choices []Choice `json:\"choices\"`\n\n    // Usage statistics, recording token usage.\n    Usage *Usage `json:\"usage,omitempty\"`\n\n    // System fingerprint.\n    SystemFingerprint *string `json:\"system_fingerprint,omitempty\"`\n\n    // Error information.\n    Error *ResponseError `json:\"error,omitempty\"`\n\n    // Timestamp.\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // Indicates whether the entire conversation is complete.\n    Done bool `json:\"done\"`\n\n    // Whether it's a partial response.\n    IsPartial bool `json:\"is_partial\"`\n}\n\ntype Choice struct {\n    // Choice index.\n    Index int `json:\"index\"`\n\n    // Complete message, containing the entire response.\n    Message Message `json:\"message,omitempty\"`\n\n    // Incremental message, used for streaming responses, only containing new content of the current chunk.\n    // For example: complete response \"Hello, how can I help you?\" in streaming response:\n    // First event: Delta.Content = \"Hello\"\n    // Second event: Delta.Content = \", how\"  \n    // Third event: Delta.Content = \" can I help you?\"\n    Delta Message `json:\"delta,omitempty\"`\n\n    // Completion reason.\n    FinishReason *string `json:\"finish_reason,omitempty\"`\n}\n\ntype Message struct {\n    // Role of the message initiator, such as \"system\", \"user\", \"assistant\", \"tool\".\n    Role string `json:\"role\"`\n\n    // Message content.\n    Content string `json:\"content\"`\n\n    // Content parts for multimodal messages.\n    ContentParts []ContentPart `json:\"content_parts,omitempty\"`\n\n    // ID of the tool used by the tool response.\n    ToolID string `json:\"tool_id,omitempty\"`\n\n    // Name of the tool used by the tool response.\n    ToolName string `json:\"tool_name,omitempty\"`\n\n    // Optional tool calls.\n    ToolCalls []ToolCall `json:\"tool_calls,omitempty\"`\n}\n\ntype Usage struct {\n    // Number of tokens used in prompts.\n    PromptTokens int `json:\"prompt_tokens\"`\n\n    // Number of tokens used in completion.\n    CompletionTokens int `json:\"completion_tokens\"`\n\n    // Total number of tokens used in the response.\n    TotalTokens int `json:\"total_tokens\"`\n}\n</code></pre>"},{"location":"event/#event-types","title":"Event Types","text":"<p><code>Event</code> is created and sent in the following scenarios:</p> <ol> <li>User message events: Automatically created when users send messages</li> <li><code>Agent</code> response events: Created when <code>Agent</code> generates responses</li> <li>Streaming response events: Created for each response chunk in streaming mode</li> <li>Tool call events: Created when <code>Agent</code> calls tools</li> <li>Error events: Created when errors occur</li> <li><code>Agent</code> transfer events: Created when <code>Agent</code> transfers to other agents</li> <li>Completion events: Created when Agent execution completes</li> </ol> <p>Based on the <code>model.Response.Object</code> field, <code>Event</code> can be divided into the following types:</p> <pre><code>const (\n    // Error events.\n    ObjectTypeError = \"error\"\n\n    // Tool response events.\n    ObjectTypeToolResponse = \"tool.response\"\n\n    // Preprocessing events.\n    ObjectTypePreprocessingBasic = \"preprocessing.basic\"\n    ObjectTypePreprocessingContent = \"preprocessing.content\"\n    ObjectTypePreprocessingIdentity = \"preprocessing.identity\"\n    ObjectTypePreprocessingInstruction = \"preprocessing.instruction\"\n    ObjectTypePreprocessingPlanning = \"preprocessing.planning\"\n\n    // Postprocessing events.\n    ObjectTypePostprocessingPlanning = \"postprocessing.planning\"\n    ObjectTypePostprocessingCodeExecution = \"postprocessing.code_execution\"\n\n    // Agent transfer events.\n    ObjectTypeTransfer = \"agent.transfer\"\n\n    // Runner completion events.\n    ObjectTypeRunnerCompletion = \"runner.completion\"\n)\n</code></pre>"},{"location":"event/#event-creation","title":"Event Creation","text":"<p>When developing custom <code>Agent</code> types or <code>Processor</code>, you need to create <code>Event</code>.</p> <p><code>Event</code> provides three creation methods, suitable for different scenarios.</p> <pre><code>// Create new event.\nfunc New(invocationID, author string, opts ...Option) *Event\n\n// Create error event.\nfunc NewErrorEvent(invocationID, author, errorType, errorMessage string) *Event\n\n// Create event from response.\nfunc NewResponseEvent(invocationID, author string, response *model.Response) *Event\n</code></pre> <p>Parameter description:</p> <ul> <li><code>invocationID string</code>: Call unique identifier</li> <li><code>author string</code>: Event initiator</li> <li><code>opts ...Option</code>: Optional configuration options (only for <code>New</code> method)</li> <li><code>errorType string</code>: Error type (only for <code>NewErrorEvent</code> method)</li> <li><code>errorMessage string</code>: Error message (only for <code>NewErrorEvent</code> method)</li> <li><code>response *model.Response</code>: Response object (only for <code>NewResponseEvent</code> method)</li> </ul> <p>The framework supports the following <code>Option</code> for configuring <code>Event</code>:</p> <ul> <li><code>WithBranch(branch string)</code>: Set the branch identifier for the event</li> <li><code>WithResponse(response *model.Response)</code>: Set the response content for the event</li> <li><code>WithObject(o string)</code>: Set the type for the event</li> </ul> <p>Examples: <pre><code>// Create basic event.\nevt := event.New(\"invoke-123\", \"agent\")\n\n// Create event with branch.\nevt := event.New(\"invoke-123\", \"agent\", event.WithBranch(\"main\"))\n\n// Create error event.\nevt := event.NewErrorEvent(\"invoke-123\", \"agent\", \"api_error\", \"Request timeout\")\n\n// Create event from response.\nresponse := &amp;model.Response{\n    Object: \"chat.completion\",\n    Done:   true,\n    Choices: []model.Choice{{Message: model.Message{Role: \"assistant\", Content: \"Hello!\"}}},\n}\nevt := event.NewResponseEvent(\"invoke-123\", \"agent\", response)\n</code></pre></p>"},{"location":"event/#event-methods","title":"Event Methods","text":"<p><code>Event</code> provides the <code>Clone</code> method for creating deep copies of <code>Event</code>.</p> <pre><code>func (e *Event) Clone() *Event\n</code></pre>"},{"location":"event/#event-usage-examples","title":"Event Usage Examples","text":"<p>This example demonstrates how to use <code>Event</code> in practical applications to handle <code>Agent</code> streaming responses, tool calls, and error handling.</p>"},{"location":"event/#core-process","title":"Core Process","text":"<ol> <li>Send user message: Start <code>Agent</code> processing through <code>runner.Run()</code></li> <li>Receive event stream: Process events returned by <code>Agent</code> in real-time</li> <li>Handle different event types: Distinguish streaming content, tool calls, errors, etc.</li> <li>Visualize output: Provide user-friendly interactive experience</li> </ol>"},{"location":"event/#code-examples","title":"Code Examples","text":"<pre><code>// processMessage handles single message interaction.\nfunc (c *multiTurnChat) processMessage(ctx context.Context, userMessage string) error {\n    message := model.NewUserMessage(userMessage)\n\n    // Run agent through runner.\neventChan, err := c.runner.Run(ctx, c.userID, c.sessionID, message)\nif err != nil {\n    return fmt.Errorf(\"failed to run agent: %w\", err)\n}\n\n// Process response.\nreturn c.processResponse(eventChan)\n}\n\n// processResponse handles response, including streaming response and tool call visualization.\nfunc (c *multiTurnChat) processResponse(eventChan &lt;-chan *event.Event) error {\n    fmt.Print(\"\ud83e\udd16 Assistant: \")\n\n    var (\n        fullContent       string        // Accumulated complete content.\n        toolCallsDetected bool          // Whether tool calls are detected.\n        assistantStarted  bool          // Whether Assistant has started replying.\n    )\n\n    for event := range eventChan {\n        // Handle single event.\nif err := c.handleEvent(event, &amp;toolCallsDetected, &amp;assistantStarted, &amp;fullContent); err != nil {\n    return err\n}\n\n// Check if it's the final event.\nif event.Done &amp;&amp; !c.isToolEvent(event) {\n    fmt.Printf(\"\\n\")\n    break\n}\n    }\n\n    return nil\n}\n\n// handleEvent handles single event.\nfunc (c *multiTurnChat) handleEvent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) error {\n    // 1. Handle error events.\nif event.Error != nil {\n    fmt.Printf(\"\\n\u274c Error: %s\\n\", event.Error.Message)\n    return nil\n}\n\n// 2. Handle tool calls.\nif c.handleToolCalls(event, toolCallsDetected, assistantStarted) {\n    return nil\n}\n\n// 3. Handle tool responses.\nif c.handleToolResponses(event) {\n    return nil\n}\n\n// 4. Handle content.\nc.handleContent(event, toolCallsDetected, assistantStarted, fullContent)\n\n    return nil\n}\n\n// handleToolCalls detects and displays tool calls.\nfunc (c *multiTurnChat) handleToolCalls(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n) bool {\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        *toolCallsDetected = true\n        if *assistantStarted {\n            fmt.Printf(\"\\n\")\n        }\n        fmt.Printf(\"\ud83d\udd27 Tool calls initiated:\\n\")\n        for _, toolCall := range event.Choices[0].Message.ToolCalls {\n            fmt.Printf(\"   \u2022 %s (ID: %s)\\n\", toolCall.Function.Name, toolCall.ID)\n            if len(toolCall.Function.Arguments) &gt; 0 {\n                fmt.Printf(\"     Args: %s\\n\", string(toolCall.Function.Arguments))\n            }\n        }\n        fmt.Printf(\"\\n\ud83d\udd04 Executing tools...\\n\")\n        return true\n    }\n    return false\n}\n\n// handleToolResponses detects and displays tool responses.\nfunc (c *multiTurnChat) handleToolResponses(event *event.Event) bool {\n    if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n        for _, choice := range event.Response.Choices {\n            if choice.Message.Role == model.RoleTool &amp;&amp; choice.Message.ToolID != \"\" {\n                fmt.Printf(\"\u2705 Tool response (ID: %s): %s\\n\",\n                    choice.Message.ToolID,\n                    strings.TrimSpace(choice.Message.Content))\n                return true\n            }\n        }\n    }\n    return false\n}\n\n// handleContent processes and displays content.\nfunc (c *multiTurnChat) handleContent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        content := c.extractContent(choice)\n\n        if content != \"\" {\n            c.displayContent(content, toolCallsDetected, assistantStarted, fullContent)\n        }\n    }\n}\n\n// extractContent extracts content based on streaming mode.\nfunc (c *multiTurnChat) extractContent(choice model.Choice) string {\n    if c.streaming {\n        // Streaming mode: use incremental content.\nreturn choice.Delta.Content\n}\n// Non-streaming mode: use complete message content.\nreturn choice.Message.Content\n}\n\n// displayContent prints content to console.\nfunc (c *multiTurnChat) displayContent(\n    content string,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if !*assistantStarted {\n        if *toolCallsDetected {\n            fmt.Printf(\"\\n\ud83e\udd16 Assistant: \")\n        }\n        *assistantStarted = true\n    }\n    fmt.Print(content)\n    *fullContent += content\n}\n\n// isToolEvent checks if the event is a tool response.\nfunc (c *multiTurnChat) isToolEvent(event *event.Event) bool {\n    if event.Response == nil {\n        return false\n    }\n\n    // Check if there are tool calls.\nif len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n    return true\n}\n\n// Check if there's a tool ID.\nif len(event.Choices) &gt; 0 &amp;&amp; event.Choices[0].Message.ToolID != \"\" {\n    return true\n}\n\n// Check if it's a tool role.\nfor _, choice := range event.Response.Choices {\n    if choice.Message.Role == model.RoleTool {\n        return true\n    }\n}\n\n    return false\n}\n</code></pre>"},{"location":"planner/","title":"Planner","text":""},{"location":"planner/#planner-user-guide","title":"Planner User Guide","text":"<p><code>Planner</code> is the component that enables planning capabilities for an <code>Agent</code>. It allows an <code>Agent</code> to formulate a plan before executing tasks, improving both efficiency and accuracy.</p> <p>The framework provides two <code>Planner</code> implementations for different model types:</p> <ul> <li><code>BuiltinPlanner</code>: for models that natively support internal reasoning/thinking</li> <li><code>ReActPlanner</code>: for models without native thinking, guiding them to output in a tagged, structured format</li> </ul>"},{"location":"planner/#planner-interface","title":"Planner Interface","text":"<p>The <code>Planner</code> interface defines the methods that all planners must implement:</p> <pre><code>type Planner interface {\n    // BuildPlanningInstruction applies necessary configuration to the LLM request\n    // and returns the system instruction to attach for planning.\n    // Return an empty string if no instruction is needed.\n    BuildPlanningInstruction(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        llmRequest *model.Request,\n    ) string\n\n    // ProcessPlanningResponse processes the LLM planning response and returns the processed response.\n    // Return nil if no processing is needed.\n    ProcessPlanningResponse(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        response *model.Response,\n    ) *model.Response\n}\n</code></pre> <p>Planner workflow:</p> <ol> <li>Request phase: before sending the LLM request, <code>BuildPlanningInstruction</code> adds planning instructions or applies configuration</li> <li>Response phase: <code>ProcessPlanningResponse</code> organizes the LLM response content and structure</li> </ol>"},{"location":"planner/#builtinplanner","title":"BuiltinPlanner","text":"<p><code>BuiltinPlanner</code> targets models that support native thinking. It does not generate explicit planning instructions. Instead, it configures the model to leverage its internal reasoning mechanism to achieve planning.</p> <p>Model configuration:</p> <pre><code>type Options struct {\n    // ReasoningEffort constrains the reasoning intensity of reasoning-enabled models.\n    // Supported values: \"low\", \"medium\", \"high\".\n    // Only effective for OpenAI o-series models.\n    ReasoningEffort *string\n    // ThinkingEnabled enables thinking mode for models that support it.\n    // Only effective for Claude and Gemini models via OpenAI-compatible API.\n    ThinkingEnabled *bool\n    // ThinkingTokens controls the length of the thinking process.\n    // Only effective for Claude and Gemini models via OpenAI-compatible API.\n    ThinkingTokens *int\n}\n</code></pre> <p>Implementation details:</p> <ul> <li><code>BuildPlanningInstruction</code>: applies thinking parameters to the LLM request. Since the model supports native reasoning, no planning tags are needed, so return an empty string</li> <li><code>ProcessPlanningResponse</code>: returns nil because the model's response already includes its planning process</li> </ul> <p>Example:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/builtin\"\n)\n\n// Create model instance.\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// Create BuiltinPlanner.\nreasoningEffort := \"high\"\nplanner := builtin.New(builtin.Options{\n    ReasoningEffort: &amp;reasoningEffort,\n})\n\n// Create LLMAgent and configure the Planner.\nllmAgent := llmagent.New(\n    \"demo-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"A helpful AI assistant with built-in planning\"),\n    llmagent.WithInstruction(\"Be helpful and think through problems carefully\"),\n    llmagent.WithPlanner(planner), // Configure Planner.\n)\n</code></pre>"},{"location":"planner/#reactplanner","title":"ReActPlanner","text":"<p><code>ReActPlanner</code> targets models that do not support native thinking. It guides the LLM to follow a specific, tagged format to structure planning, reasoning, actions, and the final answer, thereby achieving a structured thinking process.</p> <p>ReActPlanner uses the following tags to organize response content:</p> <ol> <li>Planning phase (<code>/*PLANNING*/</code>): create a clear plan to answer the user's question</li> <li>Reasoning phase (<code>/*REASONING*/</code>): provide reasoning between tool executions</li> <li>Action phase (<code>/*ACTION*/</code>): execute tools based on the plan</li> <li>Re-planning (<code>/*REPLANNING*/</code>): revise the plan based on results when needed</li> <li>Final answer (<code>/*FINAL_ANSWER*/</code>): provide the synthesized answer</li> </ol> <p>Implementation details:</p> <ul> <li><code>BuildPlanningInstruction</code>: returns comprehensive instructions containing high-level guidance, planning requirements, and reasoning requirements, prompting the model to output in the tagged format</li> <li><code>ProcessPlanningResponse</code>: filters out tool calls with empty names; if the content contains the <code>/*FINAL_ANSWER*/</code> tag, keep only the final answer section; otherwise, return the original content, separating planning content from the final answer</li> </ul> <p>Usage example:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/react\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// Create model instance.\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// Create tool.\nsearchTool := function.NewFunctionTool(\n    searchFunction,\n    function.WithName(\"search\"),\n    function.WithDescription(\"Search for information on a given topic\"),\n)\n\n// Create ReActPlanner.\nplanner := react.New()\n\n// Create LLMAgent and configure the Planner.\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(planner), // Configure Planner.\n    llmagent.WithTools([]tool.Tool{searchTool}), // Configure tools.\n)\n</code></pre> <p>See the full example at examples/react.</p>"},{"location":"planner/#custom-planner","title":"Custom Planner","text":"<p>Besides the two built-in <code>Planner</code> implementations, you can implement the <code>Planner</code> interface to create a custom <code>Planner</code> for specific needs:</p> <pre><code>type customPlanner struct {\n    // Custom configuration.\n}\n\nfunc (p *customPlanner) BuildPlanningInstruction(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    llmRequest *model.Request,\n) string {\n    // Return your custom planning instruction.\n    return \"your custom planning instruction\"\n}\n\nfunc (p *customPlanner) ProcessPlanningResponse(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    response *model.Response,\n) *model.Response {\n    // Process the response.\n    return response\n}\n\n// Create LLMAgent and configure the custom Planner.\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(&amp;customPlanner{}),      // Configure Planner.\n    llmagent.WithTools([]tool.Tool{searchTool}), // Configure tools.\n)\n</code></pre>"},{"location":"zh/","title":"tRPC-Agent-Go \u6846\u67b6\u4ecb\u7ecd","text":""},{"location":"zh/#_1","title":"\u5bfc\u8bed","text":"<p>tRPC-Go \u56e2\u961f\u5728\u4e4b\u524d\u63a8\u51fa\u4e86 mcp \u5f00\u53d1\u6846\u67b6\uff0c\u4ee5\u53ca A2A \u5f00\u53d1\u6846\u67b6\uff0c\u5728\u516c\u53f8\u5185\u5916\u90e8\u5f97\u5230\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u73b0\u5728\u63a8\u51fa tRPC-Agent-Go \u6846\u67b6\uff0c\u8fdb\u4e00\u6b65\u5b9e\u73b0 tRPC \u5728 AI \u5f00\u53d1\u6846\u67b6\u751f\u6001\u7684\u95ed\u73af\u3002</p>"},{"location":"zh/#_2","title":"\u80cc\u666f\u548c\u6280\u672f\u9009\u578b","text":""},{"location":"zh/#_3","title":"\u5f00\u53d1\u80cc\u666f","text":"<p>\u968f\u7740 LLM \u80fd\u529b\u5feb\u901f\u63d0\u5347\uff0c<code>Agent</code> \u5f00\u53d1\u6846\u67b6\u6210\u4e3a\u8fde\u63a5 AI \u80fd\u529b\u4e0e\u4e1a\u52a1\u5e94\u7528\u7684\u91cd\u8981\u57fa\u7840\u8bbe\u65bd\u3002\u5f53\u524d\u6846\u67b6\u5728\u6280\u672f\u8def\u7ebf\u4e0a\u5b58\u5728\u5206\u5316\uff0cGo \u8bed\u8a00\u751f\u6001\u6709\u8f83\u5927\u53d1\u5c55\u7a7a\u95f4\u3002</p>"},{"location":"zh/#_4","title":"\u4e1a\u754c\u6846\u67b6\u6280\u672f\u8def\u7ebf\u5206\u6790","text":"<p>\u76ee\u524d AI <code>Agent</code> \u5e94\u7528\u5f00\u53d1\u6846\u67b6\u4e3b\u8981\u5206\u4e3a\u4e24\u5927\u6280\u672f\u8def\u7ebf\uff1a\u81ea\u4e3b\u591a <code>Agent</code> \u6846\u67b6\u548c\u7f16\u6392\u5f0f\u6846\u67b6\u3002</p> <p>\u81ea\u4e3b\u591a <code>Agent</code> \u6846\u67b6</p> <p>\u81ea\u4e3b\u591a <code>Agent</code> \u6846\u67b6\u4f53\u73b0\u4e86\u771f\u6b63\u7684 <code>Agent</code>\uff08Autonomous Agent\uff09\u7406\u5ff5\uff0c\u6bcf\u4e2a <code>Agent</code> \u90fd\u5177\u5907\u73af\u5883\u611f\u77e5\u3001\u81ea\u4e3b\u51b3\u7b56\u548c\u52a8\u4f5c\u6267\u884c\u80fd\u529b\u3002\u591a\u4e2a <code>Agent</code> \u901a\u8fc7\u6d88\u606f\u4f20\u9012\u548c\u534f\u5546\u673a\u5236\u5b9e\u73b0\u5206\u5e03\u5f0f\u534f\u4f5c\uff0c\u80fd\u591f\u6839\u636e\u73af\u5883\u53d8\u5316\u52a8\u6001\u8c03\u6574\u7b56\u7565\uff0c\u5c55\u73b0\u51fa\u667a\u80fd\u6d8c\u73b0\u7279\u6027\u3002</p> <ul> <li>AutoGen\uff08Microsoft\uff09: \u591a <code>Agent</code> \u534f\u4f5c\u7cfb\u7edf\uff0c\u652f\u6301 <code>Agent</code> \u89d2\u8272\u4e13\u4e1a\u5316\u548c\u52a8\u6001\u534f\u5546</li> <li>ADK\uff08Google Agent Development Kit\uff09: \u63d0\u4f9b\u5b8c\u6574\u7684 <code>Agent</code> \u751f\u547d\u5468\u671f\u7ba1\u7406\u548c\u591a <code>Agent</code> \u7f16\u6392\u80fd\u529b</li> <li>CrewAI: \u9762\u5411\u4efb\u52a1\u7684\u591a <code>Agent</code> \u534f\u4f5c\u5e73\u53f0\uff0c\u5f3a\u8c03\u89d2\u8272\u5b9a\u4e49\u548c\u8d23\u4efb\u94fe\u6a21\u5f0f</li> <li>Agno: \u8f7b\u91cf\u7ea7\u9ad8\u6027\u80fd <code>Agent</code> \u6846\u67b6\uff0c\u4e13\u6ce8\u4e8e\u591a\u6a21\u6001\u80fd\u529b\u548c\u56e2\u961f\u534f\u4f5c</li> </ul> <p>\u7f16\u6392\u5f0f\u6846\u67b6</p> <p>\u7f16\u6392\u5f0f\u6846\u67b6\u91c7\u7528\u5de5\u4f5c\u6d41\u601d\u7ef4\uff0c\u901a\u8fc7\u9884\u5b9a\u4e49\u7684\u6d41\u7a0b\u56fe\u6216\u72b6\u6001\u673a\u6765\u7ec4\u7ec7 LLM \u8c03\u7528\u548c\u7ec4\u4ef6\u4ea4\u4e92\u3002\u867d\u7136\u6574\u4e2a\u7cfb\u7edf\u8868\u73b0\u51fa\"\u667a\u80fd\"\u7279\u5f81\uff0c\u4f46\u5176\u6267\u884c\u8def\u5f84\u662f\u786e\u5b9a\u6027\u7684\uff0c\u66f4\u50cf\u662f\"\u667a\u80fd\u5316\u7684\u5de5\u4f5c\u6d41\"\u800c\u975e\u771f\u6b63\u7684\u81ea\u4e3b <code>Agent</code>\u3002</p> <ul> <li>LangChain: \u57fa\u4e8e Chain \u62bd\u8c61\u7684\u7ec4\u4ef6\u7f16\u6392\u6846\u67b6\uff0c\u901a\u8fc7\u9884\u5b9a\u4e49\u6267\u884c\u94fe\u8def\u6784\u5efa LLM \u5e94\u7528</li> <li>LangGraph: \u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\u72b6\u6001\u673a\u6846\u67b6\uff0c\u63d0\u4f9b\u786e\u5b9a\u6027\u72b6\u6001\u8f6c\u6362\u548c\u6761\u4ef6\u5206\u652f</li> <li>Eino\uff08\u5b57\u8282\u8df3\u52a8\uff09: LLM \u5e94\u7528\u7f16\u6392\u6846\u67b6\uff0c\u57fa\u4e8e Pipeline \u548c Graph \u6a21\u5f0f\u8fdb\u884c\u6d41\u7a0b\u7ba1\u7406</li> </ul>"},{"location":"zh/#_5","title":"\u4e24\u79cd\u6846\u67b6\u7c7b\u578b\u6280\u672f\u5bf9\u6bd4","text":"\u5bf9\u6bd4\u7ef4\u5ea6 \u81ea\u4e3b\u591a <code>Agent</code> \u6846\u67b6 \u7f16\u6392\u5f0f\u6846\u67b6 \u63a7\u5236\u6a21\u5f0f \u5206\u5e03\u5f0f\u81ea\u6cbb\u51b3\u7b56\uff0c<code>Agent</code> \u95f4\u534f\u5546 \u96c6\u4e2d\u5f0f\u6d41\u7a0b\u7f16\u6392\uff0c\u786e\u5b9a\u6027\u6267\u884c \u9002\u7528\u573a\u666f \u5f00\u653e\u57df\u95ee\u9898\u6c42\u89e3\u3001\u521b\u9020\u6027\u4efb\u52a1\u3001\u591a\u4e13\u4e1a\u534f\u4f5c \u7ed3\u6784\u5316\u4e1a\u52a1\u6d41\u7a0b\u3001\u6570\u636e\u5904\u7406\u7ba1\u9053\u3001\u6807\u51c6\u5316\u4f5c\u4e1a \u6269\u5c55\u65b9\u5f0f \u6c34\u5e73\u6269\u5c55 <code>Agent</code> \u89d2\u8272\uff0c\u5782\u76f4\u589e\u5f3a <code>Agent</code> \u80fd\u529b \u8282\u70b9\u6269\u5c55\u548c\u6d41\u7a0b\u56fe\u590d\u6742\u5316 \u6267\u884c\u53ef\u9884\u6d4b\u6027 \u6d8c\u73b0\u884c\u4e3a\uff0c\u7ed3\u679c\u591a\u6837\u6027\u9ad8 \u786e\u5b9a\u6027\u6267\u884c\uff0c\u7ed3\u679c\u53ef\u590d\u73b0 \u7cfb\u7edf\u590d\u6742\u5ea6 <code>Agent</code> \u4ea4\u4e92\u590d\u6742\uff0c\u8c03\u8bd5\u56f0\u96be \u6d41\u7a0b\u6e05\u6670\uff0c\u6613\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7 \u6280\u672f\u5b9e\u73b0 \u57fa\u4e8e\u6d88\u606f\u4f20\u9012\u548c\u5bf9\u8bdd\u534f\u8bae \u57fa\u4e8e\u72b6\u6001\u673a\u548c\u6709\u5411\u56fe\u6267\u884c"},{"location":"zh/#agent","title":"\u81ea\u4e3b\u591a Agent \u6846\u67b6\u7684\u6280\u672f\u7279\u5f81","text":"<p>\u73b0\u4ee3 LLM \u5728\u590d\u6742\u63a8\u7406\u3001\u52a8\u6001\u51b3\u7b56\u65b9\u9762\u80fd\u529b\u663e\u8457\u63d0\u5347\uff0c\u81ea\u4e3b\u591a <code>Agent</code> \u6846\u67b6\u76f8\u6bd4\u7f16\u6392\u5f0f\u6846\u67b6\u5177\u6709\u4ee5\u4e0b\u7279\u5f81\uff1a</p> <ul> <li>\u81ea\u9002\u5e94\u6027\uff1a<code>Agent</code> \u57fa\u4e8e\u4e0a\u4e0b\u6587\u52a8\u6001\u8c03\u6574\u51b3\u7b56\u7b56\u7565\u548c\u6267\u884c\u8def\u5f84</li> <li>\u534f\u4f5c\u6d8c\u73b0\uff1a\u591a <code>Agent</code> \u901a\u8fc7\u6d88\u606f\u4f20\u9012\u5b9e\u73b0\u53bb\u4e2d\u5fc3\u5316\u534f\u5546\u548c\u4efb\u52a1\u5206\u89e3  </li> <li>\u8ba4\u77e5\u96c6\u6210\uff1a\u6df1\u5ea6\u6574\u5408 LLM \u7684\u63a8\u7406\u3001\u89c4\u5212\u3001\u53cd\u601d\u80fd\u529b\u5f62\u6210\u667a\u80fd\u51b3\u7b56\u94fe\u8def</li> </ul>"},{"location":"zh/#trpc-agent-go_1","title":"tRPC-Agent-Go \u6280\u672f\u5b9a\u4f4d","text":"<p>\u884c\u4e1a\u4e0e\u751f\u6001\u73b0\u72b6\uff1a\u968f\u7740 LLM \u80fd\u529b\u7684\u6301\u7eed\u7a81\u7834\uff0c<code>Agent</code> \u5f00\u53d1\u6846\u67b6\u6b63\u6210\u4e3a AI \u5e94\u7528\u5f00\u53d1\u7684\u91cd\u8981\u8d8b\u52bf\u3002\u5f53\u524d\u4e3b\u6d41\u7684\u81ea\u4e3b\u591a <code>Agent</code> \u6846\u67b6\uff08\u5982 AutoGen\u3001CrewAI\u3001ADK\u3001Agno \u7b49\uff09\u4e3b\u8981\u57fa\u4e8e Python \u751f\u6001\u6784\u5efa\uff0c\u4e3a Python \u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u9009\u62e9\u3002\u7136\u800c\uff0cGo \u8bed\u8a00\u51ed\u501f\u5176\u5353\u8d8a\u7684\u5e76\u53d1\u6027\u80fd\u3001\u5185\u5b58\u5b89\u5168\u548c\u90e8\u7f72\u4fbf\u5229\u6027\uff0c\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u5360\u636e\u91cd\u8981\u5730\u4f4d\u3002\u76ee\u524d\u8f83\u4e3a\u6210\u719f\u7684 Go \u8bed\u8a00 AI \u5f00\u53d1\u6846\u67b6 Eino\uff08CloudWeGo\uff09\u4e13\u6ce8\u4e8e\u7f16\u6392\u5f0f\u67b6\u6784\uff0c\u4e3b\u8981\u9002\u7528\u4e8e\u7ed3\u6784\u5316\u4e1a\u52a1\u6d41\u7a0b\uff0c\u800c\u81ea\u4e3b\u591a <code>Agent</code> \u6846\u67b6\u5728 Go \u751f\u6001\u4e2d\u76f8\u5bf9\u8f83\u5c11\uff0c\u5b58\u5728\u53d1\u5c55\u673a\u4f1a\u3002</p> <p>\u57fa\u4e8e\u6b64\u73b0\u72b6\uff0ctRPC-Agent-Go \u5b9a\u4f4d\u4e8e\u4e3a Go \u751f\u6001\u63d0\u4f9b\u81ea\u4e3b\u591a <code>Agent</code> \u6846\u67b6\u5f00\u53d1\u80fd\u529b\uff1a</p> <ul> <li>\u67b6\u6784\u7279\u6027: \u91c7\u7528\u81ea\u4e3b\u591a <code>Agent</code> \u67b6\u6784\u6a21\u5f0f\uff0c\u5145\u5206\u53d1\u6325 Go \u8bed\u8a00\u5e76\u53d1\u3001\u9ad8\u6027\u80fd\u7b49\u4f18\u52bf</li> <li>\u751f\u6001\u878d\u5408: \u6df1\u5ea6\u96c6\u6210 tRPC \u5fae\u670d\u52a1\u751f\u6001\uff0c\u590d\u7528\u670d\u52a1\u6cbb\u7406\u3001\u53ef\u89c2\u6d4b\u6027\u7b49\u57fa\u7840\u8bbe\u65bd</li> <li>\u5e94\u7528\u9002\u914d: \u6ee1\u8db3\u590d\u6742\u4e1a\u52a1\u573a\u666f\u7684\u667a\u80fd\u5316\u6539\u9020\u548c\u90e8\u7f72\u9700\u6c42</li> </ul>"},{"location":"zh/#trpc-agent-go_2","title":"tRPC-Agent-Go \u6846\u67b6\u603b\u89c8","text":"<p>tRPC-Agent-Go \u6846\u67b6\u96c6\u6210\u4e86 LLM\u3001\u667a\u80fd\u89c4\u5212\u5668\u3001\u4f1a\u8bdd\u7ba1\u7406\u3001\u53ef\u89c2\u6d4b\u6027\u548c\u4e30\u5bcc\u7684\u5de5\u5177\u751f\u6001\u7cfb\u7edf\u3002\u652f\u6301\u521b\u5efa\u81ea\u4e3b <code>Agent</code> \u548c\u534a\u81ea\u4e3b <code>Agent</code>\uff0c\u5177\u5907\u63a8\u7406\u80fd\u529b\u3001\u5de5\u5177\u8c03\u7528\u3001\u5b50 <code>Agent</code> \u534f\u4f5c\u548c\u957f\u671f\u72b6\u6001\u4fdd\u6301\u80fd\u529b\uff0c\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u6784\u5efa\u667a\u80fd\u5e94\u7528\u7684\u5b8c\u6574\u6280\u672f\u6808\u3002</p>"},{"location":"zh/#_6","title":"\u6838\u5fc3\u6280\u672f\u7279\u6027","text":"<ul> <li>\u591a\u6837\u5316 <code>Agent</code> \u7cfb\u7edf\uff1a\u63d0\u4f9b LLM\u3001Chain\u3001Parallel\u3001Cycle \u7b49\u591a\u79cd <code>Agent</code> \u6267\u884c\u6a21\u5f0f</li> <li>\u4e30\u5bcc\u5de5\u5177\u751f\u6001\uff1a\u5185\u7f6e\u5e38\u7528\u5de5\u5177\u96c6\uff0c\u652f\u6301\u81ea\u5b9a\u4e49\u6269\u5c55\u548c MCP \u534f\u8bae\u6807\u51c6\u5316\u96c6\u6210</li> <li>\u76d1\u63a7\u80fd\u529b\uff1a\u96c6\u6210 OpenTelemetry \u6807\u51c6\uff0c\u652f\u6301\u5168\u94fe\u8def\u8ffd\u8e2a\u548c\u6027\u80fd\u76d1\u63a7</li> <li>\u667a\u80fd\u4f1a\u8bdd\u7ba1\u7406\uff1a\u652f\u6301 Session \u72b6\u6001\u6301\u4e45\u5316\uff0cmemory \u8bb0\u5fc6\u7ba1\u7406\u548c\u77e5\u8bc6\u5e93\u96c6\u6210</li> <li>\u6a21\u5757\u5316\u67b6\u6784\uff1a\u6e05\u6670\u7684\u5206\u5c42\u8bbe\u8ba1\uff0c\u4fbf\u4e8e\u6269\u5c55\u548c\u5b9a\u5236\u5f00\u53d1</li> </ul>"},{"location":"zh/#_7","title":"\u6838\u5fc3\u6a21\u5757\u8be6\u89e3","text":""},{"location":"zh/#model-","title":"Model \u6a21\u5757 - \u5927\u8bed\u8a00\u6a21\u578b\u62bd\u8c61\u5c42","text":"<p>Model \u6a21\u5757\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684 LLM \u63a5\u53e3\u62bd\u8c61\uff0c\u652f\u6301 OpenAI \u517c\u5bb9\u7684 API \u8c03\u7528\u3002\u901a\u8fc7\u6807\u51c6\u5316\u7684\u63a5\u53e3\u8bbe\u8ba1\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u7075\u6d3b\u5207\u6362\u4e0d\u540c\u7684\u6a21\u578b\u63d0\u4f9b\u5546\uff0c\u5b9e\u73b0\u6a21\u578b\u7684\u65e0\u7f1d\u96c6\u6210\u548c\u8c03\u7528\u3002\u8be5\u6a21\u5757\u4e3b\u8981\u652f\u6301\u4e86 OpenAI like \u63a5\u53e3\u7684\u517c\u5bb9\u6027\uff0c\u5df2\u9a8c\u8bc1\u516c\u53f8\u5185\u5916\u5927\u591a\u6570\u63a5\u53e3\u3002</p>"},{"location":"zh/#_8","title":"\u6838\u5fc3\u63a5\u53e3\u8bbe\u8ba1","text":"<pre><code>// Model \u662f\u6240\u6709\u8bed\u8a00\u6a21\u578b\u5fc5\u987b\u5b9e\u73b0\u7684\u63a5\u53e3\ntype Model interface {\n    // \u751f\u6210\u5185\u5bb9\uff0c\u652f\u6301\u6d41\u5f0f\u54cd\u5e94\n    GenerateContent(ctx context.Context, request *Request) (&lt;-chan *Response, error)\n\n    // \u8fd4\u56de\u6a21\u578b\u57fa\u672c\u4fe1\u606f\n    Info() Info\n}\n\n// \u6a21\u578b\u4fe1\u606f\u7ed3\u6784\ntype Info struct {\n    Name string // \u6a21\u578b\u540d\u79f0\n}\n</code></pre>"},{"location":"zh/#openai","title":"OpenAI \u517c\u5bb9\u5b9e\u73b0","text":"<p>\u6846\u67b6\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684 OpenAI \u517c\u5bb9\u5b9e\u73b0\uff0c\u652f\u6301\u8fde\u63a5\u5404\u79cd OpenAI-like \u63a5\u53e3\uff1a</p> <pre><code>// \u521b\u5efa OpenAI \u6a21\u578b\nmodel := openai.New(\"gpt-4o-mini\",\n    openai.WithAPIKey(\"your-api-key\"),\n    openai.WithBaseURL(\"https://api.openai.com/v1\"), // \u53ef\u81ea\u5b9a\u4e49 BaseURL\n)\n\n// \u652f\u6301\u81ea\u5b9a\u4e49\u914d\u7f6e\nmodel := openai.New(\"custom-model\",\n    openai.WithAPIKey(\"your-api-key\"),\n    openai.WithBaseURL(\"https://your-custom-endpoint.com/v1\"),\n    openai.WithChannelBufferSize(512),\n    openai.WithExtraFields(map[string]interface{}{\n        \"custom_param\": \"value\",\n    }),\n)\n</code></pre>"},{"location":"zh/#_9","title":"\u652f\u6301\u7684\u6a21\u578b\u5e73\u53f0","text":"<p>\u5f53\u524d\u6846\u67b6\u652f\u6301\u6240\u6709\u63d0\u4f9b OpenAI \u517c\u5bb9 API \u7684\u6a21\u578b\u5e73\u53f0\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ul> <li>OpenAI - GPT-4o\u3001GPT-4\u3001GPT-3.5 \u7b49\u7cfb\u5217\u6a21\u578b</li> <li>\u817e\u8baf\u4e91 - Deeseek,hunyuan \u7cfb\u5217</li> <li>\u5176\u4ed6\u4e91\u5382\u5546 - \u63d0\u4f9b OpenAI \u517c\u5bb9\u63a5\u53e3\u7684\u5404\u7c7b\u6a21\u578b\uff0c\u5982 deepseek\uff0cqwen \u7b49</li> </ul> <p>Model \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Model</p>"},{"location":"zh/#agent-agent","title":"<code>Agent</code> \u6a21\u5757 - <code>Agent</code> \u6267\u884c\u5f15\u64ce","text":"<p><code>Agent</code> \u6a21\u5757\u662f tRPC-Agent-Go \u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u63d0\u4f9b\u667a\u80fd\u63a8\u7406\u5f15\u64ce\u548c\u4efb\u52a1\u7f16\u6392\u80fd\u529b\u3002\u8be5\u6a21\u5757\u5177\u5907\u4ee5\u4e0b\u6838\u5fc3\u529f\u80fd\uff1a</p> <ul> <li>\u591a\u6837\u5316 <code>Agent</code> \u7c7b\u578b\uff1a\u652f\u6301 LLM\u3001Chain\u3001Parallel\u3001Cycle\u3001Graph \u7b49\u4e0d\u540c\u6267\u884c\u6a21\u5f0f</li> <li>\u5de5\u5177\u8c03\u7528\u4e0e\u96c6\u6210\uff1a\u63d0\u4f9b\u4e30\u5bcc\u7684\u5916\u90e8\u80fd\u529b\u6269\u5c55\u673a\u5236</li> <li>\u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784\uff1a\u5b9e\u73b0\u6d41\u5f0f\u5904\u7406\u548c\u5b9e\u65f6\u76d1\u63a7  </li> <li>\u5c42\u6b21\u5316\u7ec4\u5408\uff1a\u652f\u6301\u5b50 <code>Agent</code> \u534f\u4f5c\u548c\u590d\u6742\u6d41\u7a0b\u7f16\u6392</li> <li>\u72b6\u6001\u7ba1\u7406\uff1a\u786e\u4fdd\u957f\u5bf9\u8bdd\u548c\u4f1a\u8bdd\u6301\u4e45\u5316</li> </ul> <p><code>Agent</code> \u6a21\u5757\u901a\u8fc7\u7edf\u4e00\u63a5\u53e3\u6807\u51c6\u5b9e\u73b0\u9ad8\u5ea6\u6a21\u5757\u5316\uff0c\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4ece\u667a\u80fd\u5bf9\u8bdd\u52a9\u624b\u5230\u590d\u6742\u4efb\u52a1\u81ea\u52a8\u5316\u7684\u5b8c\u6574\u6280\u672f\u652f\u6301\u3002</p>"},{"location":"zh/#_10","title":"\u6838\u5fc3\u63a5\u53e3\u8bbe\u8ba1","text":"<pre><code>type Agent interface {\n    // \u6267\u884c Agent \u8c03\u7528\uff0c\u8fd4\u56de\u4e8b\u4ef6\u6d41\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n\n    // \u8fd4\u56de Agent \u53ef\u7528\u7684\u5de5\u5177\u5217\u8868\n    Tools() []tool.Tool\n\n    // \u8fd4\u56de Agent \u7684\u57fa\u672c\u4fe1\u606f\n    Info() Info\n\n    // \u8fd4\u56de\u5b50 Agent \u5217\u8868\uff0c\u652f\u6301\u5c42\u6b21\u5316\u7ec4\u5408\n    SubAgents() []Agent\n\n    // \u6839\u636e\u540d\u79f0\u67e5\u627e\u5b50 Agent\n    FindSubAgent(name string) Agent\n}\n</code></pre>"},{"location":"zh/#agent_1","title":"\u591a\u79cd Agent \u7c7b\u578b","text":"<p>LLMAgent - \u57fa\u7840\u667a\u80fd <code>Agent</code></p> <p>\u6838\u5fc3\u7279\u70b9: \u57fa\u4e8e LLM \u7684\u667a\u80fd <code>Agent</code>\uff0c\u652f\u6301\u5de5\u5177\u8c03\u7528\u3001\u6d41\u5f0f\u8f93\u51fa\u548c\u4f1a\u8bdd\u7ba1\u7406\u3002</p> <ul> <li>\u6267\u884c\u65b9\u5f0f: \u76f4\u63a5\u4e0e LLM \u4ea4\u4e92\uff0c\u652f\u6301\u5355\u8f6e\u5bf9\u8bdd\u548c\u591a\u8f6e\u4f1a\u8bdd</li> <li>\u9002\u7528\u573a\u666f: \u667a\u80fd\u5ba2\u670d\u3001\u5185\u5bb9\u521b\u4f5c\u3001\u4ee3\u7801\u52a9\u624b\u3001\u6570\u636e\u5206\u6790\u3001\u95ee\u7b54\u7cfb\u7edf</li> <li>\u4f18\u52bf: \u7b80\u5355\u76f4\u63a5\u3001\u54cd\u5e94\u5feb\u901f\u3001\u914d\u7f6e\u7075\u6d3b\u3001\u6613\u4e8e\u6269\u5c55</li> </ul> <pre><code>agent := llmagent.New(\n    \"assistant\",\n    llmagent.WithModel(openai.New(\"gpt-4o-mini\")),\n    llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684 AI \u52a9\u624b\"),\n    llmagent.WithTools([]tool.Tool{calculatorTool, searchTool}),\n)\n</code></pre> <p>ChainAgent - \u94fe\u5f0f\u5904\u7406 <code>Agent</code></p> <p>\u6838\u5fc3\u7279\u70b9: \u6d41\u6c34\u7ebf\u6a21\u5f0f\uff0c\u591a\u4e2a <code>Agent</code> \u6309\u987a\u5e8f\u6267\u884c\uff0c\u524d\u4e00\u4e2a\u7684\u8f93\u51fa\u6210\u4e3a\u540e\u4e00\u4e2a\u7684\u8f93\u5165\u3002</p> <ul> <li>\u6267\u884c\u65b9\u5f0f: Agent1 \u2192 Agent2 \u2192 Agent3 \u987a\u5e8f\u6267\u884c</li> <li>\u9002\u7528\u573a\u666f: \u6587\u6863\u5904\u7406\u6d41\u6c34\u7ebf\u3001\u6570\u636e ETL\u3001\u5185\u5bb9\u5ba1\u6838\u94fe\u6761</li> <li>\u6280\u672f\u4f18\u52bf: \u4e13\u4e1a\u5206\u5de5\u3001\u6d41\u7a0b\u6e05\u6670\u3001\u6613\u4e8e\u8c03\u8bd5</li> </ul> <pre><code>chain := chainagent.New(\n    \"content-pipeline\",\n    chainagent.WithSubAgents([]agent.Agent{\n        planningAgent,   // \u7b2c\u4e00\u6b65\uff1a\u5236\u5b9a\u8ba1\u5212\n        researchAgent,   // \u7b2c\u4e8c\u6b65\uff1a\u6536\u96c6\u4fe1\u606f  \n        writingAgent,    // \u7b2c\u4e09\u6b65\uff1a\u521b\u4f5c\u5185\u5bb9\n    }),\n)\n</code></pre> <p>ParallelAgent - \u5e76\u884c\u5904\u7406 <code>Agent</code></p> <p>\u6838\u5fc3\u7279\u70b9: \u5e76\u53d1\u6a21\u5f0f\uff0c\u591a\u4e2a <code>Agent</code> \u540c\u65f6\u6267\u884c\u76f8\u540c\u4efb\u52a1\uff0c\u7136\u540e\u5408\u5e76\u7ed3\u679c\u3002</p> <ul> <li>\u6267\u884c\u65b9\u5f0f: Agent1 + Agent2 + Agent3 \u540c\u65f6\u6267\u884c</li> <li>\u9002\u7528\u573a\u666f: \u591a\u4e13\u5bb6\u8bc4\u4f30\u3001\u591a\u7ef4\u5ea6\u5206\u6790\u3001\u51b3\u7b56\u652f\u6301</li> <li>\u6280\u672f\u4f18\u52bf: \u5e76\u53d1\u6267\u884c\u3001\u591a\u89d2\u5ea6\u5206\u6790\u3001\u5bb9\u9519\u6027\u5f3a</li> </ul> <pre><code>parallel := parallelagent.New(\n    \"multi-expert-evaluation\",\n    parallelagent.WithSubAgents([]agent.Agent{\n        marketAgent,      // \u5e02\u573a\u5206\u6790\u4e13\u5bb6\n        technicalAgent,   // \u6280\u672f\u8bc4\u4f30\u4e13\u5bb6\n        financeAgent,     // \u8d22\u52a1\u5206\u6790\u4e13\u5bb6\n    }),\n)\n</code></pre> <p>CycleAgent - \u5faa\u73af\u8fed\u4ee3 <code>Agent</code></p> <p>\u6838\u5fc3\u7279\u70b9: \u8fed\u4ee3\u6a21\u5f0f\uff0c\u901a\u8fc7\u591a\u8f6e\"\u6267\u884c\u2192\u8bc4\u4f30\u2192\u6539\u8fdb\"\u5faa\u73af\uff0c\u4e0d\u65ad\u4f18\u5316\u7ed3\u679c\u3002</p> <ul> <li>\u6267\u884c\u65b9\u5f0f: \u5faa\u73af\u6267\u884c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u6216\u8fbe\u5230\u6700\u5927\u8f6e\u6b21</li> <li>\u9002\u7528\u573a\u666f: \u590d\u6742\u95ee\u9898\u6c42\u89e3\u3001\u5185\u5bb9\u4f18\u5316\u3001\u81ea\u52a8\u8c03\u8bd5</li> <li>\u6280\u672f\u4f18\u52bf: \u81ea\u6211\u6539\u8fdb\u3001\u8d28\u91cf\u63d0\u5347\u3001\u667a\u80fd\u505c\u6b62</li> </ul> <pre><code>cycle := cycleagent.New(\n    \"problem-solver\",\n    cycleagent.WithSubAgents([]agent.Agent{\n        generatorAgent,  // \u751f\u6210\u89e3\u51b3\u65b9\u6848\n        reviewerAgent,   // \u8bc4\u4f30\u8d28\u91cf\n    }),\n    // \u8bbe\u7f6e\u6700\u5927\u8fed\u4ee3\u6b21\u6570\u4e3a 5\uff0c\u9632\u6b62\u65e0\u9650\u5faa\u73af\n    cycleagent.WithMaxIterations(5),\n)\n</code></pre> <p>GraphAgent - \u56fe\u5de5\u4f5c\u6d41 <code>Agent</code></p> <p>\u6838\u5fc3\u7279\u70b9: \u57fa\u4e8e\u56fe\u7684\u5de5\u4f5c\u6d41\u6a21\u5f0f\uff0c\u652f\u6301\u6761\u4ef6\u8def\u7531\u548c\u591a\u8282\u70b9\u534f\u4f5c\u7684\u590d\u6742\u4efb\u52a1\u5904\u7406\u3002</p> <p>\u8bbe\u8ba1\u76ee\u7684: \u4e3a\u4e86\u6ee1\u8db3\u548c\u517c\u5bb9\u817e\u8baf\u5185\u90e8\u4e4b\u524d\u5927\u591a\u6570\u7684 AI <code>Agent</code> \u5e94\u7528\u662f\u57fa\u4e8e\u56fe\u7f16\u6392\u6846\u67b6\u8fdb\u884c\u5f00\u53d1\u7684\uff0c\u65b9\u4fbf\u5b58\u91cf\u7528\u6237\u8fc1\u79fb\uff0c\u4fdd\u7559\u5df2\u6709\u7684\u5f00\u53d1\u4e60\u60ef\u3002</p> <ul> <li>\u6267\u884c\u65b9\u5f0f: \u6309\u56fe\u7ed3\u6784\u6267\u884c\uff0c\u652f\u6301 LLM \u8282\u70b9\u3001\u5de5\u5177\u8282\u70b9\u3001\u6761\u4ef6\u5206\u652f\u548c\u72b6\u6001\u7ba1\u7406</li> <li>\u9002\u7528\u573a\u666f: \u590d\u6742\u51b3\u7b56\u6d41\u7a0b\u3001\u591a\u6b65\u9aa4\u4efb\u52a1\u534f\u4f5c\u3001\u52a8\u6001\u8def\u7531\u5904\u7406\u3001\u5b58\u91cf\u56fe\u7f16\u6392\u5e94\u7528\u8fc1\u79fb</li> <li>\u6280\u672f\u4f18\u52bf: \u7075\u6d3b\u8def\u7531\u3001\u72b6\u6001\u5171\u4eab\u3001\u53ef\u89c6\u5316\u6d41\u7a0b\u3001\u517c\u5bb9\u73b0\u6709\u5f00\u53d1\u6a21\u5f0f</li> </ul> <pre><code>// \u521b\u5efa\u6587\u6863\u5904\u7406\u5de5\u4f5c\u6d41\nstateGraph := graph.NewStateGraph(graph.MessagesStateSchema())\n\n// \u521b\u5efa\u5206\u6790\u5de5\u5177\ncomplexityTool := function.NewFunctionTool(\n    analyzeComplexity,\n    function.WithName(\"analyze_complexity\"),\n    function.WithDescription(\"\u5206\u6790\u6587\u6863\u590d\u6742\u5ea6\"),\n)\ntools := map[string]tool.Tool{\"analyze_complexity\": complexityTool}\n\n// \u6784\u5efa\u5de5\u4f5c\u6d41\u56fe\ng, err := stateGraph.\n    AddNode(\"preprocess\", preprocessDocument).          // \u9884\u5904\u7406\u8282\u70b9\n    AddLLMNode(\"analyze\", model, \n        \"\u5206\u6790\u6587\u6863\u590d\u6742\u5ea6\uff0c\u4f7f\u7528 analyze_complexity \u5de5\u5177\", tools). // LLM \u5206\u6790\u8282\u70b9\n    AddToolsNode(\"tools\", tools).                       // \u5de5\u5177\u8282\u70b9\n    AddNode(\"route_complexity\", routeComplexity).       // \u8def\u7531\u51b3\u7b56\u8282\u70b9\n    AddLLMNode(\"summarize\", model, \"\u603b\u7ed3\u590d\u6742\u6587\u6863\", nil).  // LLM \u603b\u7ed3\u8282\u70b9\n    AddLLMNode(\"enhance\", model, \"\u63d0\u5347\u7b80\u5355\u6587\u6863\u8d28\u91cf\", nil). // LLM \u589e\u5f3a\u8282\u70b9\n    AddNode(\"format_output\", formatOutput).             // \u683c\u5f0f\u5316\u8282\u70b9\n    SetEntryPoint(\"preprocess\").                        // \u8bbe\u7f6e\u5165\u53e3\n    SetFinishPoint(\"format_output\").                    // \u8bbe\u7f6e\u51fa\u53e3\n    AddEdge(\"preprocess\", \"analyze\").                   // \u8fde\u63a5\u8282\u70b9\n    AddToolsConditionalEdges(\"analyze\", \"tools\", \"route_complexity\").\n    AddConditionalEdges(\"route_complexity\", complexityCondition, map[string]string{\n        \"simple\":  \"enhance\",\n        \"complex\": \"summarize\",\n    }).\n    AddEdge(\"enhance\", \"format_output\").\n    AddEdge(\"summarize\", \"format_output\").\n    Compile()\n\n// \u521b\u5efa GraphAgent \u5e76\u8fd0\u884c\ngraphAgent, err := graphagent.New(\"document-processor\", g,\n    graphagent.WithDescription(\"\u6587\u6863\u5904\u7406\u5de5\u4f5c\u6d41\"),\n    graphagent.WithInitialState(graph.State{}),\n)\n\nrunner := runner.NewRunner(\"doc-workflow\", graphAgent)\nevents, _ := runner.Run(ctx, userID, sessionID, \n    model.NewUserMessage(\"\u5904\u7406\u8fd9\u4e2a\u6587\u6863\u5185\u5bb9\"))\n</code></pre> <p><code>Agent</code> \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Agent\u3001Multi-Agent \u548c Graph</p>"},{"location":"zh/#event-","title":"Event \u6a21\u5757 - \u4e8b\u4ef6\u9a71\u52a8\u7cfb\u7edf","text":"<p>Event \u6a21\u5757\u662f tRPC-Agent-Go \u7684\u4e8b\u4ef6\u7cfb\u7edf\u6838\u5fc3\uff0c\u8d1f\u8d23 <code>Agent</code> \u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u72b6\u6001\u4f20\u9012\u548c\u5b9e\u65f6\u901a\u4fe1\u3002\u901a\u8fc7\u7edf\u4e00\u7684\u4e8b\u4ef6\u6a21\u578b\uff0c\u5b9e\u73b0 <code>Agent</code> \u95f4\u89e3\u8026\u901a\u4fe1\u548c\u900f\u660e\u6267\u884c\u76d1\u63a7\u3002</p>"},{"location":"zh/#_11","title":"\u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u5f02\u6b65\u901a\u4fe1\uff1a<code>Agent</code> \u901a\u8fc7\u4e8b\u4ef6\u6d41\u8fdb\u884c\u975e\u963b\u585e\u901a\u4fe1\uff0c\u652f\u6301\u9ad8\u5e76\u53d1\u6267\u884c</li> <li>\u5b9e\u65f6\u76d1\u63a7\uff1a\u6240\u6709\u6267\u884c\u72b6\u6001\u901a\u8fc7\u4e8b\u4ef6\u5b9e\u65f6\u4f20\u9012\uff0c\u652f\u6301\u6d41\u5f0f\u5904\u7406</li> <li>\u7edf\u4e00\u62bd\u8c61\uff1a\u4e0d\u540c\u7c7b\u578b <code>Agent</code> \u901a\u8fc7\u76f8\u540c\u4e8b\u4ef6\u63a5\u53e3\u4ea4\u4e92</li> <li>\u591a <code>Agent</code> \u534f\u4f5c\uff1a\u652f\u6301\u5206\u652f\u4e8b\u4ef6\u8fc7\u6ee4\u548c\u72b6\u6001\u8ffd\u8e2a</li> </ul>"},{"location":"zh/#_12","title":"\u6838\u5fc3\u63a5\u53e3","text":"<pre><code>// Event\u4ee3\u8868Agent\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e2a\u4e8b\u4ef6\ntype Event struct {\n    *model.Response           // \u5d4c\u5165 LLM \u54cd\u5e94\u7684\u6240\u6709\u5b57\u6bb5\n    InvocationID    string    // \u672c\u6b21\u8c03\u7528\u7684\u552f\u4e00\u6807\u8bc6\n    Author          string    // \u4e8b\u4ef6\u53d1\u8d77\u8005\uff08Agent \u540d\u79f0\uff09\n    ID              string    // \u4e8b\u4ef6\u552f\u4e00\u6807\u8bc6\n    Timestamp       time.Time // \u4e8b\u4ef6\u65f6\u95f4\u6233\n    Branch          string    // \u5206\u652f\u6807\u8bc6\uff08\u591a Agent \u534f\u4f5c\uff09\n}\n</code></pre>"},{"location":"zh/#_13","title":"\u4e3b\u8981\u4e8b\u4ef6\u7c7b\u578b","text":"<ul> <li><code>chat.completion</code> - LLM \u5bf9\u8bdd\u5b8c\u6210\u4e8b\u4ef6</li> <li><code>chat.completion.chunk</code> - \u6d41\u5f0f\u5bf9\u8bdd\u4e8b\u4ef6</li> <li><code>tool.response</code> - \u5de5\u5177\u54cd\u5e94\u4e8b\u4ef6</li> <li><code>agent.transfer</code> - <code>Agent</code> \u8f6c\u79fb\u4e8b\u4ef6</li> <li><code>error</code> - \u9519\u8bef\u4e8b\u4ef6</li> </ul>"},{"location":"zh/#agentrun","title":"Agent.Run()\u4e0e\u4e8b\u4ef6\u5904\u7406","text":"<p>\u6240\u6709 <code>Agent</code> \u90fd\u901a\u8fc7 <code>Run()</code> \u65b9\u6cd5\u8fd4\u56de\u4e8b\u4ef6\u6d41\uff0c\u5b9e\u73b0\u7edf\u4e00\u7684\u6267\u884c\u63a5\u53e3\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n)\n\n// Agent \u63a5\u53e3\u5b9a\u4e49\ntype Agent interface {\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n}\n\n// \u521b\u5efa Agent \u5e76\u4f7f\u7528 Runner \u6267\u884c\nagent := llmagent.New(\"assistant\", \n    llmagent.WithModel(model),\n    llmagent.WithTools(tools))\n\n// \u4f7f\u7528 Runner \u6267\u884c Agent\uff08\u63a8\u8350\u65b9\u5f0f\uff09\nrunner := runner.NewRunner(\"calculator-app\", agent)\nevents, err := runner.Run(ctx, \"user-001\", \"session-001\", \n    model.NewUserMessage(\"\u8ba1\u7b97 2+3 \u7b49\u4e8e\u591a\u5c11\"))\n\n// \u5b9e\u65f6\u5904\u7406\u4e8b\u4ef6\u6d41\nfor event := range events {\n    switch event.Object {\n    case \"chat.completion.chunk\":\n        fmt.Print(event.Choices[0].Delta.Content)\n    case \"tool.response\":\n        fmt.Printf(\"\\n[%s] \u5de5\u5177\u6267\u884c\u5b8c\u6210\\n\", event.Author)\n    case \"chat.completion\":\n        if event.Done {\n            fmt.Printf(\"\\n[%s] \u6700\u7ec8\u7b54\u6848: %s\\n\", \n                event.Author, event.Choices[0].Message.Content)\n        }\n    case \"error\":\n        fmt.Printf(\"\u9519\u8bef: %s\\n\", event.Error.Message)\n        return event.Error\n    }\n    if event.Done { break }\n}\n</code></pre>"},{"location":"zh/#agent_2","title":"\u591aAgent\u534f\u4f5c\u4e2d\u7684\u4e8b\u4ef6\u6d41","text":"<pre><code>chainAgent := chainagent.New(\"chain\", \n    chainagent.WithSubAgents([]agent.Agent{\n        analysisAgent, solutionAgent,\n    }))\n\nevents, err := chainAgent.Run(ctx, invocation)\nif err != nil {\n    return err\n}\n\nfor event := range events {\n    switch event.Object {\n    case \"chat.completion.chunk\":\n        fmt.Print(event.Choices[0].Delta.Content)\n    case \"chat.completion\":\n        if event.Done {\n            fmt.Printf(\"[%s] \u5b8c\u6210: %s\\n\", event.Author, \n                event.Choices[0].Message.Content)\n        }\n    case \"tool.response\":\n        fmt.Printf(\"[%s] \u5de5\u5177\u6267\u884c\u5b8c\u6210\\n\", event.Author)\n    case \"error\":\n        fmt.Printf(\"[%s] \u9519\u8bef: %s\\n\", event.Author, event.Error.Message)\n    }\n}\n</code></pre>"},{"location":"zh/#multi-agent-system-agent","title":"Multi-Agent System - \u591aAgent\u534f\u4f5c\u7cfb\u7edf","text":"<p>tRPC-Agent-Go \u91c7\u7528 SubAgent \u673a\u5236\u6784\u5efa\u591a <code>Agent</code> \u7cfb\u7edf\uff0c\u652f\u6301\u591a\u4e2a <code>Agent</code> \u534f\u4f5c\u5904\u7406\u590d\u6742\u4efb\u52a1\u3002</p> <pre><code>// \u521b\u5efa\u4e13\u4e1a\u9886\u57df Agent\nmarketAnalyst := llmagent.New(\"market-analyst\",\n    llmagent.WithModel(model),\n    llmagent.WithInstruction(\"\u4f60\u662f\u5e02\u573a\u5206\u6790\u4e13\u5bb6\"),\n    llmagent.WithTools([]tool.Tool{marketDataTool}))\n\ntechArchitect := llmagent.New(\"tech-architect\", \n    llmagent.WithModel(model),\n    llmagent.WithInstruction(\"\u4f60\u662f\u6280\u672f\u67b6\u6784\u4e13\u5bb6\"),\n    llmagent.WithTools([]tool.Tool{techAnalysisTool}))\n\n// \u4e32\u884c\u534f\u4f5c\uff1a\u5e02\u573a\u5206\u6790 \u2192 \u6280\u672f\u8bc4\u4f30\nplanningChain := chainagent.New(\"product-planning\",\n    chainagent.WithSubAgents([]agent.Agent{\n        marketAnalyst, techArchitect,\n    }))\n\n// \u5e76\u884c\u534f\u4f5c\uff1a\u591a\u4e13\u5bb6\u540c\u65f6\u8bc4\u4f30\nexpertPanel := parallelagent.New(\"expert-panel\",\n    parallelagent.WithSubAgents([]agent.Agent{\n        marketAnalyst, techArchitect,\n    }))\n\n// \u6267\u884c\u591a Agent \u534f\u4f5c\nrunner := runner.NewRunner(\"expert-panel-app\", masterAgent)\nevents, err := runner.Run(ctx, \"user-001\", \"session-001\", \n    model.NewUserMessage(\"\u5206\u6790\u5e02\u573a\uff0c\u8bbe\u8ba1\u4ea7\u54c1\u65b9\u6848\"))\n</code></pre> <p>Event \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Event</p>"},{"location":"zh/#planner-","title":"Planner\u6a21\u5757 - \u667a\u80fd\u89c4\u5212\u5f15\u64ce","text":"<p><code>Planner</code> \u6a21\u5757\u4e3a <code>Agent</code> \u63d0\u4f9b\u667a\u80fd\u89c4\u5212\u80fd\u529b\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u89c4\u5212\u7b56\u7565\u589e\u5f3a <code>Agent</code> \u7684\u63a8\u7406\u548c\u51b3\u7b56\u80fd\u529b\u3002\u652f\u6301\u5185\u7f6e\u601d\u8003\u6a21\u578b\u3001React \u7ed3\u6784\u5316\u89c4\u5212\u548c\u81ea\u5b9a\u4e49\u663e\u5f0f\u89c4\u5212\u6307\u5bfc\u4e09\u79cd\u6a21\u5f0f\uff0c\u4f7f <code>Agent</code> \u80fd\u591f\u66f4\u597d\u5730\u5206\u89e3\u590d\u6742\u4efb\u52a1\u548c\u5236\u5b9a\u6267\u884c\u8ba1\u5212\u3002\u5176\u4e2d React \u6a21\u5f0f\u901a\u8fc7\"\u601d\u8003-\u884c\u52a8\"\u5faa\u73af\u548c\u7ed3\u6784\u5316\u6807\u7b7e\uff0c\u4e3a\u666e\u901a\u6a21\u578b\u63d0\u4f9b\u663e\u5f0f\u7684\u63a8\u7406\u6307\u5bfc\uff0c\u786e\u4fdd <code>Agent</code> \u80fd\u591f\u7cfb\u7edf\u6027\u5730\u5904\u7406\u590d\u6742\u4efb\u52a1\u3002</p>"},{"location":"zh/#_14","title":"\u6838\u5fc3\u63a5\u53e3\u8bbe\u8ba1","text":"<pre><code>// Planner \u63a5\u53e3\u5b9a\u4e49\u4e86\u6240\u6709\u89c4\u5212\u5668\u5fc5\u987b\u5b9e\u73b0\u7684\u65b9\u6cd5\ntype Planner interface {\n    // \u6784\u5efa\u89c4\u5212\u6307\u4ee4\uff0c\u4e3a LLM \u8bf7\u6c42\u6dfb\u52a0\u89c4\u5212\u76f8\u5173\u7684\u7cfb\u7edf\u6307\u4ee4\n    BuildPlanningInstruction(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        llmRequest *model.Request,\n    ) string\n\n    // \u5904\u7406\u89c4\u5212\u54cd\u5e94\uff0c\u5bf9 LLM \u7684\u54cd\u5e94\u8fdb\u884c\u540e\u5904\u7406\u548c\u7ed3\u6784\u5316\n    ProcessPlanningResponse(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        response *model.Response,\n    ) *model.Response\n}\n</code></pre>"},{"location":"zh/#_15","title":"\u5185\u7f6e\u89c4\u5212\u7b56\u7565","text":"<p><code>Builtin Planner</code> - \u5185\u7f6e\u601d\u8003\u89c4\u5212\u5668</p> <p>\u9002\u7528\u4e8e\u5177\u6709\u539f\u751f\u601d\u8003\u80fd\u529b\u7684\u6a21\u578b\uff0c\u901a\u8fc7\u914d\u7f6e\u6a21\u578b\u53c2\u6570\u542f\u7528\u5185\u90e8\u63a8\u7406\u673a\u5236\uff1a</p> <pre><code>// \u4e3a OpenAI o \u7cfb\u5217\u6a21\u578b\u914d\u7f6e\u63a8\u7406\u5f3a\u5ea6\nbuiltinPlanner := builtin.New(builtin.Options{\n    ReasoningEffort: stringPtr(\"medium\"), // \"low\", \"medium\", \"high\"\n})\n\n// \u4e3a Claude/Gemini \u6a21\u578b\u542f\u7528\u601d\u8003\u6a21\u5f0f\nbuiltinPlanner := builtin.New(builtin.Options{\n    ThinkingEnabled: boolPtr(true),\n    ThinkingTokens:  intPtr(1000),\n})\n</code></pre> <p><code>React Planner</code> - \u7ed3\u6784\u5316\u89c4\u5212\u5668</p> <p><code>React\uff08Reasoning and Acting\uff09Planner</code> \u662f\u4e00\u79cd AI \u63a8\u7406\u6a21\u5f0f\uff0c\u901a\u8fc7\u7ed3\u6784\u5316\u6807\u7b7e\u5f15\u5bfc\u6a21\u578b\u8fdb\u884c\"\u601d\u8003-\u884c\u52a8\"\u5faa\u73af\u3002\u5b83\u5c06\u590d\u6742\u95ee\u9898\u5206\u89e3\u4e3a\u56db\u4e2a\u6807\u51c6\u5316\u9636\u6bb5\uff1a\u5236\u5b9a\u8ba1\u5212\u3001\u63a8\u7406\u5206\u6790\u3001\u6267\u884c\u884c\u52a8\u3001\u63d0\u4f9b\u7b54\u6848\u3002\u8fd9\u79cd\u663e\u5f0f\u7684\u63a8\u7406\u8fc7\u7a0b\u8ba9 <code>Agent</code> \u80fd\u591f\u7cfb\u7edf\u6027\u5730\u5904\u7406\u590d\u6742\u4efb\u52a1\uff0c\u540c\u65f6\u63d0\u9ad8\u51b3\u7b56\u7684\u53ef\u89e3\u91ca\u6027\u548c\u9519\u8bef\u68c0\u6d4b\u80fd\u529b\u3002</p>"},{"location":"zh/#agent_3","title":"\u96c6\u6210\u5230 Agent","text":"<p><code>React Planner</code> \u53ef\u4ee5\u65e0\u7f1d\u96c6\u6210\u5230\u4efb\u4f55 LLMAgent \u4e2d\uff0c\u4e3a <code>Agent</code> \u63d0\u4f9b\u7ed3\u6784\u5316\u7684\u601d\u8003\u80fd\u529b\u3002\u96c6\u6210\u540e\uff0c<code>Agent</code> \u4f1a\u81ea\u52a8\u6309\u7167 React \u6a21\u5f0f\u7684\u56db\u4e2a\u9636\u6bb5\u6765\u5904\u7406\u7528\u6237\u8bf7\u6c42\uff0c\u786e\u4fdd\u6bcf\u4e2a\u590d\u6742\u4efb\u52a1\u90fd\u80fd\u5f97\u5230\u7cfb\u7edf\u6027\u7684\u5904\u7406\u3002</p> <pre><code>// \u521b\u5efa\u5e26\u89c4\u5212\u80fd\u529b\u7684 Agent\nagent := llmagent.New(\n    \"planning-assistant\",\n    llmagent.WithModel(openai.New(\"gpt-4o\")),\n    llmagent.WithPlanner(reactPlanner), // \u96c6\u6210\u89c4\u5212\u5668\n    llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u5584\u4e8e\u89c4\u5212\u7684\u667a\u80fd\u52a9\u624b\"),\n)\n\n// Agent \u5c06\u81ea\u52a8\u4f7f\u7528\u89c4\u5212\u5668\u6765\uff1a\n// 1. \u4e3a\u590d\u6742\u4efb\u52a1\u5236\u5b9a\u6b65\u9aa4\u5316\u8ba1\u5212\uff08PLANNING \u9636\u6bb5\uff09\n// 2. \u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u63a8\u7406\u5206\u6790\uff08REASONING \u9636\u6bb5\uff09\n// 3. \u8c03\u7528\u76f8\u5e94\u5de5\u5177\u6267\u884c\u5177\u4f53\u64cd\u4f5c\uff08ACTION \u9636\u6bb5\uff09\n// 4. \u6574\u5408\u6240\u6709\u4fe1\u606f\u63d0\u4f9b\u5b8c\u6574\u7b54\u6848\uff08FINAL_ANSWER \u9636\u6bb5\uff09\n</code></pre> <p>\u5b9e\u9645\u5e94\u7528\u6548\u679c\uff1a \u4f7f\u7528 <code>React Planner</code> \u7684 <code>Agent</code> \u5728\u5904\u7406\u590d\u6742\u67e5\u8be2\u65f6\uff0c\u4f1a\u5c55\u73b0\u51fa\u660e\u663e\u7684\u7ed3\u6784\u5316\u601d\u8003\u7279\u5f81\u3002\u4f8b\u5982\uff0c\u5f53\u7528\u6237\u8be2\u95ee\"\u5e2e\u6211\u5236\u5b9a\u4e00\u4e2a\u65c5\u884c\u8ba1\u5212\"\u65f6\uff0c<code>Agent</code> \u4f1a\u9996\u5148\u5206\u6790\u9700\u6c42\uff08<code>PLANNING</code>\uff09\uff0c\u7136\u540e\u63a8\u7406\u6700\u4f73\u8def\u7ebf\uff08<code>REASONING</code>\uff09\uff0c\u63a5\u7740\u67e5\u8be2\u5177\u4f53\u4fe1\u606f\uff08<code>ACTION</code>\uff09\uff0c\u6700\u540e\u63d0\u4f9b\u5b8c\u6574\u7684\u65c5\u884c\u5efa\u8bae\uff08<code>FINAL_ANSWER</code>\uff09\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u4ec5\u63d0\u9ad8\u4e86\u56de\u7b54\u8d28\u91cf\uff0c\u8fd8\u8ba9\u7528\u6237\u80fd\u591f\u6e05\u695a\u5730\u770b\u5230 <code>Agent</code> \u7684\u601d\u8003\u8fc7\u7a0b\u3002</p>"},{"location":"zh/#_16","title":"\u81ea\u5b9a\u4e49\u89c4\u5212\u5668","text":"<p>\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49\u89c4\u5212\u5668\u6765\u6ee1\u8db3\u7279\u5b9a\u9700\u6c42\uff1a</p> <pre><code>// \u81ea\u5b9a\u4e49 Reflection \u89c4\u5212\u5668\u793a\u4f8b\ntype ReflectionPlanner struct {\n    maxIterations int\n}\n\nfunc (p *ReflectionPlanner) BuildPlanningInstruction(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    llmRequest *model.Request,\n) string {\n    return `\u8bf7\u6309\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u53cd\u601d\u5f0f\u89c4\u5212\uff1a\n1. \u5206\u6790\u95ee\u9898\u5e76\u5236\u5b9a\u521d\u59cb\u8ba1\u5212\n2. \u6267\u884c\u8ba1\u5212\u5e76\u6536\u96c6\u7ed3\u679c\n3. \u53cd\u601d\u6267\u884c\u8fc7\u7a0b\uff0c\u8bc6\u522b\u95ee\u9898\u548c\u6539\u8fdb\u70b9\n4. \u57fa\u4e8e\u53cd\u601d\u4f18\u5316\u8ba1\u5212\u5e76\u91cd\u65b0\u6267\u884c\n5. \u91cd\u590d\u53cd\u601d-\u4f18\u5316\u8fc7\u7a0b\u76f4\u5230\u8fbe\u5230\u6ee1\u610f\u7ed3\u679c`\n}\n\nfunc (p *ReflectionPlanner) ProcessPlanningResponse(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    response *model.Response,\n) *model.Response {\n    // \u5904\u7406\u53cd\u601d\u5185\u5bb9\uff0c\u63d0\u53d6\u6539\u8fdb\u5efa\u8bae\n    // \u5b9e\u73b0\u53cd\u601d\u903b\u8f91...\n    return response\n}\n\n// \u4f7f\u7528\u81ea\u5b9a\u4e49\u89c4\u5212\u5668\nreflectionPlanner := &amp;ReflectionPlanner{maxIterations: 3}\nagent := llmagent.New(\n    \"reflection-agent\",\n    llmagent.WithModel(model),\n    llmagent.WithPlanner(reflectionPlanner), // \u4f7f\u7528\u81ea\u5b9a\u4e49\u89c4\u5212\u5668\n)\n</code></pre> <p><code>Planner</code> \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Planner</p>"},{"location":"zh/#tool-","title":"Tool \u6a21\u5757 - \u5de5\u5177\u8c03\u7528\u6846\u67b6","text":"<p>Tool \u6a21\u5757\u63d0\u4f9b\u4e86\u6807\u51c6\u5316\u7684\u5de5\u5177\u5b9a\u4e49\u3001\u6ce8\u518c\u548c\u6267\u884c\u673a\u5236\uff0c\u4f7f <code>Agent</code> \u80fd\u591f\u4e0e\u5916\u90e8\u4e16\u754c\u8fdb\u884c\u4ea4\u4e92\u3002\u652f\u6301\u540c\u6b65\u8c03\u7528\uff08<code>CallableTool</code>\uff09\u548c\u6d41\u5f0f\u8c03\u7528\uff08<code>StreamableTool</code>\uff09\u4e24\u79cd\u6a21\u5f0f\uff0c\u6ee1\u8db3\u4e0d\u540c\u573a\u666f\u7684\u6280\u672f\u9700\u6c42\u3002</p>"},{"location":"zh/#_17","title":"\u6838\u5fc3\u63a5\u53e3\u8bbe\u8ba1","text":"<pre><code>// \u57fa\u7840\u5de5\u5177\u63a5\u53e3\ntype Tool interface {\n    Declaration() *Declaration  // \u8fd4\u56de\u5de5\u5177\u5143\u6570\u636e\n}\n\n// \u540c\u6b65\u8c03\u7528\u5de5\u5177\u63a5\u53e3\ntype CallableTool interface {\n    Call(ctx context.Context, jsonArgs []byte) (any, error)\n    Tool\n}\n\n// \u6d41\u5f0f\u5de5\u5177\u63a5\u53e3\ntype StreamableTool interface {\n    StreamableCall(ctx context.Context, jsonArgs []byte) (*StreamReader, error)\n    Tool\n}\n</code></pre>"},{"location":"zh/#_18","title":"\u5de5\u5177\u521b\u5efa\u793a\u4f8b","text":"<pre><code>// \u8ba1\u7b97\u5668\u5de5\u5177\ncalculatorTool := function.NewFunctionTool(\n    func(ctx context.Context, input struct {\n        Operation string  `json:\"operation\"`\n        A         float64 `json:\"a\"`\n        B         float64 `json:\"b\"`\n    }) (struct {\n        Result float64 `json:\"result\"`\n    }, error) {\n        var result float64\n        switch input.Operation {\n        case \"add\":\n            result = input.A + input.B\n        case \"multiply\":\n            result = input.A * input.B\n        case \"subtract\":\n            result = input.A - input.B\n        case \"divide\":\n            if input.B != 0 {\n                result = input.A / input.B\n            } else {\n                return struct{Result float64}{}, fmt.Errorf(\"division by zero\")\n            }\n        default:\n            return struct{Result float64}{}, fmt.Errorf(\"unsupported operation: %s\", input.Operation)\n        }\n        return struct{Result float64}{result}, nil\n    },\n    function.WithName(\"calculator\"),\n    function.WithDescription(\"\u6267\u884c\u6570\u5b66\u8ba1\u7b97\"),\n)\n\n// \u6d41\u5f0f\u65e5\u5fd7\u67e5\u8be2\u5de5\u5177\u7c7b\u578b\u5b9a\u4e49\ntype logInput struct {\n    Query string `json:\"query\"`\n}\n\ntype logOutput struct {\n    Log string `json:\"log\"`\n}\n\n// \u6d41\u5f0f\u65e5\u5fd7\u67e5\u8be2\u5de5\u5177\nlogStreamTool := function.NewStreamableFunctionTool[logInput, logOutput](\n    func(input logInput) *tool.StreamReader {\n        stream := tool.NewStream(10)\n        go func() {\n            defer stream.Writer.Close()\n            for i := 0; i &lt; 5; i++ {\n                chunk := tool.StreamChunk{\n                    Content: logOutput{\n                        Log: fmt.Sprintf(\"\u65e5\u5fd7 %d: %s\", i+1, input.Query),\n                    },\n                }\n                if stream.Writer.Send(chunk, nil) {\n                    return // stream closed\n                }\n                time.Sleep(50 * time.Millisecond)\n            }\n        }()\n        return stream.Reader\n    },\n    function.WithName(\"log_stream\"),\n    function.WithDescription(\"\u6d41\u5f0f\u67e5\u8be2\u65e5\u5fd7\"),\n)\n\n// \u521b\u5efa\u591a\u5de5\u5177 Agent\nagent := llmagent.New(\n    \"multi-tool-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools([]tool.Tool{\n        calculatorTool,\n        logStreamTool,\n        duckduckgo.NewTool(),\n    }),\n)\n</code></pre>"},{"location":"zh/#mcp","title":"MCP \u5de5\u5177\u96c6\u6210","text":"<p>\u6846\u67b6\u652f\u6301\u5404\u79cd MCP \u5de5\u5177\u8c03\u7528\uff0c\u63d0\u4f9b\u591a\u79cd\u8fde\u63a5\u65b9\u5f0f\u3002\u6240\u6709 MCP \u5de5\u5177\u90fd\u901a\u8fc7\u7edf\u4e00\u7684 <code>NewMCPToolSet</code> \u51fd\u6570\u521b\u5efa\uff1a</p> <pre><code>// SSE \u8fde\u63a5\u7684 MCP \u5de5\u5177\u96c6\nsseToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"sse\",\n        ServerURL: \"https://api.example.com/mcp/sse\",\n        Headers: map[string]string{\n            \"Authorization\": \"Bearer your-token\",\n        },\n        Timeout: 10 * time.Second,\n    },\n)\n\n// Streamable HTTP \u8fde\u63a5\u7684 MCP \u5de5\u5177\u96c6\nstreamableToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"streamable_http\",\n        ServerURL: \"https://api.example.com/mcp\",\n        Timeout: 10 * time.Second,\n    },\n)\n\n// StdIO \u8fde\u63a5\u7684 MCP \u5de5\u5177\u96c6\nstdioToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"stdio\",\n        Command: \"python\",\n        Args:    []string{\"-m\", \"my_mcp_server\"},\n        Timeout: 10 * time.Second,\n    },\n)\n\nagent := llmagent.New(\n    \"mcp-agent\",\n    llmagent.WithModel(model),\n    llmagent.WithToolSets([]tool.ToolSet{sseToolSet, streamableToolSet, stdioToolSet}),\n)\n</code></pre> <p>Tool \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Tool</p>"},{"location":"zh/#codeexecutor-","title":"CodeExecutor \u6a21\u5757 - \u4ee3\u7801\u6267\u884c\u5f15\u64ce","text":"<p>CodeExecutor \u6a21\u5757\u4e3a <code>Agent</code> \u63d0\u4f9b\u4ee3\u7801\u6267\u884c\u80fd\u529b\uff0c\u652f\u6301\u5728\u672c\u5730\u73af\u5883\u6216 Docker \u5bb9\u5668\u4e2d\u6267\u884c Python\u3001Bash \u4ee3\u7801\uff0c\u4f7f <code>Agent</code> \u5177\u5907\u6570\u636e\u5206\u6790\u3001\u79d1\u5b66\u8ba1\u7b97\u3001\u811a\u672c\u81ea\u52a8\u5316\u7b49\u5b9e\u9645\u5de5\u4f5c\u80fd\u529b\u3002</p>"},{"location":"zh/#_19","title":"\u6838\u5fc3\u63a5\u53e3\u8bbe\u8ba1","text":"<pre><code>// CodeExecutor \u662f\u4ee3\u7801\u6267\u884c\u7684\u6838\u5fc3\u63a5\u53e3\ntype CodeExecutor interface {\n    ExecuteCode(context.Context, CodeExecutionInput) (CodeExecutionResult, error)\n    CodeBlockDelimiter() CodeBlockDelimiter\n}\n\n// \u4ee3\u7801\u6267\u884c\u8f93\u5165\u548c\u7ed3\u679c\ntype CodeExecutionInput struct {\n    CodeBlocks  []CodeBlock\n    ExecutionID string\n}\n\ntype CodeExecutionResult struct {\n    Output      string  // \u6267\u884c\u8f93\u51fa\n    OutputFiles []File  // \u751f\u6210\u7684\u6587\u4ef6\n}\n</code></pre>"},{"location":"zh/#_20","title":"\u4e24\u79cd\u6267\u884c\u5668\u5b9e\u73b0","text":"<p>LocalCodeExecutor - \u672c\u5730\u6267\u884c\u5668</p> <p>\u76f4\u63a5\u5728\u672c\u5730\u73af\u5883\u6267\u884c\u4ee3\u7801\uff0c\u9002\u7528\u4e8e\u5f00\u53d1\u6d4b\u8bd5\u548c\u53ef\u4fe1\u73af\u5883\uff1a</p> <pre><code>// \u521b\u5efa\u672c\u5730\u6267\u884c\u5668\nlocalExecutor := local.New(\n    local.WithWorkDir(\"/tmp/code-execution\"),\n    local.WithTimeout(30*time.Second),\n    local.WithCleanTempFiles(true),\n)\n\n// \u96c6\u6210\u5230 Agent\nagent := llmagent.New(\n    \"data-analyst\",\n    llmagent.WithModel(model),\n    llmagent.WithCodeExecutor(localExecutor), // \u96c6\u6210\u4ee3\u7801\u6267\u884c\u5668\n    llmagent.WithInstruction(\"\u4f60\u662f\u6570\u636e\u5206\u6790\u5e08\uff0c\u53ef\u4ee5\u6267\u884c Python \u4ee3\u7801\"),\n)\n</code></pre> <p>ContainerCodeExecutor - \u5bb9\u5668\u6267\u884c\u5668</p> <p>\u5728\u9694\u79bb\u7684 Docker \u5bb9\u5668\u4e2d\u6267\u884c\u4ee3\u7801\uff0c\u63d0\u4f9b\u66f4\u9ad8\u5b89\u5168\u6027\uff0c\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff1a</p> <pre><code>// \u521b\u5efa\u5bb9\u5668\u6267\u884c\u5668\ncontainerExecutor, err := container.New(\n    container.WithContainerConfig(container.Config{\n        Image: \"python:3.11-slim\",\n    }),\n    container.WithHostConfig(container.HostConfig{\n        AutoRemove:  true,\n        NetworkMode: \"none\",  // \u7f51\u7edc\u9694\u79bb\n        Resources: container.Resources{\n            Memory: 128 * 1024 * 1024,  // \u5185\u5b58\u9650\u5236\n        },\n    }),\n)\n\nagent := llmagent.New(\n    \"secure-analyst\",\n    llmagent.WithModel(model),\n    llmagent.WithCodeExecutor(containerExecutor), // \u4f7f\u7528\u5bb9\u5668\u6267\u884c\u5668\n)\n</code></pre>"},{"location":"zh/#_21","title":"\u81ea\u52a8\u4ee3\u7801\u5757\u8bc6\u522b","text":"<p>\u6846\u67b6\u81ea\u52a8\u4ece <code>Agent</code> \u56de\u590d\u4e2d\u63d0\u53d6 markdown \u4ee3\u7801\u5757\u5e76\u6267\u884c\uff1a</p> <pre><code>// Agent \u56de\u590d\u5305\u542b\u4ee3\u7801\u5757\u65f6\u4f1a\u81ea\u52a8\u6267\u884c\uff1a\n// ```python\n// import statistics\n// data = [1, 2, 3, 4, 5]\n// print(f\"\u5e73\u5747\u503c: {statistics.mean(data)}\")\n// ```\n//\n// \u652f\u6301 Python \u548c Bash \u4ee3\u7801\uff1a\n// ```bash\n// echo \"\u5f53\u524d\u65f6\u95f4: $(date)\"\n// ```\n</code></pre>"},{"location":"zh/#_22","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>// \u6570\u636e\u5206\u6790 Agent\ndataAgent := llmagent.New(\n    \"data-scientist\",\n    llmagent.WithModel(model),\n    llmagent.WithCodeExecutor(local.New()),\n    llmagent.WithInstruction(\"\u4f60\u662f\u6570\u636e\u79d1\u5b66\u5bb6\uff0c\u4f7f\u7528 Python \u6807\u51c6\u5e93\u8fdb\u884c\u6570\u636e\u5206\u6790\"),\n)\n\n// \u7528\u6237\u63d0\u95ee\uff0cAgent \u81ea\u52a8\u751f\u6210\u5e76\u6267\u884c\u4ee3\u7801\nrunner := runner.NewRunner(\"analysis\", dataAgent)\nevents, _ := runner.Run(ctx, userID, sessionID, \n    model.NewUserMessage(\"\u5206\u6790\u6570\u636e: 23, 45, 12, 67, 34, 89\"))\n\n// Agent \u81ea\u52a8\uff1a\n// 1. \u751f\u6210 Python \u5206\u6790\u4ee3\u7801\n// 2. \u6267\u884c\u4ee3\u7801\u83b7\u53d6\u7ed3\u679c  \n// 3. \u89e3\u8bfb\u5206\u6790\u7ed3\u679c\n</code></pre> <p>CodeExecutor \u6a21\u5757\u4f7f <code>Agent</code> \u4ece\u7eaf\u5bf9\u8bdd\u5347\u7ea7\u4e3a\u5177\u5907\u5b9e\u9645\u8ba1\u7b97\u80fd\u529b\u7684\u667a\u80fd\u52a9\u624b\uff0c\u652f\u6301\u6570\u636e\u5206\u6790\u3001\u811a\u672c\u81ea\u52a8\u5316\u3001\u79d1\u5b66\u8ba1\u7b97\u7b49\u5e94\u7528\u573a\u666f\u3002</p>"},{"location":"zh/#runner-agent","title":"Runner\u6a21\u5757 - Agent\u6267\u884c\u5668","text":"<p>Runner \u6a21\u5757\u662f <code>Agent</code> \u7684\u6267\u884c\u5668\u548c\u8fd0\u884c\u73af\u5883\uff0c\u8d1f\u8d23 <code>Agent</code> \u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u3001\u4f1a\u8bdd\u72b6\u6001\u7ef4\u62a4\u548c\u4e8b\u4ef6\u6d41\u5904\u7406\u3002</p>"},{"location":"zh/#_23","title":"\u6838\u5fc3\u63a5\u53e3","text":"<pre><code>type Runner interface {\n    Run(\n        ctx context.Context,\n        userID string,               // \u7528\u6237\u6807\u8bc6\n        sessionID string,            // \u4f1a\u8bdd\u6807\u8bc6\n        message model.Message,       // \u8f93\u5165\u6d88\u606f\n        runOpts ...agent.RunOptions, // \u8fd0\u884c\u9009\u9879\n    ) (&lt;-chan *event.Event, error)   // \u8fd4\u56de\u4e8b\u4ef6\u6d41\n}\n</code></pre>"},{"location":"zh/#_24","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>// \u6b65\u9aa41: \u521b\u5efa Agent\nagent := llmagent.New(\n    \"customer-service-agent\",\n    llmagent.WithModel(openai.New(\"gpt-4o-mini\")),\n    llmagent.WithInstruction(\"\u4f60\u662f\u4e13\u4e1a\u7684\u5ba2\u670d\u52a9\u624b\"),\n)\n\n// \u6b65\u9aa4 2: \u521b\u5efa Runner \u5e76\u7ed1\u5b9a Agent\nrunner := runner.NewRunner(\n    \"customer-service-app\",  // \u5e94\u7528\u540d\u79f0\n    agent,                   // \u7ed1\u5b9a Agent\n)\n\n// \u6b65\u9aa4 3: \u6267\u884c\u5bf9\u8bdd\nevents, err := runner.Run(\n    context.Background(),\n    \"user-001\",             // \u7528\u6237 ID\n    \"session-001\",          // \u4f1a\u8bdd ID\n    model.NewUserMessage(\"\u4f60\u597d\uff0c\u6211\u60f3\u54a8\u8be2\u4ea7\u54c1\u4fe1\u606f\"),\n)\n\n// \u6b65\u9aa4 4: \u5904\u7406\u4e8b\u4ef6\u6d41\nfor event := range events {\n    if event.Object == \"agent.message\" &amp;&amp; len(event.Choices) &gt; 0 {\n        fmt.Printf(\"Agent: %s\\n\", event.Choices[0].Message.Content)\n    }\n}\n</code></pre> <p>Runner \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Runner</p>"},{"location":"zh/#invocation-agent","title":"Invocation - Agent \u6267\u884c\u4e0a\u4e0b\u6587","text":"<p>Invocation \u662f <code>Agent</code> \u6267\u884c\u7684\u6838\u5fc3\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u5c01\u88c5\u4e86\u5355\u6b21\u8c03\u7528\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\u548c\u72b6\u6001\u3002\u5b83\u4f5c\u4e3a <code>Agent</code>.Run() \u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u652f\u6301\u4e8b\u4ef6\u8ffd\u8e2a\u3001\u72b6\u6001\u7ba1\u7406\u548c <code>Agent</code> \u95f4\u534f\u4f5c\u3002</p>"},{"location":"zh/#_25","title":"\u6838\u5fc3\u7ed3\u6784","text":"<pre><code>type Invocation struct {\n    Agent             Agent                    // \u8981\u8c03\u7528\u7684 Agent \u5b9e\u4f8b\n    AgentName         string                   // Agent \u540d\u79f0\n    InvocationID      string                   // \u8c03\u7528\u552f\u4e00\u6807\u8bc6\n    Branch            string                   // \u5206\u652f\u6807\u8bc6\u7b26\uff08\u591a Agent \u534f\u4f5c\uff09\n    EndInvocation     bool                     // \u662f\u5426\u7ed3\u675f\u8c03\u7528\n    Session           *session.Session         // \u4f1a\u8bdd\u72b6\u6001\n    Model             model.Model              // \u8bed\u8a00\u6a21\u578b\n    Message           model.Message            // \u7528\u6237\u6d88\u606f\n    EventCompletionCh &lt;-chan string            // \u4e8b\u4ef6\u5b8c\u6210\u4fe1\u53f7\n    RunOptions        RunOptions               // \u8fd0\u884c\u9009\u9879\n    TransferInfo      *TransferInfo            // Agent \u8f6c\u79fb\u4fe1\u606f\n    AgentCallbacks    *Callbacks               // Agent \u56de\u8c03\n    ModelCallbacks    *model.Callbacks         // \u6a21\u578b\u56de\u8c03\n    ToolCallbacks     *tool.Callbacks          // \u5de5\u5177\u56de\u8c03\n}\n\ntype TransferInfo struct {\n    TargetAgentName string // \u76ee\u6807 Agent \u540d\u79f0\n    Message         string // \u8f6c\u79fb\u6d88\u606f\n    EndInvocation   bool   // \u8f6c\u79fb\u540e\u662f\u5426\u7ed3\u675f\n}\n</code></pre>"},{"location":"zh/#_26","title":"\u4e3b\u8981\u529f\u80fd","text":"<ul> <li>\u6267\u884c\u4e0a\u4e0b\u6587\uff1a<code>Agent</code> \u6807\u8bc6\u3001\u8c03\u7528\u8ffd\u8e2a\u3001\u5206\u652f\u63a7\u5236</li> <li>\u72b6\u6001\u7ba1\u7406\uff1a\u4f1a\u8bdd\u5386\u53f2\u3001\u6a21\u578b\u914d\u7f6e\u3001\u6d88\u606f\u4f20\u9012</li> <li>\u4e8b\u4ef6\u63a7\u5236\uff1a\u5f02\u6b65\u901a\u4fe1\u3001\u6267\u884c\u9009\u9879</li> <li><code>Agent</code> \u534f\u4f5c\uff1a\u63a7\u5236\u6743\u8f6c\u79fb\u3001\u56de\u8c03\u673a\u5236</li> </ul>"},{"location":"zh/#_27","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>// \u57fa\u7840\u8c03\u7528\ninvocation := &amp;agent.Invocation{\n    AgentName:    \"assistant\",\n    InvocationID: \"inv-001\",\n    Model:        openai.New(\"gpt-4o-mini\"),\n    Message:      model.NewUserMessage(\"\u4f60\u597d\"),\n    Session:      &amp;session.Session{ID: \"session-001\"},\n}\nevents, err := agent.Run(ctx, invocation)\n\n// Runner \u81ea\u52a8\u521b\u5efa\uff08\u63a8\u8350\uff09\nrunner := runner.NewRunner(\"my-app\", agent)\nevents, err := runner.Run(ctx, userID, sessionID, userMessage)\n\n// \u4e0a\u4e0b\u6587\u83b7\u53d6\ninvocation, ok := agent.InvocationFromContext(ctx)\n</code></pre>"},{"location":"zh/#_28","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ul> <li>\u4f18\u5148\u4f7f\u7528Runner\u81ea\u52a8\u521b\u5efaInvocation</li> <li>\u6846\u67b6\u4f1a\u81ea\u52a8\u586b\u5145Model\u3001Callbacks\u7b49\u5b57\u6bb5</li> <li>\u4f7f\u7528transfer\u5de5\u5177\u5b9e\u73b0Agent\u8f6c\u79fb\uff0c\u907f\u514d\u76f4\u63a5\u8bbe\u7f6eTransferInfo</li> </ul>"},{"location":"zh/#memory-","title":"Memory \u6a21\u5757 - \u667a\u80fd\u8bb0\u5fc6\u7cfb\u7edf","text":"<p>Memory \u6a21\u5757\u4e3a <code>Agent</code> \u63d0\u4f9b\u6301\u4e45\u5316\u7684\u8bb0\u5fc6\u80fd\u529b\uff0c\u4f7f <code>Agent</code> \u80fd\u591f\u8de8\u4f1a\u8bdd\u8bb0\u4f4f\u548c\u68c0\u7d22\u7528\u6237\u4fe1\u606f\uff0c\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u4ea4\u4e92\u4f53\u9a8c\u3002</p>"},{"location":"zh/#_29","title":"\u5de5\u4f5c\u539f\u7406","text":"<p><code>Agent</code> \u901a\u8fc7\u5185\u7f6e\u7684\u8bb0\u5fc6\u5de5\u5177\u81ea\u52a8\u8bc6\u522b\u548c\u5b58\u50a8\u91cd\u8981\u4fe1\u606f\uff0c\u652f\u6301\u4e3b\u9898\u6807\u7b7e\u5206\u7c7b\u7ba1\u7406\uff0c\u5e76\u5728\u9700\u8981\u65f6\u667a\u80fd\u68c0\u7d22\u76f8\u5173\u8bb0\u5fc6\u3002\u901a\u8fc7 AppName+UserID \u5b9e\u73b0\u591a\u79df\u6237\u9694\u79bb\uff0c\u786e\u4fdd\u7528\u6237\u6570\u636e\u5b89\u5168\u3002</p>"},{"location":"zh/#_30","title":"\u5e94\u7528\u573a\u666f","text":"<p>\u9002\u7528\u4e8e\u4e2a\u4eba\u52a9\u624b\u3001\u5ba2\u670d\u673a\u5668\u4eba\u3001\u6559\u80b2\u8f85\u5bfc\u3001\u9879\u76ee\u534f\u4f5c\u7b49\u9700\u8981\u8de8\u4f1a\u8bdd\u8bb0\u5fc6\u7528\u6237\u4fe1\u606f\u7684\u573a\u666f\uff0c\u5982\u8bb0\u4f4f\u7528\u6237\u504f\u597d\u3001\u8ffd\u8e2a\u95ee\u9898\u89e3\u51b3\u8fdb\u5ea6\u3001\u4fdd\u5b58\u5b66\u4e60\u8ba1\u5212\u7b49\u3002</p>"},{"location":"zh/#_31","title":"\u6838\u5fc3\u63a5\u53e3","text":"<pre><code>type Service interface {\n    // \u6dfb\u52a0\u65b0\u8bb0\u5fc6\n    AddMemory(ctx context.Context, userKey UserKey, memory string, topics []string) error\n    // \u66f4\u65b0\u73b0\u6709\u8bb0\u5fc6\n    UpdateMemory(ctx context.Context, memoryKey Key, memory string, topics []string) error\n    // \u5220\u9664\u6307\u5b9a\u8bb0\u5fc6\n    DeleteMemory(ctx context.Context, memoryKey Key) error\n    // \u6e05\u7a7a\u7528\u6237\u6240\u6709\u8bb0\u5fc6\n    ClearMemories(ctx context.Context, userKey UserKey) error\n    // \u8bfb\u53d6\u6700\u8fd1\u8bb0\u5fc6\n    ReadMemories(ctx context.Context, userKey UserKey, limit int) ([]*Entry, error)\n    // \u641c\u7d22\u8bb0\u5fc6\n    SearchMemories(ctx context.Context, userKey UserKey, query string) ([]*Entry, error)\n    // \u83b7\u53d6\u8bb0\u5fc6\u5de5\u5177\n    Tools() []tool.Tool\n}\n\n// \u6570\u636e\u7ed3\u6784\ntype Entry struct {\n    ID        string    `json:\"id\"`\n    AppName   string    `json:\"app_name\"`\n    UserID    string    `json:\"user_id\"`\n    Memory    *Memory   `json:\"memory\"`\n    CreatedAt time.Time `json:\"created_at\"`\n    UpdatedAt time.Time `json:\"updated_at\"`\n}\n\ntype Memory struct {\n    Memory      string     `json:\"memory\"`\n    Topics      []string   `json:\"topics,omitempty\"`\n    LastUpdated *time.Time `json:\"last_updated,omitempty\"`\n}\n</code></pre>"},{"location":"zh/#_32","title":"\u5feb\u901f\u96c6\u6210","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n)\n\n// \u521b\u5efa\u8bb0\u5fc6\u670d\u52a1\nmemoryService := inmemory.NewMemoryService()\n\n// \u521b\u5efa\u5177\u5907\u8bb0\u5fc6\u80fd\u529b\u7684 Agent\nagent := llmagent.New(\n    \"memory-bot\",\n    llmagent.WithModel(model),\n    llmagent.WithMemory(memoryService), // \u81ea\u52a8\u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\n)\n</code></pre>"},{"location":"zh/#_33","title":"\u5185\u7f6e\u8bb0\u5fc6\u5de5\u5177","text":"\u5de5\u5177\u540d\u79f0 \u9ed8\u8ba4\u72b6\u6001 \u529f\u80fd\u63cf\u8ff0 <code>memory_add</code> \u2705 \u542f\u7528 \u6dfb\u52a0\u65b0\u7684\u8bb0\u5fc6\u6761\u76ee <code>memory_update</code> \u2705 \u542f\u7528 \u66f4\u65b0\u73b0\u6709\u8bb0\u5fc6\u5185\u5bb9 <code>memory_search</code> \u2705 \u542f\u7528 \u6839\u636e\u5173\u952e\u8bcd\u641c\u7d22\u8bb0\u5fc6 <code>memory_load</code> \u2705 \u542f\u7528 \u52a0\u8f7d\u6700\u8fd1\u7684\u8bb0\u5fc6\u8bb0\u5f55 <code>memory_delete</code> \u274c \u7981\u7528 \u5220\u9664\u6307\u5b9a\u8bb0\u5fc6\u6761\u76ee <code>memory_clear</code> \u274c \u7981\u7528 \u6e05\u7a7a\u7528\u6237\u6240\u6709\u8bb0\u5fc6"},{"location":"zh/#_34","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>// Agent \u4f1a\u81ea\u52a8\u8c03\u7528\u8bb0\u5fc6\u5de5\u5177\uff1a\n\n// \u8bb0\u5f55\u4fe1\u606f: \"\u6211\u53eb\u5f20\u4e09\uff0c\u4f4f\u5728\u5317\u4eac\"\n// \u2192 memory_add(\"\u5f20\u4e09\u4f4f\u5728\u5317\u4eac\", [\"\u4e2a\u4eba\u4fe1\u606f\"])\n\n// \u67e5\u8be2\u4fe1\u606f: \"\u6211\u4f4f\u5728\u54ea\u91cc\uff1f\"  \n// \u2192 memory_search(\"\u4f4f\u5740\") \u2192 \u8fd4\u56de\u76f8\u5173\u8bb0\u5fc6\n\n// \u66f4\u65b0\u4fe1\u606f: \"\u6211\u642c\u5230\u4e0a\u6d77\u4e86\"\n// \u2192 memory_update(id, \"\u5f20\u4e09\u4f4f\u5728\u4e0a\u6d77\", [\"\u4e2a\u4eba\u4fe1\u606f\"])\n</code></pre> <p>Memory \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Memory</p>"},{"location":"zh/#session-","title":"Session \u6a21\u5757 - \u4f1a\u8bdd\u7ba1\u7406\u7cfb\u7edf","text":"<p>Session \u6a21\u5757\u63d0\u4f9b\u4e86\u4f1a\u8bdd\u7ba1\u7406\u529f\u80fd\uff0c\u7528\u4e8e\u7ef4\u62a4Agent\u4e0e\u7528\u6237\u4ea4\u4e92\u8fc7\u7a0b\u4e2d\u7684\u5bf9\u8bdd\u5386\u53f2\u548c\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u4f1a\u8bdd\u7ba1\u7406\u6a21\u5757\u652f\u6301\u591a\u79cd\u5b58\u50a8\u540e\u7aef\uff0c\u5305\u62ec\u5185\u5b58\u5b58\u50a8\u548c Redis \u5b58\u50a8\uff0c\u540e\u7eed\u4f1a\u6839\u636e\u7528\u6237\u9700\u6c42\u8865\u9f50 MySql\u3001PgSql \u7b49\u5b58\u50a8\u540e\u7aef\uff0c\u4e3aAgent\u5e94\u7528\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u72b6\u6001\u6301\u4e45\u5316\u80fd\u529b\u3002</p>"},{"location":"zh/#_35","title":"\u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u4f1a\u8bdd\u6301\u4e45\u5316\uff1a\u4fdd\u5b58\u5b8c\u6574\u7684\u5bf9\u8bdd\u5386\u53f2\u548c\u4e0a\u4e0b\u6587</li> <li>\u591a\u5b58\u50a8\u540e\u7aef\uff1a\u652f\u6301\u5185\u5b58\u5b58\u50a8\u548c Redis \u5b58\u50a8</li> <li>\u4e8b\u4ef6\u8ffd\u8e2a\uff1a\u5b8c\u6574\u8bb0\u5f55\u4f1a\u8bdd\u4e2d\u7684\u6240\u6709\u4ea4\u4e92\u4e8b\u4ef6</li> </ul>"},{"location":"zh/#_36","title":"\u4f1a\u8bdd\u5c42\u6b21\u7ed3\u6784","text":"<pre><code>Application (\u5e94\u7528)\n\u251c\u2500\u2500 User Sessions (\u7528\u6237\u4f1a\u8bdd)\n\u2502   \u251c\u2500\u2500 Session 1 (\u4f1a\u8bdd1)\n\u2502   \u2502   \u251c\u2500\u2500 Session Data (\u4f1a\u8bdd\u6570\u636e)\n\u2502   \u2502   \u2514\u2500\u2500 Events (\u4e8b\u4ef6\u5217\u8868)\n\u2502   \u2514\u2500\u2500 Session 2 (\u4f1a\u8bdd2)\n\u2502       \u251c\u2500\u2500 Session Data (\u4f1a\u8bdd\u6570\u636e)\n\u2502       \u2514\u2500\u2500 Events (\u4e8b\u4ef6\u5217\u8868)\n\u2514\u2500\u2500 App Data (\u5e94\u7528\u6570\u636e)\n</code></pre>"},{"location":"zh/#_37","title":"\u6838\u5fc3\u63a5\u53e3","text":"<pre><code>// Service\u5b9a\u4e49\u4f1a\u8bdd\u670d\u52a1\u7684\u6838\u5fc3\u63a5\u53e3\ntype Service interface {\n    // CreateSession creates a new session.\n    CreateSession(ctx context.Context, key Key, state StateMap, options ...Option) (*Session, error)\n\n    // GetSession gets a session.\n    GetSession(ctx context.Context, key Key, options ...Option) (*Session, error)\n\n    // ListSessions lists all sessions by user scope of session key.\n    ListSessions(ctx context.Context, userKey UserKey, options ...Option) ([]*Session, error)\n\n    // DeleteSession deletes a session.\n    DeleteSession(ctx context.Context, key Key, options ...Option) error\n\n    // AppendEvent appends an event to a session.\n    AppendEvent(ctx context.Context, session *Session, event *event.Event, options ...Option) error\n\n    // Close closes the service.\n    Close() error\n}\n</code></pre>"},{"location":"zh/#_38","title":"\u5b58\u50a8\u540e\u7aef\u652f\u6301","text":"<pre><code>// \u5185\u5b58\u5b58\u50a8\uff08\u9002\u7528\u4e8e\u5f00\u53d1\u6d4b\u8bd5\uff09\nsessionService := inmemory.NewSessionService()\n\n// Redis\u5b58\u50a8\uff08\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff09\nsessionService, err := redis.NewService(\n    redis.WithURL(\"redis://localhost:6379/0\"),\n)\n</code></pre>"},{"location":"zh/#runner","title":"\u4e0e Runner \u96c6\u6210","text":"<pre><code>// \u521b\u5efaRunner\u5e76\u914d\u7f6e\u4f1a\u8bdd\u670d\u52a1\nrunner := runner.NewRunner(\n    \"my-agent\",\n    llmAgent,\n    runner.WithSessionService(sessionService), // \u96c6\u6210\u4f1a\u8bdd\u7ba1\u7406\n)\n\n// \u4f7f\u7528Runner\u8fdb\u884c\u591a\u8f6e\u5bf9\u8bdd\neventChan, err := runner.Run(ctx, userID, sessionID, userMessage)\n</code></pre> <p>Session \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Session</p>"},{"location":"zh/#knowledge-","title":"Knowledge \u6a21\u5757 - \u77e5\u8bc6\u7ba1\u7406\u7cfb\u7edf","text":"<p>Knowledge \u6a21\u5757\u662f trpc-agent-go \u4e2d\u7684\u77e5\u8bc6\u7ba1\u7406\u6838\u5fc3\u7ec4\u4ef6\uff0c\u5b83\u5b9e\u73b0\u4e86\u5b8c\u6574\u7684 RAG\uff08\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff09\u80fd\u529b\u3002\u8be5\u6a21\u5757\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u57fa\u7840\u7684\u77e5\u8bc6\u5b58\u50a8\u548c\u68c0\u7d22\u529f\u80fd\uff0c\u8fd8\u652f\u6301\u591a\u79cd\u9ad8\u7ea7\u7279\u6027\uff1a</p> <ol> <li> <p>\u77e5\u8bc6\u6e90\u7ba1\u7406</p> </li> <li> <p>\u652f\u6301\u591a\u79cd\u683c\u5f0f\u7684\u672c\u5730\u6587\u4ef6\uff08Markdown\u3001PDF\u3001TXT \u7b49\uff09</p> </li> <li>\u652f\u6301\u76ee\u5f55\u6279\u91cf\u5bfc\u5165\uff0c\u81ea\u52a8\u5904\u7406\u5b50\u76ee\u5f55</li> <li>\u652f\u6301\u7f51\u9875\u6293\u53d6\uff0c\u53ef\u76f4\u63a5\u4ece URL \u52a0\u8f7d\u5185\u5bb9</li> <li> <p>\u667a\u80fd\u8bc6\u522b\u8f93\u5165\u7c7b\u578b\uff0c\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684\u5904\u7406\u5668</p> </li> <li> <p>\u5411\u91cf\u5b58\u50a8</p> </li> <li> <p>\u5185\u5b58\u5b58\u50a8\uff1a\u9002\u7528\u4e8e\u5f00\u53d1\u548c\u5c0f\u89c4\u6a21\u6d4b\u8bd5</p> </li> <li>PostgreSQL + pgvector\uff1a\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff0c\u652f\u6301\u6301\u4e45\u5316</li> <li> <p>TcVector\uff1a\u4e91\u539f\u751f\u89e3\u51b3\u65b9\u6848\uff0c\u9002\u5408\u5927\u89c4\u6a21\u90e8\u7f72</p> </li> <li> <p>\u6587\u672c\u5d4c\u5165</p> </li> <li> <p>\u9ed8\u8ba4\u96c6\u6210 OpenAI \u6587\u672c\u5d4c\u5165\u6a21\u578b</p> </li> <li>\u652f\u6301\u81ea\u5b9a\u4e49\u5d4c\u5165\u6a21\u578b\u63a5\u5165</li> <li> <p>\u5f02\u6b65\u6279\u5904\u7406\u4f18\u5316\u6027\u80fd</p> </li> <li> <p>\u667a\u80fd\u68c0\u7d22</p> </li> <li> <p>\u57fa\u4e8e\u8bed\u4e49\u7684\u76f8\u4f3c\u5ea6\u641c\u7d22</p> </li> <li>\u652f\u6301\u591a\u8f6e\u5bf9\u8bdd\u5386\u53f2\u4e0a\u4e0b\u6587</li> <li>\u7ed3\u679c\u91cd\u6392\u5e8f\u63d0\u5347\u76f8\u5173\u6027</li> </ol>"},{"location":"zh/#_39","title":"\u6838\u5fc3\u63a5\u53e3\u8bbe\u8ba1","text":"<pre><code>// Knowledge \u662f\u77e5\u8bc6\u7ba1\u7406\u7684\u4e3b\u8981\u63a5\u53e3\ntype Knowledge interface {\n    // Search \u6267\u884c\u8bed\u4e49\u641c\u7d22\u5e76\u8fd4\u56de\u76f8\u5173\u7ed3\u679c\n    Search(ctx context.Context, req *SearchRequest) (*SearchResult, error)\n}\n\n// SearchRequest \u4ee3\u8868\u5e26\u4e0a\u4e0b\u6587\u7684\u641c\u7d22\u8bf7\u6c42\ntype SearchRequest struct {\n    Query     string                // \u641c\u7d22\u67e5\u8be2\u6587\u672c\n    History   []ConversationMessage // \u5bf9\u8bdd\u5386\u53f2\u7528\u4e8e\u4e0a\u4e0b\u6587\n    UserID    string                // \u7528\u6237\u6807\u8bc6\n    SessionID string                // \u4f1a\u8bdd\u6807\u8bc6\n}\n\n// SearchResult \u4ee3\u8868\u77e5\u8bc6\u641c\u7d22\u7684\u7ed3\u679c\ntype SearchResult struct {\n    Document *document.Document // \u5339\u914d\u7684\u6587\u6863\n    Score    float64            // \u76f8\u5173\u6027\u5206\u6570\n    Text     string             // \u6587\u6863\u5185\u5bb9\n}\n</code></pre>"},{"location":"zh/#agent_4","title":"\u4e0eAgent\u96c6\u6210","text":"<pre><code>// \u521b\u5efa\u77e5\u8bc6\u5e93\nkb := knowledge.New(\n    knowledge.WithVectorStore(inmemory.New()),\n    knowledge.WithEmbedder(openai.New()),\n    knowledge.WithSources([]source.Source{\n        file.New([]string{\"./docs/llm.md\"}),\n        url.New([]string{\"https://wikipedia.org/wiki/LLM\"}),\n    }),\n)\n\n// \u52a0\u8f7d\u77e5\u8bc6\u5e93\nkb.Load(ctx)\n\n// \u521b\u5efa\u5e26\u77e5\u8bc6\u5e93\u7684 Agent\nagent := llmagent.New(\n    \"knowledge-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithKnowledge(kb), // \u81ea\u52a8\u6dfb\u52a0 knowledge_search \u5de5\u5177\n    llmagent.WithInstruction(\"\u4f7f\u7528 knowledge_search \u5de5\u5177\u641c\u7d22\u76f8\u5173\u8d44\u6599\u6765\u56de\u7b54\u95ee\u9898\"),\n)\n</code></pre> <p>Knowledge \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Knowledge</p>"},{"location":"zh/#observability-","title":"Observability \u6a21\u5757 - \u53ef\u89c2\u6d4b\u6027\u7cfb\u7edf","text":"<p>Observability \u6a21\u5757\u96c6\u6210 OpenTelemetry \u6807\u51c6\uff0c\u5728 <code>Agent</code> \u6267\u884c\u8fc7\u7a0b\u4e2d\u81ea\u52a8\u8bb0\u5f55\u8be6\u7ec6\u7684 telemetry \u6570\u636e\uff0c\u652f\u6301\u5168\u94fe\u8def\u8ffd\u8e2a\u548c\u6027\u80fd\u76d1\u63a7\u3002\u6846\u67b6\u590d\u7528 OpenTelemetry \u6807\u51c6\u63a5\u53e3\uff0c\u65e0\u81ea\u5b9a\u4e49\u62bd\u8c61\u5c42\u3002</p>"},{"location":"zh/#_40","title":"\u5feb\u901f\u542f\u52a8","text":"<pre><code>import (\n    agentmetric \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\"\n    agenttrace \"trpc.group/trpc-go/trpc-agent-go/telemetry/trace\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // \u542f\u52a8 telemetry \u6536\u96c6\n    cleanupTrace, _ := agenttrace.Start(ctx)   // \u9ed8\u8ba4 localhost:4317\n    cleanupMetric, _ := agentmetric.Start(ctx) // \u9ed8\u8ba4 localhost:4318\n    defer cleanupTrace()\n    defer cleanupMetric()\n\n    // Agent \u6267\u884c\u8fc7\u7a0b\u5c06\u81ea\u52a8\u8bb0\u5f55 telemetry \u6570\u636e\n    agent := llmagent.New(\"assistant\", \n        llmagent.WithModel(openai.New(\"gpt-4o-mini\")))\n\n    runner := runner.NewRunner(\"app\", agent)\n    events, _ := runner.Run(ctx, \"user-001\", \"session-001\", \n        model.NewUserMessage(\"\u4f60\u597d\"))\n}\n</code></pre>"},{"location":"zh/#trace","title":"\u81ea\u52a8\u8bb0\u5f55\u7684Trace\u94fe\u8def","text":"<p>\u6846\u67b6\u81ea\u52a8\u521b\u5efa\u4ee5\u4e0b Span \u5c42\u6b21\u7ed3\u6784\uff1a</p> <pre><code>invocation                             # \u5bf9\u8bdd\u9876\u5c42span\n\u251c\u2500\u2500 call_llm                           # LLM API\u8c03\u7528\n\u251c\u2500\u2500 execute_tool calculator            # \u5de5\u5177\u8c03\u7528\n\u251c\u2500\u2500 execute_tool search                # \u5de5\u5177\u8c03\u7528\n\u2514\u2500\u2500 execute_tool (merged)              # \u5e76\u884c\u5de5\u5177\u8c03\u7528\u5408\u5e76\n\n# GraphAgent \u6267\u884c\u94fe\u8def\ninvocation\n\u2514\u2500\u2500 execute_graph\n    \u251c\u2500\u2500 execute_node preprocess\n    \u251c\u2500\u2500 execute_node analyze\n    \u2502   \u2514\u2500\u2500 run_model\n    \u2514\u2500\u2500 execute_node format\n</code></pre>"},{"location":"zh/#span","title":"\u4e3b\u8981 Span \u5c5e\u6027","text":"<ul> <li>\u901a\u7528\u5c5e\u6027\uff1a<code>invocation_id</code>, <code>session_id</code>, <code>event_id</code></li> <li>LLM \u8c03\u7528\uff1a<code>gen_ai.request.model</code>, <code>llm_request/response</code> JSON</li> <li>\u5de5\u5177\u8c03\u7528\uff1a<code>gen_ai.tool.name</code>, <code>tool_call_args</code>, <code>tool_response</code> JSON  </li> <li>Graph \u8282\u70b9\uff1a<code>node_id</code>, <code>node_name</code>, <code>node_description</code></li> </ul>"},{"location":"zh/#_41","title":"\u914d\u7f6e\u9009\u9879","text":"<p>\u81ea\u5b9a\u4e49\u7aef\u70b9\u914d\u7f6e <pre><code>cleanupTrace, _ := agenttrace.Start(ctx,\n    agenttrace.WithEndpoint(\"otel-collector:4317\"))\n</code></pre></p> <p>\u81ea\u5b9a\u4e49 Metrics <pre><code>counter, _ := metric.Meter.Int64Counter(\"agent.requests.total\")\ncounter.Add(ctx, 1, metric.WithAttributes(\n    attribute.String(\"agent.name\", \"assistant\")))\n</code></pre></p> <p>Observability \u6a21\u5757\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Observability</p>"},{"location":"zh/#debug-server-adk-web","title":"Debug Server - ADK Web \u8c03\u8bd5\u670d\u52a1\u5668","text":"<p>Debug Server \u63d0\u4f9b HTTP \u8c03\u8bd5\u670d\u52a1\uff0c\u517c\u5bb9 ADK Web UI\uff0c\u652f\u6301 <code>Agent</code> \u6267\u884c\u7684\u53ef\u89c6\u5316\u8c03\u8bd5\u548c\u5b9e\u65f6\u76d1\u63a7\u3002</p>"},{"location":"zh/#_42","title":"\u5feb\u901f\u542f\u52a8","text":"<pre><code>// \u6b65\u9aa4 1: \u51c6\u5907 Agent \u5b9e\u4f8b\nagents := map[string]agent.`Agent`{\n    \"chat-assistant\": llmagent.New(\n        \"chat-assistant\",\n        llmagent.WithModel(openai.New(\"gpt-4o-mini\")),\n        llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\"),\n    ),\n}\n\n// \u6b65\u9aa4 2: \u521b\u5efa Debug Server\ndebugServer := debug.New(agents)\n\n// \u6b65\u9aa4 3: \u542f\u52a8 HTTP \u670d\u52a1\u5668\nhttp.Handle(\"/\", debugServer.Handler())\nlog.Fatal(http.ListenAndServe(\":8080\", nil))\n</code></pre>"},{"location":"zh/#_43","title":"\u914d\u7f6e\u9009\u9879","text":"<pre><code>// \u53ef\u9009\u914d\u7f6e\ndebugServer := debug.New(agents,\n    debug.WithSessionService(redisSessionService), // \u81ea\u5b9a\u4e49\u4f1a\u8bdd\u5b58\u50a8\n    debug.WithRunnerOptions(                       // Runner \u989d\u5916\u914d\u7f6e\n        runner.WithObserver(observer),\n    ),\n)\n</code></pre> <p>Debug Server \u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Debug</p>"},{"location":"zh/#callbacks-","title":"Callbacks \u6a21\u5757 - \u56de\u8c03\u673a\u5236","text":"<p>Callbacks \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u56de\u8c03\u673a\u5236\uff0c\u5141\u8bb8\u5728 <code>Agent</code> \u6267\u884c\u3001\u6a21\u578b\u63a8\u7406\u548c\u5de5\u5177\u8c03\u7528\u7684\u5173\u952e\u8282\u70b9\u8fdb\u884c\u62e6\u622a\u548c\u5904\u7406\u3002\u901a\u8fc7\u56de\u8c03\u673a\u5236\uff0c\u53ef\u4ee5\u5b9e\u73b0\u65e5\u5fd7\u8bb0\u5f55\u3001\u6027\u80fd\u76d1\u63a7\u3001\u5185\u5bb9\u5ba1\u6838\u7b49\u529f\u80fd\u3002</p>"},{"location":"zh/#_44","title":"\u56de\u8c03\u7c7b\u578b","text":"<ol> <li>ModelCallbacks\uff08\u6a21\u578b\u56de\u8c03\uff09 <pre><code>// \u521b\u5efa\u6a21\u578b\u56de\u8c03\nmodelCallbacks := model.NewCallbacks().\n    RegisterBeforeModel(func(ctx context.Context, req *model.Request) (*model.Response, error) {\n        // \u6a21\u578b\u8c03\u7528\u524d\u7684\u5904\u7406\n        fmt.Printf(\"\ud83d\udd35 BeforeModel: model=%s, query=%s\\n\", \n            req.Model, req.LastUserMessage())\n        return nil, nil\n    }).\n    RegisterAfterModel(func(ctx context.Context, req *model.Request, \n        resp *model.Response, err error) (*model.Response, error) {\n        // \u6a21\u578b\u8c03\u7528\u540e\u7684\u5904\u7406\n        fmt.Printf(\"\ud83d\udfe3 AfterModel: model=%s completed\\n\", req.Model)\n        return nil, nil\n    })\n</code></pre></li> <li>BeforeModel\uff1a\u6a21\u578b\u63a8\u7406\u524d\u89e6\u53d1\uff0c\u53ef\u7528\u4e8e\u8f93\u5165\u62e6\u622a\u3001\u65e5\u5fd7\u8bb0\u5f55</li> <li> <p>AfterModel\uff1a\u6bcf\u4e2a\u8f93\u51fa\u5757\u540e\u89e6\u53d1\uff0c\u53ef\u7528\u4e8e\u5185\u5bb9\u5ba1\u6838\u3001\u7ed3\u679c\u5904\u7406</p> </li> <li> <p>ToolCallbacks\uff08\u5de5\u5177\u56de\u8c03\uff09 <pre><code>// \u521b\u5efa\u5de5\u5177\u56de\u8c03\ntoolCallbacks := tool.NewCallbacks().\n    RegisterBeforeTool(func(ctx context.Context, name string, \n        decl *tool.Declaration, args []byte) (any, error) {\n        // \u5de5\u5177\u8c03\u7528\u524d\u7684\u5904\u7406\n        fmt.Printf(\"\ud83d\udfe0 BeforeTool: tool=%s, args=%s\\n\", name, args)\n        return nil, nil\n    }).\n    RegisterAfterTool(func(ctx context.Context, name string,\n        decl *tool.Declaration, args []byte, \n        result any, err error) (any, error) {\n        // \u5de5\u5177\u8c03\u7528\u540e\u7684\u5904\u7406\n        fmt.Printf(\"\ud83d\udfe4 AfterTool: tool=%s completed\\n\", name)\n        return nil, nil\n    })\n</code></pre></p> </li> <li>BeforeTool\uff1a\u5de5\u5177\u8c03\u7528\u524d\u89e6\u53d1\uff0c\u53ef\u7528\u4e8e\u53c2\u6570\u9a8c\u8bc1\u3001\u7ed3\u679c\u6a21\u62df</li> <li> <p>AfterTool\uff1a\u5de5\u5177\u8c03\u7528\u540e\u89e6\u53d1\uff0c\u53ef\u7528\u4e8e\u7ed3\u679c\u5904\u7406\u3001\u65e5\u5fd7\u8bb0\u5f55</p> </li> <li> <p>AgentCallbacks\uff08<code>Agent</code> \u56de\u8c03\uff09 <pre><code>// \u521b\u5efa Agent \u56de\u8c03\nagentCallbacks := agent.NewCallbacks().\n    RegisterBeforeAgent(func(ctx context.Context, \n        inv *agent.Invocation) (*model.Response, error) {\n        // Agent \u6267\u884c\u524d\u7684\u5904\u7406\n        fmt.Printf(\"\ud83d\udfe2 BeforeAgent: agent=%s starting\\n\", \n            inv.AgentName)\n        return nil, nil\n    }).\n    RegisterAfterAgent(func(ctx context.Context,\n        inv *agent.Invocation, err error) (*model.Response, error) {\n        // Agent \u6267\u884c\u540e\u7684\u5904\u7406\n        fmt.Printf(\"\ud83d\udfe1 AfterAgent: agent=%s completed\\n\", \n            inv.AgentName)\n        return nil, nil\n    })\n</code></pre></p> </li> <li>BeforeAgent\uff1a<code>Agent</code> \u6267\u884c\u524d\u89e6\u53d1\uff0c\u53ef\u7528\u4e8e\u6743\u9650\u68c0\u67e5\u3001\u8f93\u5165\u9a8c\u8bc1</li> <li>AfterAgent\uff1a<code>Agent</code> \u6267\u884c\u540e\u89e6\u53d1\uff0c\u53ef\u7528\u4e8e\u7ed3\u679c\u5904\u7406\u3001\u9519\u8bef\u5904\u7406</li> </ol>"},{"location":"zh/#_45","title":"\u4f7f\u7528\u573a\u666f","text":"<ol> <li>\u76d1\u63a7\u548c\u65e5\u5fd7\uff1a\u8bb0\u5f55\u6a21\u578b\u8c03\u7528\u3001\u5de5\u5177\u4f7f\u7528\u548c <code>Agent</code> \u6267\u884c\u8fc7\u7a0b</li> <li>\u6027\u80fd\u4f18\u5316\uff1a\u76d1\u63a7\u54cd\u5e94\u65f6\u95f4\u548c\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5</li> <li>\u5b89\u5168\u548c\u5ba1\u6838\uff1a\u8fc7\u6ee4\u8f93\u5165\u5185\u5bb9\uff0c\u5ba1\u6838\u8f93\u51fa\u5185\u5bb9</li> <li>\u81ea\u5b9a\u4e49\u5904\u7406\uff1a\u683c\u5f0f\u5316\u7ed3\u679c\uff0c\u91cd\u8bd5\u9519\u8bef\uff0c\u589e\u5f3a\u5185\u5bb9</li> </ol>"},{"location":"zh/#_46","title":"\u96c6\u6210\u793a\u4f8b","text":"<pre><code>// \u521b\u5efa\u5e26\u56de\u8c03\u7684 Agent\nagent := llmagent.New(\n    \"callback-demo\",\n    llmagent.WithModel(model),\n    llmagent.WithModelCallbacks(modelCallbacks),\n    llmagent.WithToolCallbacks(toolCallbacks),\n    llmagent.WithAgentCallbacks(agentCallbacks),\n)\n\n// \u521b\u5efa Runner \u5e76\u6267\u884c\nrunner := runner.NewRunner(\n    \"callback-app\",\n    agent,\n    runner.WithSessionService(sessionService),\n)\n\n// \u6267\u884c\u5bf9\u8bdd\nevents, err := runner.Run(ctx, userID, sessionID, \n    model.NewUserMessage(\"Hello\"))\n</code></pre> <p>Callbacks \u6a21\u5757\u901a\u8fc7\u63d0\u4f9b\u7075\u6d3b\u7684\u56de\u8c03\u673a\u5236\uff0c\u4f7f\u5f97 <code>Agent</code> \u7684\u884c\u4e3a\u66f4\u53ef\u63a7\u3001\u66f4\u900f\u660e\uff0c\u540c\u65f6\u4e3a\u76d1\u63a7\u3001\u5ba1\u6838\u3001\u5b9a\u5236\u5316\u7b49\u9700\u6c42\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u652f\u6301\u3002</p> <p>Callbacks \u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 Callback</p>"},{"location":"zh/#a2a-agent","title":"A2A\u96c6\u6210 - Agent\u95f4\u901a\u4fe1","text":"<p><code>A2A (Agent-to-Agent)</code> \u6a21\u5757\u63d0\u4f9b <code>Agent</code> \u95f4\u901a\u4fe1\u80fd\u529b\uff0c\u652f\u6301\u5c06 tRPC-Agent-Go \u7684 <code>Agent</code> \u5feb\u901f\u96c6\u6210\u5230 A2A \u534f\u8bae\u4e2d\uff0c\u5b9e\u73b0\u591a <code>Agent</code> \u534f\u4f5c\u4ee5\u53ca\u5bf9\u5916\u66b4\u9732\u80fd\u529b\u3002</p>"},{"location":"zh/#_47","title":"\u5feb\u901f\u542f\u52a8","text":"<pre><code>// \u6b65\u9aa41: \u521b\u5efa Agent\nagent := llmagent.New(\n    \"my-agent\",\n    llmagent.WithModel(openai.New(\"gpt-4o-mini\")),\n    llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\"),\n)\n\n// \u6b65\u9aa4 2: \u521b\u5efa A2A \u670d\u52a1\u5668\na2aServer, err := a2a.New(\n    a2a.WithAgent(agent),           // \u7ed1\u5b9a Agent\n    a2a.WithHost(\"localhost:8080\"), // \u8bbe\u7f6e\u76d1\u542c\u5730\u5740\n)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u6b65\u9aa4 3: \u542f\u52a8\u670d\u52a1\u5668\nctx := context.Background()\nif err := a2aServer.Start(ctx); err != nil {\n    log.Fatal(err)\n}\n\nlog.Println(\"A2A \u670d\u52a1\u5668\u5df2\u542f\u52a8: localhost:8080\")\n</code></pre> <p>A2A \u96c6\u6210\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u9605 A2A</p>"},{"location":"zh/#_48","title":"\u540e\u7eed\u89c4\u5212","text":"<p>tRPC-Agent-Go \u5c06\u6301\u7eed\u6f14\u8fdb\uff0c\u8ba1\u5212\u5728\u4ee5\u4e0b\u65b9\u5411\u8fdb\u884c\u6269\u5c55\uff1a</p> <ul> <li>Artifacts \u652f\u6301\uff1a\u96c6\u6210\u7ed3\u6784\u5316\u6570\u636e\u5c55\u793a\u548c\u4ea4\u4e92\u80fd\u529b\uff0c\u652f\u6301\u56fe\u8868\u3001\u8868\u683c\u3001\u4ee3\u7801\u7b49\u591a\u79cd\u6570\u636e\u683c\u5f0f\u7684\u53ef\u89c6\u5316\u5c55\u793a</li> <li>\u591a\u6a21\u6001\u6d41\u5f0f\u5904\u7406\uff1a\u6269\u5c55\u5bf9\u97f3\u9891\u3001\u56fe\u50cf\u3001\u89c6\u9891\u7b49\u591a\u6a21\u6001\u6570\u636e\u7684\u6d41\u5f0f\u5904\u7406\u80fd\u529b\uff0c\u5b9e\u73b0\u66f4\u4e30\u5bcc\u7684\u4ea4\u4e92\u4f53\u9a8c</li> <li>\u591a <code>Agent</code> \u6a21\u5f0f\u6269\u5c55\uff1a\u589e\u52a0\u66f4\u591a <code>Agent</code> \u534f\u4f5c\u6a21\u5f0f\uff0c\u5982\u7ade\u4e89\u5f0f\u3001\u6295\u7968\u5f0f\u3001\u5c42\u6b21\u5316\u51b3\u7b56\u7b49\u9ad8\u7ea7\u534f\u4f5c\u7b56\u7565</li> <li>\u751f\u6001\u96c6\u6210\uff1a\u6df1\u5316\u4e0e tRPC \u751f\u6001\u7684\u96c6\u6210\uff0c\u63d0\u4f9b\u66f4\u591a\u7684\u7ec4\u4ef6\u751f\u6001\uff0c\u5982 Knowledge\uff0cmemory\uff0ctools \u7b49\u7b49</li> </ul>"},{"location":"zh/agent/","title":"Agent \u4f7f\u7528\u6587\u6863","text":"<p><code>Agent</code> \u662f tRPC-Agent-Go \u6846\u67b6\u7684\u6838\u5fc3\u6267\u884c\u5355\u5143\uff0c\u8d1f\u8d23\u5904\u7406\u7528\u6237\u8f93\u5165\u5e76\u751f\u6210\u76f8\u5e94\u7684\u54cd\u5e94\u3002\u6bcf\u4e2a <code>Agent</code> \u90fd\u5b9e\u73b0\u4e86\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\u548c\u56de\u8c03\u673a\u5236\u3002</p> <p>\u6846\u67b6\u63d0\u4f9b\u4e86\u591a\u79cd\u7c7b\u578b\u7684 <code>Agent</code>\uff0c\u5305\u62ec <code>LLMAgent</code>\u3001<code>ChainAgent</code>\u3001<code>ParallelAgent</code>\u3001<code>CycleAgent</code> \u548c <code>GraphAgent</code>\u3002\u672c\u6587\u91cd\u70b9\u4ecb\u7ecd <code>LLMAgent</code>\uff0c\u5176\u4ed6 <code>Agent</code> \u7c7b\u578b\u4ee5\u53ca\u591a <code>Agent</code> \u7cfb\u7edf\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u8003 multiagent\u3002</p>"},{"location":"zh/agent/#_1","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u793a\u4f8b\u4f7f\u7528 OpenAI \u7684 GPT-4o-mini \u6a21\u578b\u3002\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u51c6\u5907\u597d\u76f8\u5e94\u7684 <code>OPENAI_API_KEY</code> \u5e76\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u5bfc\u51fa\uff1a</p> <pre><code>export OPENAI_API_KEY=\"your_api_key\"\n</code></pre> <p>\u6b64\u5916\uff0c\u6846\u67b6\u8fd8\u652f\u6301\u517c\u5bb9 OpenAI API \u7684\u6a21\u578b\uff0c\u53ef\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u914d\u7f6e\uff1a</p> <pre><code>export OPENAI_BASE_URL=\"your_api_base_url\"\nexport OPENAI_API_KEY=\"your_api_key\"\n</code></pre>"},{"location":"zh/agent/#_2","title":"\u521b\u5efa\u6a21\u578b\u5b9e\u4f8b","text":"<p>\u9996\u5148\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6a21\u578b\u5b9e\u4f8b\uff0c\u8fd9\u91cc\u4f7f\u7528 OpenAI \u7684 GPT-4o-mini \u6a21\u578b\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n\nmodelName := flag.String(\"model\", \"gpt-4o-mini\", \"Name of the model to use\")\nflag.Parse()\n// \u521b\u5efa OpenAI \u6a21\u578b\u5b9e\u4f8b\nmodelInstance := openai.New(*modelName, openai.Options{})\n</code></pre>"},{"location":"zh/agent/#_3","title":"\u914d\u7f6e\u751f\u6210\u53c2\u6570","text":"<p>\u8bbe\u7f6e\u6a21\u578b\u7684\u751f\u6210\u53c2\u6570\uff0c\u5305\u62ec\u6700\u5927 token \u6570\u3001\u6e29\u5ea6\u4ee5\u53ca\u662f\u5426\u4f7f\u7528\u6d41\u5f0f\u8f93\u51fa\u7b49\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model\"\n\nmaxTokens := 1000\ntemperature := 0.7\ngenConfig := model.GenerationConfig{\n    MaxTokens:   &amp;maxTokens,   // \u6700\u5927\u751f\u6210 token \u6570\n    Temperature: &amp;temperature, // \u6e29\u5ea6\u53c2\u6570\uff0c\u63a7\u5236\u8f93\u51fa\u7684\u968f\u673a\u6027\n    Stream:      true,         // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n}\n</code></pre>"},{"location":"zh/agent/#llmagent","title":"\u521b\u5efa LLMAgent","text":"<p>\u4f7f\u7528\u6a21\u578b\u5b9e\u4f8b\u548c\u914d\u7f6e\u521b\u5efa <code>LLMAgent</code>\uff0c\u540c\u65f6\u8bbe\u7f6e <code>Agent</code> \u7684 <code>Description</code> \u4e0e <code>Instruction</code>\u3002</p> <p><code>Description</code> \u7528\u4e8e\u63cf\u8ff0 <code>Agent</code> \u7684\u57fa\u672c\u529f\u80fd\u548c\u7279\u6027\uff0cInstruction \u5219\u5b9a\u4e49\u4e86 <code>Agent</code> \u5728\u6267\u884c\u4efb\u52a1\u65f6\u5e94\u9075\u5faa\u7684\u5177\u4f53\u6307\u4ee4\u548c\u884c\u4e3a\u51c6\u5219\u3002</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n\nllmAgent := llmagent.New(\n    \"demo-agent\",                      // Agent \u540d\u79f0\n    llmagent.WithModel(modelInstance), // \u8bbe\u7f6e\u6a21\u578b\n    llmagent.WithDescription(\"A helpful AI assistant for demonstrations\"),              // \u8bbe\u7f6e\u63cf\u8ff0\n    llmagent.WithInstruction(\"Be helpful, concise, and informative in your responses\"), // \u8bbe\u7f6e\u6307\u4ee4\n    llmagent.WithGenerationConfig(genConfig),                                           // \u8bbe\u7f6e\u751f\u6210\u53c2\u6570\n)\n</code></pre>"},{"location":"zh/agent/#_4","title":"\u521b\u5efa\u8c03\u7528\u4e0a\u4e0b\u6587","text":"<p>\u521b\u5efa <code>Invocation</code> \u5bf9\u8c61\uff0c\u5305\u542b\u6267\u884c\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent\"\n\ninvocation := &amp;agent.Invocation{\n    AgentName:     \"demo-agent\",                                                   // Agent \u540d\u79f0\n    InvocationID:  \"demo-invocation-001\",                                          // \u8c03\u7528 ID\n    EndInvocation: false,                                                          // \u662f\u5426\u7ed3\u675f\u8c03\u7528\n    Model:         modelInstance,                                                  // \u4f7f\u7528\u7684\u6a21\u578b\n    Message:       model.NewUserMessage(\"Hello! Can you tell me about yourself?\"), // \u7528\u6237\u6d88\u606f\n    Session:       &amp;session.Session{ID: \"session-001\"},\n}\n</code></pre>"},{"location":"zh/agent/#agent_1","title":"\u6267\u884c Agent","text":"<p>\u8c03\u7528 <code>Agent.Run</code> \u65b9\u6cd5\u5f00\u59cb\u6267\u884c\uff1a</p> <pre><code>import \"context\"\n\nctx := context.Background()\neventChan, err := llmAgent.Run(ctx, invocation)\nif err != nil {\n    log.Fatalf(\"\u6267\u884c Agent \u5931\u8d25: %v\", err)\n}\n</code></pre>"},{"location":"zh/agent/#_5","title":"\u5904\u7406\u4e8b\u4ef6\u6d41","text":"<p>\u901a\u8fc7\u4e8b\u4ef6\u901a\u9053\u63a5\u6536\u6267\u884c\u7ed3\u679c\uff1a</p> <pre><code>// \u5904\u7406 Event\nfor event := range eventChan {\n    // \u68c0\u67e5\u9519\u8bef\n    if event.Error != nil {\n        log.Printf(\"err: %s\", event.Error.Message)\n        continue\n    }\n    // \u5904\u7406\u5185\u5bb9\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        if choice.Delta.Content != \"\" {\n            // \u6d41\u5f0f\u8f93\u51fa\n            fmt.Print(choice.Delta.Content)\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n    if event.Done {\n        break\n    }\n}\n</code></pre> <p>\u8be5\u793a\u4f8b\u7684\u5b8c\u6574\u4ee3\u7801\u53ef\u89c1 examples/llmagent</p>"},{"location":"zh/agent/#_6","title":"\u6838\u5fc3\u6982\u5ff5","text":""},{"location":"zh/agent/#invocation","title":"Invocation","text":"<p><code>Invocation</code> \u662f <code>Agent</code> \u6267\u884c\u6d41\u7a0b\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u5355\u6b21\u8c03\u7528\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\uff1a</p> <pre><code>// Invocation \u662f Agent \u6267\u884c\u6d41\u7a0b\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u5355\u6b21\u8c03\u7528\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\ntype Invocation struct {\n    // Agent \u6307\u5b9a\u8981\u8c03\u7528\u7684 Agent \u5b9e\u4f8b\n    Agent Agent\n    // AgentName \u6807\u8bc6\u8981\u8c03\u7528\u7684 Agent \u5b9e\u4f8b\u540d\u79f0\n    AgentName string\n    // InvocationID \u4e3a\u6bcf\u6b21\u8c03\u7528\u63d0\u4f9b\u552f\u4e00\u6807\u8bc6\n    InvocationID string\n    // Branch \u7528\u4e8e\u5206\u5c42\u4e8b\u4ef6\u8fc7\u6ee4\u7684\u5206\u652f\u6807\u8bc6\u7b26\n    Branch string\n    // EndInvocation \u6807\u8bc6\u662f\u5426\u7ed3\u675f\u8c03\u7528\u7684\u6807\u5fd7\n    EndInvocation bool\n    // Session \u7ef4\u62a4\u5bf9\u8bdd\u7684\u4e0a\u4e0b\u6587\u72b6\u6001\n    Session *session.Session\n    // Model \u6307\u5b9a\u8981\u4f7f\u7528\u7684\u6a21\u578b\u5b9e\u4f8b\n    Model model.Model\n    // Message \u662f\u7528\u6237\u53d1\u9001\u7ed9 Agent \u7684\u5177\u4f53\u5185\u5bb9\n    Message model.Message\n    // EventCompletionCh \u7528\u4e8e\u5728\u4e8b\u4ef6\u5199\u5165\u4f1a\u8bdd\u65f6\u53d1\u51fa\u4fe1\u53f7\n    EventCompletionCh &lt;-chan string\n    // RunOptions \u662f Run \u65b9\u6cd5\u7684\u9009\u9879\u914d\u7f6e\n    RunOptions RunOptions\n    // TransferInfo \u652f\u6301 Agent \u4e4b\u95f4\u7684\u63a7\u5236\u6743\u8f6c\u79fb\n    TransferInfo *TransferInfo\n    // AgentCallbacks \u5141\u8bb8\u5728 Agent \u6267\u884c\u7684\u4e0d\u540c\u9636\u6bb5\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\n    AgentCallbacks *AgentCallbacks\n    // ModelCallbacks \u5141\u8bb8\u5728\u6a21\u578b\u8c03\u7528\u7684\u4e0d\u540c\u9636\u6bb5\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\n    ModelCallbacks *model.ModelCallbacks\n    // ToolCallbacks \u5141\u8bb8\u5728\u5de5\u5177\u8c03\u7528\u7684\u4e0d\u540c\u9636\u6bb5\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\n    ToolCallbacks *tool.ToolCallbacks\n}\n</code></pre>"},{"location":"zh/agent/#event","title":"Event","text":"<p><code>Event</code> \u662f <code>Agent</code> \u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5b9e\u65f6\u53cd\u9988\uff0c\u901a\u8fc7 <code>Event</code> \u6d41\u5b9e\u65f6\u62a5\u544a\u6267\u884c\u8fdb\u5c55\u3002</p> <p>Event \u4e3b\u8981\u6709\u4ee5\u4e0b\u7c7b\u578b\uff1a</p> <ul> <li>\u6a21\u578b\u5bf9\u8bdd\u4e8b\u4ef6</li> <li>\u5de5\u5177\u8c03\u7528\u4e0e\u54cd\u5e94\u4e8b\u4ef6</li> <li>Agent \u8f6c\u79fb\u4e8b\u4ef6</li> <li>\u9519\u8bef\u4e8b\u4ef6</li> </ul> <pre><code>// Event \u662f Agent \u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5b9e\u65f6\u53cd\u9988\uff0c\u901a\u8fc7 Event \u6d41\u5b9e\u65f6\u62a5\u544a\u6267\u884c\u8fdb\u5c55\ntype Event struct {\n    // Response \u5305\u542b\u6a21\u578b\u7684\u54cd\u5e94\u5185\u5bb9\u3001\u5de5\u5177\u8c03\u7528\u7ed3\u679c\u548c\u7edf\u8ba1\u4fe1\u606f\n    *model.Response\n    // InvocationID \u5173\u8054\u5230\u5177\u4f53\u7684\u8c03\u7528\n    InvocationID string `json:\"invocationId\"`\n    // Author \u662f\u4e8b\u4ef6\u7684\u6765\u6e90\uff0c\u4f8b\u5982 Agent \u6216\u5de5\u5177\n    Author string `json:\"author\"`\n    // ID \u662f\u4e8b\u4ef6\u7684\u552f\u4e00\u6807\u8bc6\n    ID string `json:\"id\"`\n    // Timestamp \u8bb0\u5f55\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\n    Timestamp time.Time `json:\"timestamp\"`\n    // Branch \u7528\u4e8e\u5206\u5c42\u4e8b\u4ef6\u8fc7\u6ee4\u7684\u5206\u652f\u6807\u8bc6\u7b26\n    Branch string `json:\"branch,omitempty\"`\n    // RequiresCompletion \u6807\u8bc6\u6b64\u4e8b\u4ef6\u662f\u5426\u9700\u8981\u5b8c\u6210\u4fe1\u53f7\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n    // CompletionID \u7528\u4e8e\u6b64\u4e8b\u4ef6\u7684\u5b8c\u6210\u4fe1\u53f7\n    CompletionID string `json:\"completionId,omitempty\"`\n    // LongRunningToolIDs \u662f\u957f\u65f6\u95f4\u8fd0\u884c\u51fd\u6570\u8c03\u7528\u7684 ID \u96c6\u5408\uff0cAgent \u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u6b64\u5b57\u6bb5\u4e86\u89e3\u54ea\u4e2a\u51fd\u6570\u8c03\u7528\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\uff0c\u4ec5\u5bf9\u51fd\u6570\u8c03\u7528\u4e8b\u4ef6\u6709\u6548\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p><code>Event</code> \u7684\u6d41\u5f0f\u7279\u6027\u8ba9\u4f60\u80fd\u591f\u5b9e\u65f6\u770b\u5230 <code>Agent</code> \u7684\u5de5\u4f5c\u8fc7\u7a0b\uff0c\u5c31\u50cf\u548c\u4e00\u4e2a\u771f\u4eba\u5bf9\u8bdd\u4e00\u6837\u81ea\u7136\u3002\u4f60\u53ea\u9700\u8981\u904d\u5386 <code>Event</code> \u6d41\uff0c\u68c0\u67e5\u6bcf\u4e2a <code>Event</code> \u7684\u5185\u5bb9\u548c\u72b6\u6001\uff0c\u5c31\u80fd\u5b8c\u6574\u5730\u5904\u7406 <code>Agent</code> \u7684\u6267\u884c\u7ed3\u679c\u3002</p>"},{"location":"zh/agent/#agent_2","title":"Agent \u63a5\u53e3","text":"<p><code>Agent</code> \u63a5\u53e3\u5b9a\u4e49\u4e86\u6240\u6709 <code>Agent</code> \u5fc5\u987b\u5b9e\u73b0\u7684\u6838\u5fc3\u884c\u4e3a\u3002\u8fd9\u4e2a\u63a5\u53e3\u8ba9\u4f60\u80fd\u591f\u7edf\u4e00\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684 <code>Agent</code>\uff0c\u540c\u65f6\u652f\u6301\u5de5\u5177\u8c03\u7528\u548c\u5b50 <code>Agent</code> \u7ba1\u7406\u3002</p> <pre><code>type Agent interface {\n    // Run \u63a5\u6536\u6267\u884c\u4e0a\u4e0b\u6587\u548c\u8c03\u7528\u4fe1\u606f\uff0c\u8fd4\u56de\u4e00\u4e2a\u4e8b\u4ef6\u901a\u9053\u3002\u901a\u8fc7\u8fd9\u4e2a\u901a\u9053\uff0c\u4f60\u53ef\u4ee5\u5b9e\u65f6\u63a5\u6536 Agent \u7684\u6267\u884c\u8fdb\u5c55\u548c\u7ed3\u679c\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n    // Tools \u8fd4\u56de\u6b64 Agent \u53ef\u4ee5\u8bbf\u95ee\u548c\u6267\u884c\u7684\u5de5\u5177\u5217\u8868\n    Tools() []tool.Tool\n    // Info \u65b9\u6cd5\u63d0\u4f9b Agent \u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\u540d\u79f0\u548c\u63cf\u8ff0\uff0c\u4fbf\u4e8e\u8bc6\u522b\u548c\u7ba1\u7406\n    Info() Info\n    // SubAgents \u8fd4\u56de\u6b64 Agent \u53ef\u7528\u7684\u5b50 Agent \u5217\u8868\n    // SubAgents \u548c FindSubAgent \u65b9\u6cd5\u652f\u6301 Agent \u4e4b\u95f4\u7684\u534f\u4f5c\u3002\u4e00\u4e2a Agent \u53ef\u4ee5\u5c06\u4efb\u52a1\u59d4\u6258\u7ed9\u5176\u4ed6 Agent\uff0c\u6784\u5efa\u590d\u6742\u7684\u591a Agent \u7cfb\u7edf\n    SubAgents() []Agent\n    // FindSubAgent \u901a\u8fc7\u540d\u79f0\u67e5\u627e\u5b50 Agent\n    FindSubAgent(name string) Agent\n}\n</code></pre> <p>\u6846\u67b6\u63d0\u4f9b\u4e86\u591a\u79cd\u7c7b\u578b\u7684 Agent \u5b9e\u73b0\uff0c\u5305\u62ec <code>LLMAgent</code>\u3001<code>ChainAgent</code>\u3001<code>ParallelAgent</code>\u3001<code>CycleAgent</code> \u548c <code>GraphAgent</code>\uff0c\u4e0d\u540c\u7c7b\u578b <code>Agent</code> \u4ee5\u53ca\u591a <code>Agent</code> \u7cfb\u7edf\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u8003 multiagent\u3002</p>"},{"location":"zh/agent/#callbacks","title":"Callbacks","text":"<p>Callbacks \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u56de\u8c03\u673a\u5236\uff0c\u8ba9\u4f60\u80fd\u591f\u5728 <code>Agent</code> \u6267\u884c\u7684\u5173\u952e\u8282\u70b9\u6ce8\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\u3002</p>"},{"location":"zh/agent/#_7","title":"\u56de\u8c03\u7c7b\u578b","text":"<p>\u6846\u67b6\u63d0\u4f9b\u4e86\u4e09\u79cd\u7c7b\u578b\u7684\u56de\u8c03\uff1a</p> <p>Agent Callbacks\uff1a\u5728 <code>Agent</code> \u6267\u884c\u524d\u540e\u89e6\u53d1 <pre><code>type AgentCallbacks struct {\n    BeforeAgent []BeforeAgentCallback  // Agent \u8fd0\u884c\u524d\u7684\u56de\u8c03\n    AfterAgent  []AfterAgentCallback   // Agent \u8fd0\u884c\u540e\u7684\u56de\u8c03\n}\n</code></pre></p> <p>Model Callbacks\uff1a\u5728\u6a21\u578b\u8c03\u7528\u524d\u540e\u89e6\u53d1 <pre><code>type ModelCallbacks struct {\n    BeforeModel []BeforeModelCallback  // \u6a21\u578b\u8c03\u7528\u524d\u7684\u56de\u8c03\n    AfterModel  []AfterModelCallback   // \u6a21\u578b\u8c03\u7528\u540e\u7684\u56de\u8c03\n}\n</code></pre></p> <p>Tool Callbacks\uff1a\u5728\u5de5\u5177\u8c03\u7528\u524d\u540e\u89e6\u53d1</p> <pre><code>type ToolCallbacks struct {\n    BeforeTool []BeforeToolCallback  // \u5de5\u5177\u8c03\u7528\u524d\u7684\u56de\u8c03\n    AfterTool []AfterToolCallback    // \u5de5\u5177\u8c03\u7528\u540e\u7684\u56de\u8c03\n}\n</code></pre>"},{"location":"zh/agent/#_8","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>// \u521b\u5efa Agent \u56de\u8c03\ncallbacks := &amp;agent.AgentCallbacks{\n    BeforeAgent: []agent.BeforeAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation) (*model.Response, error) {\n            log.Printf(\"Agent %s \u5f00\u59cb\u6267\u884c\", invocation.AgentName)\n            return nil, nil\n        },\n    },\n    AfterAgent: []agent.AfterAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation, runErr error) (*model.Response, error) {\n            if runErr != nil {\n                log.Printf(\"Agent %s \u6267\u884c\u51fa\u9519: %v\", invocation.AgentName, runErr)\n            } else {\n                log.Printf(\"Agent %s \u6267\u884c\u5b8c\u6210\", invocation.AgentName)\n            }\n            return nil, nil\n        },\n    },\n}\n\n// \u5728 Invocation \u4e2d\u4f7f\u7528\u56de\u8c03\ninvocation := &amp;agent.Invocation{\n    AgentName:     \"demo-agent\",\n    InvocationID:  \"demo-001\",\n    AgentCallbacks: callbacks,\n    Model:         modelInstance,\n    Message:       model.NewUserMessage(\"\u7528\u6237\u8f93\u5165\"),\n    Session: &amp;session.Session{\n        ID: \"session-001\",\n    },\n}\n</code></pre> <p>\u56de\u8c03\u673a\u5236\u8ba9\u4f60\u80fd\u591f\u7cbe\u786e\u63a7\u5236 <code>Agent</code> \u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u4e1a\u52a1\u903b\u8f91\u3002</p>"},{"location":"zh/agent/#_9","title":"\u8fdb\u9636\u4f7f\u7528","text":"<p>\u6846\u67b6\u8fd8\u63d0\u4f9b\u4e86 <code>Runner</code>\u3001<code>Session</code> \u548c <code>Memory</code> \u7b49\u9ad8\u7ea7\u529f\u80fd\uff0c\u7528\u4e8e\u6784\u5efa\u66f4\u590d\u6742\u7684 `Agent \u7cfb\u7edf\u3002</p> <p><code>Runner</code> \u662f <code>Agent</code> \u7684\u6267\u884c\u5668\uff0c\u8d1f\u8d23\u7ba1\u7406 <code>Agent</code> \u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4e32\u8054\u4e86 <code>Session/Memory Service</code> \u7b49\u80fd\u529b\u3002</p> <p><code>Session Service</code> \u7528\u4e8e\u7ba1\u7406\u4f1a\u8bdd\u72b6\u6001\uff0c\u652f\u6301\u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55\u548c\u4e0a\u4e0b\u6587\u7ef4\u62a4\u3002</p> <p><code>Memory Service</code> \u7528\u4e8e\u8bb0\u5f55\u7528\u6237\u7684\u504f\u597d\u4fe1\u606f\uff0c\u652f\u6301\u4e2a\u6027\u5316\u4f53\u9a8c\u3002</p> <p>\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 runner\u3001session \u548c memory \u6587\u6863\u3002</p>"},{"location":"zh/event/","title":"Event \u4f7f\u7528\u6587\u6863","text":"<p><code>Event</code> \u662f tRPC-Agent-Go \u4e2d <code>Agent</code> \u4e0e\u7528\u6237\u4e4b\u95f4\u901a\u4fe1\u7684\u6838\u5fc3\u673a\u5236\u3002\u5b83\u5c31\u50cf\u4e00\u4e2a\u6d88\u606f\u4fe1\u5c01\uff0c\u627f\u8f7d\u7740 <code>Agent</code> \u7684\u54cd\u5e94\u5185\u5bb9\u3001\u5de5\u5177\u8c03\u7528\u7ed3\u679c\u3001\u9519\u8bef\u4fe1\u606f\u7b49\u3002\u901a\u8fc7 <code>Event</code>\uff0c\u4f60\u53ef\u4ee5\u5b9e\u65f6\u4e86\u89e3 <code>Agent</code> \u7684\u5de5\u4f5c\u72b6\u6001\uff0c\u5904\u7406\u6d41\u5f0f\u54cd\u5e94\uff0c\u5b9e\u73b0\u591a <code>Agent</code> \u534f\u4f5c\uff0c\u4ee5\u53ca\u8ffd\u8e2a\u5de5\u5177\u6267\u884c\u3002</p>"},{"location":"zh/event/#event_1","title":"Event \u6982\u8ff0","text":"<p><code>Event</code> \u662f <code>Agent</code> \u4e0e\u7528\u6237\u4e4b\u95f4\u901a\u4fe1\u7684\u8f7d\u4f53\u3002</p> <p>\u7528\u6237\u901a\u8fc7 <code>runner.Run()</code> \u65b9\u6cd5\u83b7\u53d6\u4e8b\u4ef6\u6d41\uff0c\u7136\u540e\u76d1\u542c\u4e8b\u4ef6\u901a\u9053\u6765\u5904\u7406 <code>Agent</code> \u7684\u54cd\u5e94\u3002</p>"},{"location":"zh/event/#event_2","title":"Event \u7ed3\u6784","text":"<p><code>Event</code> \u8868\u793a <code>Agent</code> \u4e0e\u7528\u6237\u4e4b\u95f4\u7684\u4e00\u6b21\u4e8b\u4ef6\uff0c\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>type Event struct {\n    // Response \u662f Event \u7684\u57fa\u7840\u54cd\u5e94\u7ed3\u6784\uff0c\u627f\u8f7d LLM \u7684\u54cd\u5e94\n    *model.Response\n\n    // InvocationID \u662f\u672c\u6b21\u8c03\u7528\u7684\u552f\u4e00\u6807\u8bc6\n    InvocationID string `json:\"invocationId\"`\n\n    // Author \u662f\u4e8b\u4ef6\u7684\u53d1\u8d77\u8005\n    Author string `json:\"author\"`\n\n    // ID \u662f\u4e8b\u4ef6\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n    ID string `json:\"id\"`\n\n    // Timestamp \u662f\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // Branch \u662f\u5206\u652f\u6807\u8bc6\u7b26\uff0c\u7528\u4e8e\u591a Agent \u534f\u4f5c\n    Branch string `json:\"branch,omitempty\"`\n\n    // RequiresCompletion \u8868\u793a\u6b64\u4e8b\u4ef6\u662f\u5426\u9700\u8981\u5b8c\u6210\u4fe1\u53f7\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n\n    // CompletionID \u7528\u4e8e\u6b64\u4e8b\u4ef6\u7684\u5b8c\u6210\u4fe1\u53f7\n    CompletionID string `json:\"completionId,omitempty\"`\n\n    // LongRunningToolIDs \u662f\u957f\u8fd0\u884c\u51fd\u6570\u8c03\u7528\u7684 ID \u96c6\u5408\n    // Agent \u5ba2\u6237\u7aef\u5c06\u4ece\u6b64\u5b57\u6bb5\u4e86\u89e3\u54ea\u4e9b\u51fd\u6570\u8c03\u7528\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\n    // \u4ec5\u5bf9\u51fd\u6570\u8c03\u7528\u4e8b\u4ef6\u6709\u6548\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p><code>model.Response</code> \u662f <code>Event</code> \u7684\u57fa\u7840\u54cd\u5e94\u7ed3\u6784\uff0c\u627f\u8f7d\u4e86 LLM \u7684\u54cd\u5e94\u3001\u5de5\u5177\u8c03\u7528\u4ee5\u53ca\u9519\u8bef\u7b49\u4fe1\u606f\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>type Response struct {\n    // \u54cd\u5e94\u552f\u4e00\u6807\u8bc6\n    ID string `json:\"id\"`\n\n    // \u5bf9\u8c61\u7c7b\u578b\uff08\u5982 \"chat.completion\", \"error\" \u7b49\uff09\uff0c\u5e2e\u52a9\u5ba2\u6237\u7aef\u8bc6\u522b\u5904\u7406\u65b9\u5f0f\n    Object string `json:\"object\"`\n\n    // \u521b\u5efa\u65f6\u95f4\u6233\n    Created int64 `json:\"created\"`\n\n    // \u4f7f\u7528\u7684\u6a21\u578b\u540d\u79f0\n    Model string `json:\"model\"`\n\n    // \u54cd\u5e94\u53ef\u9009\u9879\uff0cLLM \u53ef\u80fd\u751f\u6210\u591a\u4e2a\u5019\u9009\u54cd\u5e94\u4f9b\u7528\u6237\u9009\u62e9\uff0c\u9ed8\u8ba4\u53ea\u6709 1 \u4e2a\n    Choices []Choice `json:\"choices\"`\n\n    // \u4f7f\u7528\u7edf\u8ba1\u4fe1\u606f\uff0c\u8bb0\u5f55 token \u4f7f\u7528\u60c5\u51b5\n    Usage *Usage `json:\"usage,omitempty\"`\n\n    // \u7cfb\u7edf\u6307\u7eb9\n    SystemFingerprint *string `json:\"system_fingerprint,omitempty\"`\n\n    // \u9519\u8bef\u4fe1\u606f\n    Error *ResponseError `json:\"error,omitempty\"`\n\n    // \u65f6\u95f4\u6233\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // \u8868\u793a\u6574\u4e2a\u5bf9\u8bdd\u662f\u5426\u5b8c\u6210\n    Done bool `json:\"done\"`\n\n    // \u662f\u5426\u4e3a\u90e8\u5206\u54cd\u5e94\n    IsPartial bool `json:\"is_partial\"`\n}\n\ntype Choice struct {\n    // \u9009\u62e9\u7d22\u5f15\n    Index int `json:\"index\"`\n\n    // \u5b8c\u6574\u6d88\u606f\uff0c\u5305\u542b\u6574\u4e2a\u54cd\u5e94\n    Message Message `json:\"message,omitempty\"`\n\n    // \u589e\u91cf\u6d88\u606f\uff0c\u7528\u4e8e\u6d41\u5f0f\u54cd\u5e94\uff0c\u53ea\u5305\u542b\u5f53\u524d\u5757\u7684\u65b0\u5185\u5bb9\n    // \u4f8b\u5982\uff1a\u5b8c\u6574\u54cd\u5e94 \"Hello, how can I help you?\" \u5728\u6d41\u5f0f\u54cd\u5e94\u4e2d\uff1a\n    // \u7b2c\u4e00\u4e2a\u4e8b\u4ef6\uff1aDelta.Content = \"Hello\"\n    // \u7b2c\u4e8c\u4e2a\u4e8b\u4ef6\uff1aDelta.Content = \", how\"  \n    // \u7b2c\u4e09\u4e2a\u4e8b\u4ef6\uff1aDelta.Content = \" can I help you?\"\n    Delta Message `json:\"delta,omitempty\"`\n\n    // \u5b8c\u6210\u539f\u56e0\n    FinishReason *string `json:\"finish_reason,omitempty\"`\n}\n\ntype Message struct {\n    // \u6d88\u606f\u53d1\u8d77\u4eba\u7684\u89d2\u8272\uff0c\u4f8b\u5982 \"system\", \"user\", \"assistant\", \"tool\"\n    Role string `json:\"role\"`\n\n    // \u6d88\u606f\u5185\u5bb9\n    Content string `json:\"content\"`\n\n    // \u591a\u6a21\u5f0f\u6d88\u606f\u7684\u5185\u5bb9\u7247\u6bb5\n    ContentParts []ContentPart `json:\"content_parts,omitempty\"`\n\n    // \u5de5\u5177\u54cd\u5e94\u6240\u4f7f\u7528\u7684\u5de5\u5177\u7684 ID\n    ToolID string `json:\"tool_id,omitempty\"`\n\n    // \u5de5\u5177\u54cd\u5e94\u6240\u4f7f\u7528\u7684\u5de5\u5177\u7684\u540d\u79f0\n    ToolName string `json:\"tool_name,omitempty\"`\n\n    // \u53ef\u9009\u7684\u5de5\u5177\u8c03\u7528\n    ToolCalls []ToolCall `json:\"tool_calls,omitempty\"`\n}\n\ntype Usage struct {\n    // \u63d0\u793a\u8bcd\u4f7f\u7528\u7684 Token \u6570\u91cf.\n    PromptTokens int `json:\"prompt_tokens\"`\n\n    // \u8865\u5168\u4f7f\u7528\u7684 Token \u6570\u91cf.\n    CompletionTokens int `json:\"completion_tokens\"`\n\n    // \u54cd\u5e94\u4e2d\u4f7f\u7528\u7684\u603b Token \u6570\u91cf.\n    TotalTokens int `json:\"total_tokens\"`\n}\n</code></pre>"},{"location":"zh/event/#event_3","title":"Event \u7c7b\u578b","text":"<p><code>Event</code> \u5728\u4ee5\u4e0b\u573a\u666f\u4e2d\u4f1a\u88ab\u521b\u5efa\u548c\u53d1\u9001\uff1a</p> <ol> <li>\u7528\u6237\u6d88\u606f\u4e8b\u4ef6\uff1a\u7528\u6237\u53d1\u9001\u6d88\u606f\u65f6\u81ea\u52a8\u521b\u5efa</li> <li><code>Agent</code> \u54cd\u5e94\u4e8b\u4ef6\uff1a<code>Agent</code> \u751f\u6210\u54cd\u5e94\u65f6\u521b\u5efa</li> <li>\u6d41\u5f0f\u54cd\u5e94\u4e8b\u4ef6\uff1a\u6d41\u5f0f\u6a21\u5f0f\u4e0b\u6bcf\u4e2a\u54cd\u5e94\u5757\u90fd\u4f1a\u521b\u5efa</li> <li>\u5de5\u5177\u8c03\u7528\u4e8b\u4ef6\uff1a<code>Agent</code> \u8c03\u7528\u5de5\u5177\u65f6\u521b\u5efa</li> <li>\u9519\u8bef\u4e8b\u4ef6\uff1a\u53d1\u751f\u9519\u8bef\u65f6\u521b\u5efa</li> <li><code>Agent</code> \u8f6c\u79fb\u4e8b\u4ef6\uff1a<code>Agent</code> \u8f6c\u79fb\u7ed9\u5176\u4ed6 <code>Agent</code> \u65f6\u521b\u5efa</li> <li>\u5b8c\u6210\u4e8b\u4ef6\uff1aAgent \u6267\u884c\u5b8c\u6210\u65f6\u521b\u5efa</li> </ol> <p>\u6839\u636e <code>model.Response.Object</code> \u5b57\u6bb5\uff0c<code>Event</code> \u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u7c7b\u578b\uff1a</p> <pre><code>const (\n    // \u9519\u8bef\u4e8b\u4ef6\n    ObjectTypeError = \"error\"\n\n    // \u5de5\u5177\u54cd\u5e94\u4e8b\u4ef6\n    ObjectTypeToolResponse = \"tool.response\"\n\n    // \u9884\u5904\u7406\u4e8b\u4ef6\n    ObjectTypePreprocessingBasic = \"preprocessing.basic\"\n    ObjectTypePreprocessingContent = \"preprocessing.content\"\n    ObjectTypePreprocessingIdentity = \"preprocessing.identity\"\n    ObjectTypePreprocessingInstruction = \"preprocessing.instruction\"\n    ObjectTypePreprocessingPlanning = \"preprocessing.planning\"\n\n    // \u540e\u5904\u7406\u4e8b\u4ef6\n    ObjectTypePostprocessingPlanning = \"postprocessing.planning\"\n    ObjectTypePostprocessingCodeExecution = \"postprocessing.code_execution\"\n\n    // Agent \u8f6c\u79fb\u4e8b\u4ef6\n    ObjectTypeTransfer = \"agent.transfer\"\n\n    // Runner \u5b8c\u6210\u4e8b\u4ef6\n    ObjectTypeRunnerCompletion = \"runner.completion\"\n)\n</code></pre>"},{"location":"zh/event/#event_4","title":"Event \u521b\u5efa","text":"<p>\u5728\u5f00\u53d1\u81ea\u5b9a\u4e49 <code>Agent</code> \u7c7b\u578b\u6216 <code>Processor</code> \u65f6\uff0c\u9700\u8981\u521b\u5efa <code>Event</code>\u3002</p> <p><code>Event</code> \u63d0\u4f9b\u4e86\u4e09\u79cd\u521b\u5efa\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u573a\u666f\u3002</p> <pre><code>// \u521b\u5efa\u65b0\u4e8b\u4ef6\nfunc New(invocationID, author string, opts ...Option) *Event\n\n// \u521b\u5efa\u9519\u8bef\u4e8b\u4ef6\nfunc NewErrorEvent(invocationID, author, errorType, errorMessage string) *Event\n\n// \u4ece\u54cd\u5e94\u521b\u5efa\u4e8b\u4ef6\nfunc NewResponseEvent(invocationID, author string, response *model.Response) *Event\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li><code>invocationID string</code>\uff1a\u8c03\u7528\u552f\u4e00\u6807\u8bc6</li> <li><code>author string</code>\uff1a\u4e8b\u4ef6\u53d1\u8d77\u8005</li> <li><code>opts ...Option</code>\uff1a\u53ef\u9009\u7684\u914d\u7f6e\u9009\u9879\uff08\u4ec5 <code>New</code> \u65b9\u6cd5\uff09</li> <li><code>errorType string</code>\uff1a\u9519\u8bef\u7c7b\u578b\uff08\u4ec5 <code>NewErrorEvent</code> \u65b9\u6cd5\uff09</li> <li><code>errorMessage string</code>\uff1a\u9519\u8bef\u6d88\u606f\uff08\u4ec5 <code>NewErrorEvent</code> \u65b9\u6cd5\uff09</li> <li><code>response *model.Response</code>\uff1a\u54cd\u5e94\u5bf9\u8c61\uff08\u4ec5 <code>NewResponseEvent</code> \u65b9\u6cd5\uff09</li> </ul> <p>\u6846\u67b6\u652f\u6301\u4ee5\u4e0b <code>Option</code> \u7528\u4ee5\u914d\u7f6e <code>Event</code>\uff1a</p> <ul> <li><code>WithBranch(branch string)</code>\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u7684\u5206\u652f\u6807\u8bc6</li> <li><code>WithResponse(response *model.Response)</code>\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u7684\u54cd\u5e94\u5185\u5bb9</li> <li><code>WithObject(o string)</code>\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u7684\u7c7b\u578b</li> </ul> <p>\u793a\u4f8b\uff1a <pre><code>// \u521b\u5efa\u57fa\u672c\u4e8b\u4ef6\nevt := event.New(\"invoke-123\", \"agent\")\n\n// \u521b\u5efa\u5e26\u5206\u652f\u7684\u4e8b\u4ef6\nevt := event.New(\"invoke-123\", \"agent\", event.WithBranch(\"main\"))\n\n// \u521b\u5efa\u9519\u8bef\u4e8b\u4ef6\nevt := event.NewErrorEvent(\"invoke-123\", \"agent\", \"api_error\", \"\u8bf7\u6c42\u8d85\u65f6\")\n\n// \u4ece\u54cd\u5e94\u521b\u5efa\u4e8b\u4ef6\nresponse := &amp;model.Response{\n    Object: \"chat.completion\",\n    Done:   true,\n    Choices: []model.Choice{{Message: model.Message{Role: \"assistant\", Content: \"Hello!\"}}},\n}\nevt := event.NewResponseEvent(\"invoke-123\", \"agent\", response)\n</code></pre></p>"},{"location":"zh/event/#event_5","title":"Event \u65b9\u6cd5","text":"<p><code>Event</code> \u63d0\u4f9b\u4e86 <code>Clone</code> \u65b9\u6cd5\uff0c\u7528\u4e8e\u521b\u5efa <code>Event</code> \u7684\u6df1\u62f7\u8d1d\u3002</p> <pre><code>func (e *Event) Clone() *Event\n</code></pre>"},{"location":"zh/event/#event_6","title":"Event \u4f7f\u7528\u793a\u4f8b","text":"<p>\u8fd9\u4e2a\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f7f\u7528 <code>Event</code> \u5904\u7406 <code>Agent</code> \u7684\u6d41\u5f0f\u54cd\u5e94\u3001\u5de5\u5177\u8c03\u7528\u548c\u9519\u8bef\u5904\u7406\u3002</p>"},{"location":"zh/event/#_1","title":"\u6838\u5fc3\u6d41\u7a0b","text":"<ol> <li>\u53d1\u9001\u7528\u6237\u6d88\u606f\uff1a\u901a\u8fc7 <code>runner.Run()</code> \u542f\u52a8 <code>Agent</code> \u5904\u7406</li> <li>\u63a5\u6536\u4e8b\u4ef6\u6d41\uff1a\u5b9e\u65f6\u5904\u7406 <code>Agent</code> \u8fd4\u56de\u7684\u4e8b\u4ef6</li> <li>\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u4e8b\u4ef6\uff1a\u533a\u5206\u6d41\u5f0f\u5185\u5bb9\u3001\u5de5\u5177\u8c03\u7528\u3001\u9519\u8bef\u7b49</li> <li>\u53ef\u89c6\u5316\u8f93\u51fa\uff1a\u4e3a\u7528\u6237\u63d0\u4f9b\u53cb\u597d\u7684\u4ea4\u4e92\u4f53\u9a8c</li> </ol>"},{"location":"zh/event/#_2","title":"\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>// processMessage \u5904\u7406\u5355\u6b21\u6d88\u606f\u4ea4\u4e92\nfunc (c *multiTurnChat) processMessage(ctx context.Context, userMessage string) error {\n    message := model.NewUserMessage(userMessage)\n\n    // \u901a\u8fc7 runner \u8fd0\u884c agent\n    eventChan, err := c.runner.Run(ctx, c.userID, c.sessionID, message)\n    if err != nil {\n        return fmt.Errorf(\"failed to run agent: %w\", err)\n    }\n\n    // \u5904\u7406\u54cd\u5e94\n    return c.processResponse(eventChan)\n}\n\n// processResponse \u5904\u7406\u54cd\u5e94\uff0c\u5305\u62ec\u6d41\u5f0f\u54cd\u5e94\u548c\u5de5\u5177\u8c03\u7528\u53ef\u89c6\u5316\nfunc (c *multiTurnChat) processResponse(eventChan &lt;-chan *event.Event) error {\n    fmt.Print(\"\ud83e\udd16 Assistant: \")\n\n    var (\n        fullContent       string        // \u7d2f\u79ef\u7684\u5b8c\u6574\u5185\u5bb9\n        toolCallsDetected bool          // \u662f\u5426\u68c0\u6d4b\u5230\u5de5\u5177\u8c03\u7528\n        assistantStarted  bool          // Assistant \u662f\u5426\u5df2\u5f00\u59cb\u56de\u590d\n    )\n\n    for event := range eventChan {\n        // \u5904\u7406\u5355\u4e2a\u4e8b\u4ef6\n        if err := c.handleEvent(event, &amp;toolCallsDetected, &amp;assistantStarted, &amp;fullContent); err != nil {\n            return err\n        }\n\n        // \u68c0\u67e5\u662f\u5426\u4e3a\u6700\u7ec8\u4e8b\u4ef6\n        if event.Done &amp;&amp; !c.isToolEvent(event) {\n            fmt.Printf(\"\\n\")\n            break\n        }\n    }\n\n    return nil\n}\n\n// handleEvent \u5904\u7406\u5355\u4e2a\u4e8b\u4ef6\nfunc (c *multiTurnChat) handleEvent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) error {\n    // 1. \u5904\u7406\u9519\u8bef\u4e8b\u4ef6\n    if event.Error != nil {\n        fmt.Printf(\"\\n\u274c Error: %s\\n\", event.Error.Message)\n        return nil\n    }\n\n    // 2. \u5904\u7406\u5de5\u5177\u8c03\u7528\n    if c.handleToolCalls(event, toolCallsDetected, assistantStarted) {\n        return nil\n    }\n\n    // 3. \u5904\u7406\u5de5\u5177\u54cd\u5e94\n    if c.handleToolResponses(event) {\n        return nil\n    }\n\n    // 4. \u5904\u7406\u5185\u5bb9\n    c.handleContent(event, toolCallsDetected, assistantStarted, fullContent)\n\n    return nil\n}\n\n// handleToolCalls \u68c0\u6d4b\u5e76\u663e\u793a\u5de5\u5177\u8c03\u7528\nfunc (c *multiTurnChat) handleToolCalls(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n) bool {\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        *toolCallsDetected = true\n        if *assistantStarted {\n            fmt.Printf(\"\\n\")\n        }\n        fmt.Printf(\"\ud83d\udd27 Tool calls initiated:\\n\")\n        for _, toolCall := range event.Choices[0].Message.ToolCalls {\n            fmt.Printf(\"   \u2022 %s (ID: %s)\\n\", toolCall.Function.Name, toolCall.ID)\n            if len(toolCall.Function.Arguments) &gt; 0 {\n                fmt.Printf(\"     Args: %s\\n\", string(toolCall.Function.Arguments))\n            }\n        }\n        fmt.Printf(\"\\n\ud83d\udd04 Executing tools...\\n\")\n        return true\n    }\n    return false\n}\n\n// handleToolResponses \u68c0\u6d4b\u5e76\u663e\u793a\u5de5\u5177\u54cd\u5e94\nfunc (c *multiTurnChat) handleToolResponses(event *event.Event) bool {\n    if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n        for _, choice := range event.Response.Choices {\n            if choice.Message.Role == model.RoleTool &amp;&amp; choice.Message.ToolID != \"\" {\n                fmt.Printf(\"\u2705 Tool response (ID: %s): %s\\n\",\n                    choice.Message.ToolID,\n                    strings.TrimSpace(choice.Message.Content))\n                return true\n            }\n        }\n    }\n    return false\n}\n\n// handleContent \u5904\u7406\u5e76\u663e\u793a\u5185\u5bb9\nfunc (c *multiTurnChat) handleContent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        content := c.extractContent(choice)\n\n        if content != \"\" {\n            c.displayContent(content, toolCallsDetected, assistantStarted, fullContent)\n        }\n    }\n}\n\n// extractContent \u6839\u636e\u6d41\u5f0f\u6a21\u5f0f\u63d0\u53d6\u5185\u5bb9\nfunc (c *multiTurnChat) extractContent(choice model.Choice) string {\n    if c.streaming {\n        // \u6d41\u5f0f\u6a21\u5f0f\uff1a\u4f7f\u7528\u589e\u91cf\u5185\u5bb9\n        return choice.Delta.Content\n    }\n    // \u975e\u6d41\u5f0f\u6a21\u5f0f\uff1a\u4f7f\u7528\u5b8c\u6574\u6d88\u606f\u5185\u5bb9\n    return choice.Message.Content\n}\n\n// displayContent \u5c06\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\nfunc (c *multiTurnChat) displayContent(\n    content string,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if !*assistantStarted {\n        if *toolCallsDetected {\n            fmt.Printf(\"\\n\ud83e\udd16 Assistant: \")\n        }\n        *assistantStarted = true\n    }\n    fmt.Print(content)\n    *fullContent += content\n}\n\n// isToolEvent \u68c0\u67e5\u4e8b\u4ef6\u662f\u5426\u4e3a\u5de5\u5177\u54cd\u5e94\nfunc (c *multiTurnChat) isToolEvent(event *event.Event) bool {\n    if event.Response == nil {\n        return false\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u6709\u5de5\u5177\u8c03\u7528\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        return true\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u6709\u5de5\u5177 ID\n    if len(event.Choices) &gt; 0 &amp;&amp; event.Choices[0].Message.ToolID != \"\" {\n        return true\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u4e3a\u5de5\u5177\u89d2\u8272\n    for _, choice := range event.Response.Choices {\n        if choice.Message.Role == model.RoleTool {\n            return true\n        }\n    }\n\n    return false\n}\n</code></pre>"},{"location":"zh/planner/","title":"Planner \u4f7f\u7528\u6587\u6863","text":"<p><code>Planner</code> \u662f\u7528\u4e8e\u5b9e\u73b0 <code>Agent</code> \u89c4\u5212\u80fd\u529b\u7684\u7ec4\u4ef6\u3002\u5b83\u5141\u8bb8 <code>Agent</code> \u5728\u6267\u884c\u4efb\u52a1\u524d\u5236\u5b9a\u8ba1\u5212\uff0c\u4ece\u800c\u63d0\u9ad8\u6267\u884c\u6548\u7387\u548c\u51c6\u786e\u6027\u3002</p> <p>\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cd <code>Planner</code> \u5b9e\u73b0\uff0c\u5206\u522b\u9002\u7528\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6a21\u578b\uff1a</p> <ul> <li><code>BuiltinPlanner</code>\uff1a\u9002\u7528\u4e8e\u652f\u6301\u539f\u751f\u601d\u8003\u529f\u80fd\u7684\u6a21\u578b</li> <li><code>ReActPlanner</code>\uff1a\u9002\u7528\u4e8e\u4e0d\u652f\u6301\u539f\u751f\u601d\u8003\u7684\u6a21\u578b\uff0c\u901a\u8fc7\u6807\u7b7e\u5316\u6307\u4ee4\u5f15\u5bfc\u6a21\u578b\u6309\u56fa\u5b9a\u683c\u5f0f\u8f93\u51fa\uff0c\u63d0\u4f9b\u7ed3\u6784\u5316\u7684\u601d\u8003\u8fc7\u7a0b</li> </ul>"},{"location":"zh/planner/#planner_1","title":"Planner \u63a5\u53e3","text":"<p><code>Planner</code> \u63a5\u53e3\u5b9a\u4e49\u4e86\u6240\u6709\u89c4\u5212\u5668\u5fc5\u987b\u5b9e\u73b0\u7684\u65b9\u6cd5\uff1a</p> <pre><code>type Planner interface {\n    // BuildPlanningInstruction \u5e94\u7528\u5fc5\u8981\u7684\u914d\u7f6e\u5230 LLM \u8bf7\u6c42\uff0c\u5e76\u6784\u5efa\u8981\u9644\u52a0\u7684\u7cfb\u7edf\u6307\u4ee4\u7528\u4e8e\u89c4\u5212\n    // \u5982\u679c\u4e0d\u9700\u8981\u6307\u4ee4\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n    BuildPlanningInstruction(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        llmRequest *model.Request,\n    ) string\n\n    // ProcessPlanningResponse \u5904\u7406 LLM \u7684\u89c4\u5212\u54cd\u5e94\uff0c\u8fd4\u56de\u5904\u7406\u540e\u7684\u54cd\u5e94\n    // \u5982\u679c\u4e0d\u9700\u8981\u5904\u7406\u5219\u8fd4\u56de nil\n    ProcessPlanningResponse(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        response *model.Response,\n    ) *model.Response\n}\n</code></pre> <p><code>Planner</code> \u7684\u5de5\u4f5c\u6d41\u7a0b\uff1a</p> <ol> <li>\u8bf7\u6c42\u5904\u7406\u9636\u6bb5\uff1a<code>Planner</code> \u5728 LLM \u8bf7\u6c42\u53d1\u9001\u524d\u901a\u8fc7 <code>BuildPlanningInstruction</code> \u6dfb\u52a0\u89c4\u5212\u6307\u4ee4\u6216\u914d\u7f6e</li> <li>\u54cd\u5e94\u5904\u7406\u9636\u6bb5\uff1a<code>Planner</code> \u5904\u7406 LLM \u54cd\u5e94\uff0c\u901a\u8fc7 <code>ProcessPlanningResponse</code> \u7ec4\u7ec7\u5185\u5bb9\u7ed3\u6784</li> </ol>"},{"location":"zh/planner/#builtinplanner","title":"BuiltinPlanner","text":"<p><code>BuiltinPlanner</code> \u9002\u7528\u4e8e\u652f\u6301\u539f\u751f\u601d\u8003\u529f\u80fd\u7684\u6a21\u578b\u3002\u5b83\u4e0d\u751f\u6210\u663e\u5f0f\u7684\u89c4\u5212\u6307\u4ee4\uff0c\u800c\u662f\u901a\u8fc7\u914d\u7f6e\u6a21\u578b\u4f7f\u7528\u5176\u5185\u90e8\u7684\u601d\u8003\u673a\u5236\u6765\u5b9e\u73b0\u89c4\u5212\u529f\u80fd\u3002</p> <p>\u6a21\u578b\u914d\u7f6e\u5982\u4e0b\uff1a</p> <pre><code>type Options struct {\n    // ReasoningEffort \u9650\u5236\u63a8\u7406\u6a21\u578b\u7684\u63a8\u7406\u7a0b\u5ea6\n    // \u652f\u6301\u7684\u503c\uff1a\"low\", \"medium\", \"high\"\n    // \u4ec5\u5bf9 OpenAI o-series \u6a21\u578b\u6709\u6548\n    ReasoningEffort *string\n    // ThinkingEnabled \u4e3a\u652f\u6301\u601d\u8003\u7684\u6a21\u578b\u542f\u7528\u601d\u8003\u6a21\u5f0f\n    // \u4ec5\u5bf9\u901a\u8fc7 OpenAI API \u7684 Claude \u548c Gemini \u6a21\u578b\u6709\u6548\n    ThinkingEnabled *bool\n    // ThinkingTokens \u63a7\u5236\u601d\u8003\u7684\u957f\u5ea6\n    // \u4ec5\u5bf9\u901a\u8fc7 OpenAI API \u7684 Claude \u548c Gemini \u6a21\u578b\u6709\u6548\n    ThinkingTokens *int\n}\n</code></pre> <p>\u5728\u5b9e\u73b0\u4e0a\uff0cBuiltinPlanner \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5de5\u4f5c\uff1a</p> <ul> <li><code>BuildPlanningInstruction</code>\uff1a\u5c06\u601d\u8003\u53c2\u6570\u914d\u7f6e\u5230 LLM \u8bf7\u6c42\u4e2d\uff1b\u7531\u4e8e\u6a21\u578b\u652f\u6301\u539f\u751f\u601d\u8003\uff0c\u4e0d\u9700\u8981\u89c4\u5212\u6807\u7b7e\uff0c\u56e0\u6b64\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32</li> <li><code>ProcessPlanningResponse</code>\uff1a\u7531\u4e8e\u6a21\u578b\u5728\u54cd\u5e94\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u89c4\u5212\u8fc7\u7a0b\uff0c\u56e0\u6b64\u76f4\u63a5\u8fd4\u56de nil</li> </ul> <p>\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/builtin\"\n)\n\n// \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// \u521b\u5efa BuiltinPlanner\nreasoningEffort := \"high\"\nplanner := builtin.New(builtin.Options{\n    ReasoningEffort: &amp;reasoningEffort,\n})\n\n// \u521b\u5efa LLMAgent \u5e76\u914d\u7f6e Planner\nllmAgent := llmagent.New(\n    \"demo-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"A helpful AI assistant with built-in planning\"),\n    llmagent.WithInstruction(\"Be helpful and think through problems carefully\"),\n    llmagent.WithPlanner(planner), // \u914d\u7f6e Planner\n)\n</code></pre>"},{"location":"zh/planner/#reactplanner","title":"ReActPlanner","text":"<p><code>ReActPlanner</code> \u9002\u7528\u4e8e\u4e0d\u652f\u6301\u539f\u751f\u601d\u8003\u7684\u6a21\u578b\u3002\u5b83\u901a\u8fc7\u5f15\u5bfc LLM \u9075\u5faa\u7279\u5b9a\u7684\u683c\u5f0f\uff0c\u4f7f\u7528\u7279\u5b9a\u6807\u7b7e\u6765\u7ec4\u7ec7\u89c4\u5212\u3001\u63a8\u7406\u3001\u884c\u52a8\u548c\u6700\u7ec8\u7b54\u6848\uff0c\u4ece\u800c\u5b9e\u73b0\u7ed3\u6784\u5316\u7684\u601d\u8003\u8fc7\u7a0b\u3002</p> <p>ReActPlanner \u4f7f\u7528\u4ee5\u4e0b\u7279\u5b9a\u6807\u7b7e\u6765\u7ec4\u7ec7\u54cd\u5e94\u5185\u5bb9\uff1a</p> <ol> <li>\u89c4\u5212\u9636\u6bb5\uff08<code>/*PLANNING*/</code>\uff09\uff1a\u521b\u5efa\u660e\u786e\u7684\u8ba1\u5212\u6765\u56de\u7b54\u7528\u6237\u95ee\u9898</li> <li>\u63a8\u7406\u9636\u6bb5\uff08<code>/*REASONING*/</code>\uff09\uff1a\u5728\u5de5\u5177\u6267\u884c\u4e4b\u95f4\u63d0\u4f9b\u63a8\u7406</li> <li>\u884c\u52a8\u9636\u6bb5\uff08<code>/*ACTION*/</code>\uff09\uff1a\u6839\u636e\u8ba1\u5212\u6267\u884c\u5de5\u5177</li> <li>\u91cd\u65b0\u89c4\u5212\uff08<code>/*REPLANNING*/</code>\uff09\uff1a\u6839\u636e\u7ed3\u679c\u9700\u8981\u65f6\u4fee\u8ba2\u8ba1\u5212</li> <li>\u6700\u7ec8\u7b54\u6848\uff08<code>/*FINAL_ANSWER*/</code>\uff09\uff1a\u63d0\u4f9b\u7efc\u5408\u7b54\u6848</li> </ol> <p>\u5728\u5b9e\u73b0\u4e0a\uff0c<code>ReActPlanner</code> \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5de5\u4f5c\uff1a</p> <ul> <li><code>BuildPlanningInstruction</code>\uff1a\u8fd4\u56de\u5305\u542b\u9ad8\u5c42\u6b21\u6307\u5bfc\u3001\u89c4\u5212\u8981\u6c42\u3001\u63a8\u7406\u8981\u6c42\u7b49\u7684\u7efc\u5408\u6307\u4ee4\uff0c\u5f15\u5bfc\u6a21\u578b\u6309\u6807\u7b7e\u683c\u5f0f\u8f93\u51fa</li> <li><code>ProcessPlanningResponse</code>\uff1a\u8fc7\u6ee4\u7a7a\u540d\u79f0\u7684\u5de5\u5177\u8c03\u7528\uff0c\u5982\u679c\u5185\u5bb9\u5305\u542b <code>/*FINAL_ANSWER*/</code> \u6807\u7b7e\u5219\u53ea\u4fdd\u7559\u6700\u7ec8\u7b54\u6848\u90e8\u5206\uff0c\u5426\u5219\u8fd4\u56de\u539f\u5185\u5bb9\uff0c\u5c06\u89c4\u5212\u5185\u5bb9\u4e0e\u6700\u7ec8\u7b54\u6848\u5206\u79bb</li> </ul> <p>\u4f7f\u7528\u793a\u4f8b\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/react\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// \u521b\u5efa\u5de5\u5177\nsearchTool := function.NewFunctionTool(\n    searchFunction,\n    function.WithName(\"search\"),\n    function.WithDescription(\"Search for information on a given topic\"),\n)\n\n// \u521b\u5efa ReActPlanner\nplanner := react.New()\n\n// \u521b\u5efa LLMAgent \u5e76\u914d\u7f6e Planner\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(planner), // \u914d\u7f6e Planner\n    llmagent.WithTools([]tool.Tool{searchTool}), // \u914d\u7f6e\u5de5\u5177\n)\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b\u53ef\u53c2\u8003 examples/react</p>"},{"location":"zh/planner/#planner_2","title":"\u81ea\u5b9a\u4e49 Planner","text":"<p>\u9664\u4e86\u6846\u67b6\u63d0\u4f9b\u7684\u4e24\u79cd <code>Planner</code> \u5b9e\u73b0\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0 <code>Planner</code> \u63a5\u53e3\u6765\u521b\u5efa\u81ea\u5b9a\u4e49\u7684 <code>Planner</code>\uff0c\u4ee5\u6ee1\u8db3\u7279\u5b9a\u9700\u6c42\uff1a</p> <pre><code>type customPlanner struct {\n    // \u81ea\u5b9a\u4e49\u914d\u7f6e\n}\n\nfunc (p *customPlanner) BuildPlanningInstruction(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    llmRequest *model.Request,\n) string {\n    // \u8fd4\u56de\u81ea\u5b9a\u4e49\u7684\u89c4\u5212\u6307\u4ee4\n    return \"\u4f60\u7684\u81ea\u5b9a\u4e49\u89c4\u5212\u6307\u4ee4\"\n}\n\nfunc (p *customPlanner) ProcessPlanningResponse(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    response *model.Response,\n) *model.Response {\n    // \u5904\u7406\u54cd\u5e94\n    return response\n}\n\n// \u521b\u5efa LLMAgent \u5e76\u914d\u7f6e\u81ea\u5b9a\u4e49 Planner\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(&amp;customPlanner{}),      // \u914d\u7f6e Planner\n    llmagent.WithTools([]tool.Tool{searchTool}), // \u914d\u7f6e\u5de5\u5177\n)\n</code></pre>"}]}